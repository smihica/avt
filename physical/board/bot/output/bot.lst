FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.4.2946
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C29xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0117)     ;---------------------------------------------------
                                        (0118)     ; Insert your custom code below this banner
                                        (0119)     ;---------------------------------------------------
                                        (0120) 
                                        (0121)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0122)     halt                           ;Stop execution if power falls too low
                                        (0123) 
                                        (0124)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0125)     // call	void_handler
0008: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0129)     // call	void_handler
000C: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0133)     // call	void_handler
0010: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0137)     // call	void_handler
0014: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   18h                      ;VC3 Interrupt Vector
                                        (0141)     // call	void_handler
0018: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0145)     // call	void_handler
001C: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
                                        (0149)     // call	void_handler
0020: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
0024: 7D 0B 40 LJMP  _PWM16_1_ISR       (0153)     ljmp	_PWM16_1_ISR
0027: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
0028: 7D 07 CA LJMP  _UART_1_TX_ISR     (0157)     ljmp	_UART_1_TX_ISR
002B: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
002C: 7D 07 CB LJMP  _UART_1_RX_ISR     (0161)     ljmp	_UART_1_RX_ISR
002F: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
                                        (0165)     // call	void_handler
0030: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
0034: 7D 0A E3 LJMP  _PWM16_2_ISR       (0169)     ljmp	_PWM16_2_ISR
0037: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
0038: 7D 05 6B LJMP  _UART_2_TX_ISR     (0173)     ljmp	_UART_2_TX_ISR
003B: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
003C: 7D 05 6C LJMP  _UART_2_RX_ISR     (0177)     ljmp	_UART_2_RX_ISR
003F: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   40h                      ;PSoC Block DBB20 Interrupt Vector
                                        (0181)     // call	void_handler
0040: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   44h                      ;PSoC Block DBB21 Interrupt Vector
0044: 7D 0A 86 LJMP  _PWM16_3_ISR       (0185)     ljmp	_PWM16_3_ISR
0047: 7E       RETI                     (0186)     reti
                                        (0187) 
                                        (0188)     org   48h                      ;PSoC Block DCB22 Interrupt Vector
                                        (0189)     // call	void_handler
0048: 7E       RETI                     (0190)     reti
                                        (0191) 
                                        (0192)     org   4Ch                      ;PSoC Block DCB23 Interrupt Vector
004C: 7D 0A 29 LJMP  _PWM16_4_ISR       (0193)     ljmp	_PWM16_4_ISR
004F: 7E       RETI                     (0194)     reti
                                        (0195) 
                                        (0196)     org   50h                      ;PSoC Block DBB30 Interrupt Vector
                                        (0197)     // call	void_handler
0050: 7E       RETI                     (0198)     reti
                                        (0199) 
                                        (0200)     org   54h                      ;PSoC Block DBB31 Interrupt Vector
                                        (0201)     // call	void_handler
0054: 7E       RETI                     (0202)     reti
                                        (0203) 
                                        (0204)     org   58h                      ;PSoC Block DCB32 Interrupt Vector
                                        (0205)     // call	void_handler
0058: 7E       RETI                     (0206)     reti
                                        (0207) 
                                        (0208)     org   5Ch                      ;PSoC Block DCB33 Interrupt Vector
                                        (0209)     // call	void_handler
005C: 7E       RETI                     (0210)     reti
                                        (0211) 
                                        (0212)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0213)     // call	void_handler
0060: 7E       RETI                     (0214)     reti
                                        (0215) 
                                        (0216)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0217)     // call	void_handler
0064: 7E       RETI                     (0218)     reti
0068: 71 10    OR    F,0x10             
                                        (0219)     ;---------------------------------------------------
                                        (0220)     ; Insert your custom code above this banner
                                        (0221)     ;---------------------------------------------------
                                        (0222)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0223) 
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;  Start of Execution.
                                        (0226) ;-----------------------------------------------------------------------------
                                        (0227) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0228) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0229) ;
                                        (0230) 
                                        (0231) IF	(TOOLCHAIN & HITECH)
                                        (0232)  	AREA PD_startup(CODE, REL, CON)
                                        (0233) ELSE
                                        (0234)     org 68h
                                        (0235) ENDIF
                                        (0236) __Start:
                                        (0237) 
                                        (0238)     ; initialize SMP values for voltage stabilization, if required,
                                        (0239)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0240)     ; least for now. 
                                        (0241)     ;
                                        (0242)     M8C_SetBank1
006A: 62 FA 00 MOV   REG[0xFA],0x0      (0243)     mov reg[0FAh], 0				;Reset flash location
006D: 62 E3 87 MOV   REG[0xE3],0x87     (0244)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
0070: 70 EF    AND   F,0xEF             
                                        (0245)     M8C_SetBank0
                                        (0246) 
                                        (0247)     ; %53%20%46%46% Apply Erratum 001-05137 workaround
0072: 50 20    MOV   A,0x20             (0248)     mov   A, 20h
0074: 28       ROMX                     (0249)     romx
0075: 50 40    MOV   A,0x40             (0250)     mov   A, 40h
0077: 28       ROMX                     (0251)     romx
0078: 50 60    MOV   A,0x60             (0252)     mov   A, 60h
007A: 28       ROMX                     (0253)     romx
007B: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0254)     ; %45%20%46%46% End workaround
                                        (0255) 
                                        (0256) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0257) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0258)     M8C_EnableWatchDog
                                        (0259) ENDIF
                                        (0260) 
                                        (0261) IF ( SELECT_32K )
                                        (0262)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0263) ELSE
007E: 41 FE FB AND   REG[0xFE],0xFB     (0264)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0265) ENDIF
                                        (0266) 
                                        (0267)     ;---------------------------
                                        (0268)     ; Set up the Temporary stack
                                        (0269)     ;---------------------------
                                        (0270)     ; A temporary stack is set up for the SSC instructions.
                                        (0271)     ; The real stack start will be assigned later.
                                        (0272)     ;
                                        (0273) _stack_start:          equ 80h
0081: 50 80    MOV   A,0x80             (0274)     mov   A, _stack_start          ; Set top of stack to end of used RAM
0083: 4E       SWAP  SP,A               (0275)     swap  SP, A                    ; This is only temporary if going to LMM
0084: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0276) 
                                        (0277)     ;-----------------------------------------------
                                        (0278)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0279)     ;-----------------------------------------------
                                        (0280) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0281) 
                                        (0282) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                        (0283)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0284)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0285)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0286)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0287)   IF ( AGND_BYPASS )
                                        (0288)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0289)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0290)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0291)     ; value using the proper trim values.
                                        (0292)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0293)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0294)   ENDIF
                                        (0295)  ENDIF
                                        (0296) ENDIF ; 5.0 V Operation
                                        (0297) 
                                        (0298) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                        (0299)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0300)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0301)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0302)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0303)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0304)  ENDIF
                                        (0305) ENDIF ; 3.3 Volt Operation
                                        (0306) 
0087: 55 F8 00 MOV   [data+122],0x0     (0307)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
008A: 55 F9 00 MOV   [data+123],0x0     (0308)     mov  [bSSC_KEYSP], 0
008D: 71 10    OR    F,0x10             
                                        (0309) 
                                        (0310)     ;---------------------------------------
                                        (0311)     ; Initialize Crystal Oscillator and PLL
                                        (0312)     ;---------------------------------------
                                        (0313) 
                                        (0314) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0315)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0316)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0317)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0318)     ; the ECO to stabilize.
                                        (0319)     ;
                                        (0320)     M8C_SetBank1
                                        (0321)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0322)     M8C_SetBank0
                                        (0323)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0324)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0325)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0326) .WaitFor1s:
                                        (0327)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0328)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0329)                                           ;   since interrupts are not globally enabled
                                        (0330) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0331)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0332)     M8C_SetBank1
008F: 62 E0 02 MOV   REG[0xE0],0x2      (0333)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0092: 70 EF    AND   F,0xEF             
0094: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0334)     M8C_SetBank0
                                        (0335)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0336) 
                                        (0337) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0338) 
                                        (0339) IF ( PLL_MODE )
                                        (0340)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0341)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0342)     ;
                                        (0343)     M8C_SetBank1
                                        (0344)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0345)     M8C_SetBank0
                                        (0346)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0347)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0348) 
                                        (0349) .WaitFor16ms:
                                        (0350)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0351)     jz   .WaitFor16ms
                                        (0352)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0353)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0354)     M8C_SetBank0
                                        (0355) 
                                        (0356) IF      ( WAIT_FOR_32K )
                                        (0357) ELSE ; !( WAIT_FOR_32K )
                                        (0358)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0359)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0360) ENDIF ;(WAIT_FOR_32K)
                                        (0361) ENDIF ;(PLL_MODE)
                                        (0362) 
                                        (0363) 	;-------------------------------------------------------
                                        (0364)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0365)     ;-------------------------------------------------------
                                        (0366) 
                                        (0367)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0368) 
                                        (0369) IF (SYSCLK_SOURCE)
                                        (0370)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0371) ENDIF
                                        (0372)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0373) 
                                        (0374)     ;------------------------
                                        (0375)     ; Close CT leakage path.
                                        (0376)     ;------------------------
0097: 62 71 05 MOV   REG[0x71],0x5      (0377)     mov   reg[ACB00CR0], 05h
009A: 62 75 05 MOV   REG[0x75],0x5      (0378)     mov   reg[ACB01CR0], 05h
009D: 62 79 05 MOV   REG[0x79],0x5      (0379)     mov   reg[ACB02CR0], 05h
00A0: 62 7D 05 MOV   REG[0x7D],0x5      (0380)     mov   reg[ACB03CR0], 05h
00A3: 62 D1 07 MOV   REG[0xD1],0x7      
                                        (0381) 
                                        (0382) 
                                        (0383) IF	(TOOLCHAIN & HITECH)
                                        (0384)     ;---------------------------------------------
                                        (0385)     ; HI-TECH initialization: Enter the Large Memory Model, if applicable
                                        (0386)     ;---------------------------------------------
                                        (0387) 	global		__Lstackps
                                        (0388) 	mov     a,low __Lstackps
                                        (0389) 	swap    a,sp
                                        (0390) 
                                        (0391) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0392)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
                                        (0393)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0394)     RAM_SETPAGE_CUR 0
                                        (0395)     RAM_SETPAGE_MVW 0
                                        (0396)     RAM_SETPAGE_MVR 0
                                        (0397)     IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
                                        (0398)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0399)     ELSE
                                        (0400)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0401)     ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0402) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0403) ELSE
                                        (0404)     ;---------------------------------------------
                                        (0405)     ; ImageCraft Enter the Large Memory Model, if applicable
                                        (0406)     ;---------------------------------------------
                                        (0407) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0408)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
00A6: 50 00    MOV   A,0x0              (0409)     mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
00A8: 4E       SWAP  SP,A               (0410)     swap  A, SP
00A9: 62 D3 07 MOV   REG[0xD3],0x7      
00AC: 62 D0 00 MOV   REG[0xD0],0x0      
00AF: 62 D5 00 MOV   REG[0xD5],0x0      
00B2: 62 D4 00 MOV   REG[0xD4],0x0      
                                        (0411)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0412)     RAM_SETPAGE_CUR 0
                                        (0413)     RAM_SETPAGE_MVW 0
                                        (0414)     RAM_SETPAGE_MVR 0
                                        (0415) 
                                        (0416)   IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
00B5: 71 C0    OR    F,0xC0             (0417)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0418)   ELSE
                                        (0419)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0420)   ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0421) ELSE
                                        (0422)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
                                        (0423)     swap  SP, A
                                        (0424) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0425) ENDIF ;	TOOLCHAIN
                                        (0426) 
                                        (0427)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0428)     ;---------------------------------------------------
                                        (0429)     ; Insert your custom code below this banner
                                        (0430)     ;---------------------------------------------------
                                        (0431) 
                                        (0432)     ;---------------------------------------------------
                                        (0433)     ; Insert your custom code above this banner
                                        (0434)     ;---------------------------------------------------
                                        (0435)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0436) 
                                        (0437)     ;-------------------------
                                        (0438)     ; Load Base Configuration
                                        (0439)     ;-------------------------
                                        (0440)     ; Load global parameter settings and load the user modules in the
                                        (0441)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0442)     ; to minimize start up time; (2) We may still need to play with the
                                        (0443)     ; Sleep Timer.
                                        (0444)     ;
00B7: 7C 05 09 LCALL 0x0509             (0445)     lcall LoadConfigInit
                                        (0446) 
                                        (0447)     ;-----------------------------------
                                        (0448)     ; Initialize C Run-Time Environment
                                        (0449)     ;-----------------------------------
                                        (0450) IF ( C_LANGUAGE_SUPPORT )
                                        (0451) IF ( SYSTEM_SMALL_MEMORY_MODEL )
                                        (0452)     mov  A,0                           ; clear the 'bss' segment to zero
                                        (0453)     mov  [__r0],<__bss_start
                                        (0454) BssLoop:
                                        (0455)     cmp  [__r0],<__bss_end
                                        (0456)     jz   BssDone
                                        (0457)     mvi  [__r0],A
                                        (0458)     jmp  BssLoop
                                        (0459) BssDone:
                                        (0460)     mov  A,>__idata_start              ; copy idata to data segment
                                        (0461)     mov  X,<__idata_start
                                        (0462)     mov  [__r0],<__data_start
                                        (0463) IDataLoop:
                                        (0464)     cmp  [__r0],<__data_end
                                        (0465)     jz   C_RTE_Done
                                        (0466)     push A
                                        (0467)     romx
                                        (0468)     mvi  [__r0],A
                                        (0469)     pop  A
                                        (0470)     inc  X
                                        (0471)     adc  A,0
                                        (0472)     jmp  IDataLoop
                                        (0473) 
                                        (0474) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0475) 
                                        (0476) IF ( SYSTEM_LARGE_MEMORY_MODEL )
00BA: 62 D0 00 MOV   REG[0xD0],0x0      (0477)     mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
                                        (0478)                                        ; to use the Virtual Register page.
                                        (0479) 
                                        (0480)     ; Dereference the constant (flash) pointer pXIData to access the start
                                        (0481)     ; of the extended idata area, "xidata." Xidata follows the end of the
                                        (0482)     ; text segment and may have been relocated by the Code Compressor.
                                        (0483)     ;
00BD: 50 04    MOV   A,0x4              (0484)     mov   A, >__pXIData                ; Get the address of the flash
00BF: 57 02    MOV   X,0x2              (0485)     mov   X, <__pXIData                ;   pointer to the xidata area.
00C1: 08       PUSH  A                  (0486)     push  A
00C2: 28       ROMX                     (0487)     romx                               ; get the MSB of xidata's address
00C3: 53 7D    MOV   [__r0],A           (0488)     mov   [__r0], A
00C5: 18       POP   A                  (0489)     pop   A
00C6: 75       INC   X                  (0490)     inc   X
00C7: 09 00    ADC   A,0x0              (0491)     adc   A, 0
00C9: 28       ROMX                     (0492)     romx                               ; get the LSB of xidata's address
00CA: 4B       SWAP  A,X                (0493)     swap  A, X
00CB: 51 7D    MOV   A,[__r0]           (0494)     mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
                                        (0495)                                        ;   XIData structure list in flash
00CD: 80 04    JMP   0x00D2             (0496)     jmp   .AccessStruct
                                        (0497) 
                                        (0498)     ; Unpack one element in the xidata "structure list" that specifies the
                                        (0499)     ; values of C variables. Each structure contains 3 member elements.
                                        (0500)     ; The first is a pointer to a contiguous block of RAM to be initial-
                                        (0501)     ; ized. Blocks are always 255 bytes or less in length and never cross
                                        (0502)     ; RAM page boundaries. The list terminates when the MSB of the pointer
                                        (0503)     ; contains 0xFF. There are two formats for the struct depending on the
                                        (0504)     ; value in the second member element, an unsigned byte:
                                        (0505)     ; (1) If the value of the second element is non-zero, it represents
                                        (0506)     ; the 'size' of the block of RAM to be initialized. In this case, the
                                        (0507)     ; third member of the struct is an array of bytes of length 'size' and
                                        (0508)     ; the bytes are copied to the block of RAM.
                                        (0509)     ; (2) If the value of the second element is zero, the block of RAM is
                                        (0510)     ; to be cleared to zero. In this case, the third member of the struct
                                        (0511)     ; is an unsigned byte containing the number of bytes to clear.
                                        (0512) 
                                        (0513) .AccessNextStructLoop:
00CF: 75       INC   X                  (0514)     inc   X                            ; pXIData++
00D0: 09 00    ADC   A,0x0              (0515)     adc   A, 0
00D2: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0516) .AccessStruct:                         ; Entry point for first block
                                        (0517)     ;
                                        (0518)     ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
                                        (0519)     ;
                                        (0520)     M8C_ClearWDT                       ; Clear the watchdog for long inits
00D5: 08       PUSH  A                  (0521)     push  A
00D6: 28       ROMX                     (0522)     romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
00D7: 60 D5    MOV   REG[0xD5],A        (0523)     mov   reg[MVW_PP], A               ;   for use with MVI write operations
00D9: 74       INC   A                  (0524)     inc   A                            ; End of Struct List? (MSB==0xFF?)
00DA: A0 4B    JZ    0x0126             (0525)     jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
00DC: 18       POP   A                  (0526)     pop   A                            ; restore pXIData to [A,X]
00DD: 75       INC   X                  (0527)     inc   X                            ; pXIData++
00DE: 09 00    ADC   A,0x0              (0528)     adc   A, 0
00E0: 08       PUSH  A                  (0529)     push  A
00E1: 28       ROMX                     (0530)     romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
00E2: 53 7D    MOV   [__r0],A           (0531)     mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
00E4: 18       POP   A                  (0532)     pop   A                            ; restore pXIData to [A,X]
00E5: 75       INC   X                  (0533)     inc   X                            ; pXIData++ (point to size)
00E6: 09 00    ADC   A,0x0              (0534)     adc   A, 0
00E8: 08       PUSH  A                  (0535)     push  A
00E9: 28       ROMX                     (0536)     romx                               ; Get the size (CPU.A <- *pXIData)
00EA: A0 1C    JZ    0x0107             (0537)     jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
00EC: 53 7C    MOV   [__r1],A           (0538)     mov   [__r1], A                    ;             else downcount in __r1
00EE: 18       POP   A                  (0539)     pop   A                            ; restore pXIData to [A,X]
                                        (0540) 
                                        (0541) .CopyNextByteLoop:
                                        (0542)     ; For each byte in the structure's array member, copy from flash to RAM.
                                        (0543)     ; Assert: pXIData in [A,X] points to previous byte of flash source;
                                        (0544)     ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
                                        (0545)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0546)     ;
00EF: 75       INC   X                  (0547)     inc   X                            ; pXIData++ (point to next data byte)
00F0: 09 00    ADC   A,0x0              (0548)     adc   A, 0
00F2: 08       PUSH  A                  (0549)     push  A
00F3: 28       ROMX                     (0550)     romx                               ; Get the data value (CPU.A <- *pXIData)
00F4: 3F 7D    MVI   [__r0],A           (0551)     mvi   [__r0], A                    ; Transfer the data to RAM
00F6: 47 7D FF TST   [__r0],0xFF        (0552)     tst   [__r0], 0xff                 ; Check for page crossing
00F9: B0 06    JNZ   0x0100             (0553)     jnz   .CopyLoopTail                ;   No crossing, keep going
00FB: 5D D5    MOV   A,REG[0xD5]        (0554)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
00FD: 74       INC   A                  (0555)     inc   A
00FE: 60 D5    MOV   REG[0xD5],A        (0556)     mov   reg[ MVW_PP], A
                                        (0557) .CopyLoopTail:
0100: 18       POP   A                  (0558)     pop   A                            ; restore pXIData to [A,X]
0101: 7A 7C    DEC   [__r1]             (0559)     dec   [__r1]                       ; End of this array in flash?
0103: BF EB    JNZ   0x00EF             (0560)     jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
0105: 8F C9    JMP   0x00CF             (0561)     jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
                                        (0562) 
                                        (0563) .ClearRAMBlockToZero:
0107: 18       POP   A                  (0564)     pop   A                            ; restore pXIData to [A,X]
0108: 75       INC   X                  (0565)     inc   X                            ; pXIData++ (point to next data byte)
0109: 09 00    ADC   A,0x0              (0566)     adc   A, 0
010B: 08       PUSH  A                  (0567)     push  A
010C: 28       ROMX                     (0568)     romx                               ; Get the run length (CPU.A <- *pXIData)
010D: 53 7C    MOV   [__r1],A           (0569)     mov   [__r1], A                    ; Initialize downcounter
010F: 50 00    MOV   A,0x0              (0570)     mov   A, 0                         ; Initialize source data
                                        (0571) 
                                        (0572) .ClearRAMBlockLoop:
                                        (0573)     ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
                                        (0574)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0575)     ;
0111: 3F 7D    MVI   [__r0],A           (0576)     mvi   [__r0], A                    ; Clear a byte
0113: 47 7D FF TST   [__r0],0xFF        (0577)     tst   [__r0], 0xff                 ; Check for page crossing
0116: B0 08    JNZ   0x011F             (0578)     jnz   .ClearLoopTail               ;   No crossing, keep going
0118: 5D D5    MOV   A,REG[0xD5]        (0579)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
011A: 74       INC   A                  (0580)     inc   A
011B: 60 D5    MOV   REG[0xD5],A        (0581)     mov   reg[ MVW_PP], A
011D: 50 00    MOV   A,0x0              (0582)     mov   A, 0                         ; Restore the zero used for clearing
                                        (0583) .ClearLoopTail:
011F: 7A 7C    DEC   [__r1]             (0584)     dec   [__r1]                       ; Was this the last byte?
0121: BF EF    JNZ   0x0111             (0585)     jnz   .ClearRAMBlockLoop           ;   No,  continue
0123: 18       POP   A                  (0586)     pop   A                            ;   Yes, restore pXIData to [A,X] and
0124: 8F AA    JMP   0x00CF             (0587)     jmp   .AccessNextStructLoop        ;        initialize another RAM block
                                        (0588) 
                                        (0589) .C_RTE_WrapUp:
0126: 18       POP   A                  (0590)     pop   A                            ; balance stack
0127: 71 10    OR    F,0x10             
                                        (0591) 
                                        (0592) ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                                        (0593) 
                                        (0594) C_RTE_Done:
                                        (0595) 
                                        (0596) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0597) 
                                        (0598)     ;-------------------------------
                                        (0599)     ; Voltage Stabilization for SMP
                                        (0600)     ;-------------------------------
                                        (0601) 
                                        (0602) IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
                                        (0603) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0604)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0605)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0606)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0607)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0608)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0609)     M8C_SetBank1
                                        (0610)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0611)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0612)     M8C_SetBank0
                                        (0613)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0614)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0615) .WaitFor2ms:
                                        (0616)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0617)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0618) ENDIF ; SMP is operational
                                        (0619) ENDIF ; 5.0V Operation
                                        (0620) 
                                        (0621)     ;-------------------------------
                                        (0622)     ; Set Power-On Reset (POR) Level
                                        (0623)     ;-------------------------------
                                        (0624)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0625)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0626)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0627)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0628)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0629) 
                                        (0630)     M8C_SetBank1
                                        (0631) 
                                        (0632) IF (POWER_SETTING & POWER_SET_5V0)          ; 5.0V Operation?
                                        (0633)  IF (POWER_SETTING & POWER_SET_SLOW_IMO)    ; and Slow Mode?
                                        (0634)  ELSE                                       ;    No, fast mode
                                        (0635)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz ) ;    As fast as 24MHz?
                                        (0636)                                             ;       no, set midpoint POR in user code, if desired
                                        (0637)   ELSE ; 24HMz                              ;
0129: 43 E3 20 OR    REG[0xE3],0x20     (0638)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
012C: 70 EF    AND   F,0xEF             
                                        (0639)   ENDIF ; 24MHz
                                        (0640)  ENDIF ; Slow Mode
                                        (0641) ENDIF ; 5.0V Operation
                                        (0642) 
                                        (0643)     M8C_SetBank0
                                        (0644) 
                                        (0645)     ;----------------------------
                                        (0646)     ; Wrap up and invoke "main"
                                        (0647)     ;----------------------------
                                        (0648) 
                                        (0649)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0650)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0651)     ;
012E: 62 E0 00 MOV   REG[0xE0],0x0      (0652)     mov  reg[INT_MSK0],0
0131: 71 10    OR    F,0x10             
                                        (0653) 
                                        (0654)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0655)     ; And put decimator in full mode so it does not consume too much current.
                                        (0656)     ;
                                        (0657)     M8C_SetBank1
0133: 62 E0 03 MOV   REG[0xE0],0x3      (0658)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
0136: 43 E7 80 OR    REG[0xE7],0x80     (0659)     or   reg[DEC_CR2],80h                    ; Put decimator in full mode
0139: 70 EF    AND   F,0xEF             
                                        (0660)     M8C_SetBank0
                                        (0661) 
                                        (0662)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0663)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0664)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0665)     ;
013B: 62 E2 00 MOV   REG[0xE2],0x0      (0666)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0667)                                    ; have been set during the boot process.
                                        (0668) IF	(TOOLCHAIN & HITECH)
                                        (0669) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0670) ELSE
                                        (0671) IF ENABLE_LJMP_TO_MAIN
                                        (0672)     ljmp  _main                    ; goto main (no return)
                                        (0673) ELSE
013E: 7C 14 D3 LCALL _main              (0674)     lcall _main                    ; call main
                                        (0675) .Exit:
0141: 8F FF    JMP   0x0141             (0676)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0677) ENDIF
                                        (0678) ENDIF ; TOOLCHAIN
                                        (0679) 
                                        (0680)     ;---------------------------------
                                        (0681)     ; Library Access to Global Parms
                                        (0682)     ;---------------------------------
                                        (0683)     ;
                                        (0684)  bGetPowerSetting:
                                        (0685) _bGetPowerSetting:
                                        (0686)     ; Returns value of POWER_SETTING in the A register.
                                        (0687)     ; No inputs. No Side Effects.
                                        (0688)     ;
0143: 50 10    MOV   A,0x10             (0689)     mov   A, POWER_SETTING
0145: 7F       RET                      (0690)     ret
                                        (0691) 
                                        (0692) IF	(TOOLCHAIN & HITECH)
                                        (0693) ELSE
                                        (0694)     ;---------------------------------
                                        (0695)     ; Order Critical RAM & ROM AREAs
                                        (0696)     ;---------------------------------
                                        (0697)     ;  'TOP' is all that has been defined so far...
                                        (0698) 
                                        (0699)     ;  ROM AREAs for C CONST, static & global items
                                        (0700)     ;
                                        (0701)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0702)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0703) __idata_start:
                                        (0704) 
                                        (0705)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0706) __func_lit_start:
                                        (0707) 
                                        (0708) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0709)     ; We use the func_lit area to store a pointer to extended initialized
                                        (0710)     ; data (xidata) area that follows the text area. Func_lit isn't
                                        (0711)     ; relocated by the code compressor, but the text area may shrink and
                                        (0712)     ; that moves xidata around.
                                        (0713)     ;
                                        (0714) __pXIData:         word __text_end           ; ptr to extended idata
                                        (0715) ENDIF
                                        (0716) 
                                        (0717)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0718)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0719) 
                                        (0720)     ; CODE segment for general use
                                        (0721)     ;
                                        (0722)     AREA text (ROM, REL, CON)
                                        (0723) __text_start:
                                        (0724) 
                                        (0725)     ; RAM area usage
                                        (0726)     ;
                                        (0727)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0728) __data_start:
                                        (0729) 
                                        (0730)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0731)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0732)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0733) __bss_start:
                                        (0734) 
                                        (0735) ENDIF ; TOOLCHAIN
                                        (0736) 
                                        (0737) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.4.2946
0404: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) ; =============================================================================
                                        (0004) ; FILENAME: PSoCConfigTBL.asm
                                        (0005) ;  
                                        (0006) ; Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0007) ;  
                                        (0008) ; NOTES:
                                        (0009) ; Do not modify this file. It is generated by PSoC Designer each time the
                                        (0010) ; generate application function is run. The values of the parameters in this
                                        (0011) ; file can be modified by changing the values of the global parameters in the
                                        (0012) ; device editor.
                                        (0013) ;  
                                        (0014) ; =============================================================================
                                        (0015)  
                                        (0016) include "m8c.inc"
                                        (0017) ;  Personalization tables 
                                        (0018) export LoadConfigTBL_bot_Bank1
                                        (0019) export LoadConfigTBL_bot_Bank0
                                        (0020) export LoadConfigTBL_bot_Ordered
                                        (0021) AREA lit(rom, rel)
                                        (0022) LoadConfigTBL_bot_Bank0:
                                        (0023) ;  Instance name PWM16_1, User Module PWM16
                                        (0024) ;       Instance name PWM16_1, Block Name PWM16_LSB(DBB00)
                                        (0025) 	db		23h, 00h		;PWM16_1_CONTROL_LSB_REG(DBB00CR0)
                                        (0026) 	db		21h, 21h		;PWM16_1_PERIOD_LSB_REG(DBB00DR1)
                                        (0027) 	db		22h, c5h		;PWM16_1_COMPARE_LSB_REG(DBB00DR2)
                                        (0028) ;       Instance name PWM16_1, Block Name PWM16_MSB(DBB01)
                                        (0029) 	db		27h, 00h		;PWM16_1_CONTROL_MSB_REG(DBB01CR0)
                                        (0030) 	db		25h, 4eh		;PWM16_1_PERIOD_MSB_REG(DBB01DR1)
                                        (0031) 	db		26h, 09h		;PWM16_1_COMPARE_MSB_REG(DBB01DR2)
                                        (0032) ;  Instance name PWM16_2, User Module PWM16
                                        (0033) ;       Instance name PWM16_2, Block Name PWM16_LSB(DBB10)
                                        (0034) 	db		33h, 00h		;PWM16_2_CONTROL_LSB_REG(DBB10CR0)
                                        (0035) 	db		31h, 21h		;PWM16_2_PERIOD_LSB_REG(DBB10DR1)
                                        (0036) 	db		32h, c5h		;PWM16_2_COMPARE_LSB_REG(DBB10DR2)
                                        (0037) ;       Instance name PWM16_2, Block Name PWM16_MSB(DBB11)
                                        (0038) 	db		37h, 00h		;PWM16_2_CONTROL_MSB_REG(DBB11CR0)
                                        (0039) 	db		35h, 4eh		;PWM16_2_PERIOD_MSB_REG(DBB11DR1)
                                        (0040) 	db		36h, 09h		;PWM16_2_COMPARE_MSB_REG(DBB11DR2)
                                        (0041) ;  Instance name PWM16_3, User Module PWM16
                                        (0042) ;       Instance name PWM16_3, Block Name PWM16_LSB(DBB20)
                                        (0043) 	db		43h, 00h		;PWM16_3_CONTROL_LSB_REG(DBB20CR0)
                                        (0044) 	db		41h, 21h		;PWM16_3_PERIOD_LSB_REG(DBB20DR1)
                                        (0045) 	db		42h, c5h		;PWM16_3_COMPARE_LSB_REG(DBB20DR2)
                                        (0046) ;       Instance name PWM16_3, Block Name PWM16_MSB(DBB21)
                                        (0047) 	db		47h, 00h		;PWM16_3_CONTROL_MSB_REG(DBB21CR0)
                                        (0048) 	db		45h, 4eh		;PWM16_3_PERIOD_MSB_REG(DBB21DR1)
                                        (0049) 	db		46h, 09h		;PWM16_3_COMPARE_MSB_REG(DBB21DR2)
                                        (0050) ;  Instance name PWM16_4, User Module PWM16
                                        (0051) ;       Instance name PWM16_4, Block Name PWM16_LSB(DCB22)
                                        (0052) 	db		4bh, 00h		;PWM16_4_CONTROL_LSB_REG(DCB22CR0)
                                        (0053) 	db		49h, 21h		;PWM16_4_PERIOD_LSB_REG(DCB22DR1)
                                        (0054) 	db		4ah, c5h		;PWM16_4_COMPARE_LSB_REG(DCB22DR2)
                                        (0055) ;       Instance name PWM16_4, Block Name PWM16_MSB(DCB23)
                                        (0056) 	db		4fh, 00h		;PWM16_4_CONTROL_MSB_REG(DCB23CR0)
                                        (0057) 	db		4dh, 4eh		;PWM16_4_PERIOD_MSB_REG(DCB23DR1)
                                        (0058) 	db		4eh, 09h		;PWM16_4_COMPARE_MSB_REG(DCB23DR2)
                                        (0059) ;  Instance name UART_1, User Module UART
                                        (0060) ;       Instance name UART_1, Block Name RX(DCB03)
                                        (0061) 	db		2fh, 00h		;UART_1_RX_CONTROL_REG(DCB03CR0)
                                        (0062) 	db		2dh, 00h		;UART_1_(DCB03DR1)
                                        (0063) 	db		2eh, 00h		;UART_1_RX_BUFFER_REG (DCB03DR2)
                                        (0064) ;       Instance name UART_1, Block Name TX(DCB02)
                                        (0065) 	db		2bh, 00h		;UART_1_TX_CONTROL_REG(DCB02CR0)
                                        (0066) 	db		29h, 00h		;UART_1_TX_BUFFER_REG (DCB02DR1)
                                        (0067) 	db		2ah, 00h		;UART_1_(DCB02DR2)
                                        (0068) ;  Instance name UART_2, User Module UART
                                        (0069) ;       Instance name UART_2, Block Name RX(DCB13)
                                        (0070) 	db		3fh, 00h		;UART_2_RX_CONTROL_REG(DCB13CR0)
                                        (0071) 	db		3dh, 00h		;UART_2_(DCB13DR1)
                                        (0072) 	db		3eh, 00h		;UART_2_RX_BUFFER_REG (DCB13DR2)
                                        (0073) ;       Instance name UART_2, Block Name TX(DCB12)
                                        (0074) 	db		3bh, 00h		;UART_2_TX_CONTROL_REG(DCB12CR0)
                                        (0075) 	db		39h, 00h		;UART_2_TX_BUFFER_REG (DCB12DR1)
                                        (0076) 	db		3ah, 00h		;UART_2_(DCB12DR2)
                                        (0077) ;  Global Register values Bank 0
                                        (0078) 	db		60h, 28h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0079) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0080) 	db		63h, 05h		; AnalogReferenceControl register (ARF_CR)
                                        (0081) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0082) 	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
                                        (0083) 	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
                                        (0084) 	db		d6h, 00h		; I2CConfig register (I2C_CFG)
                                        (0085) 	db		b0h, 00h		; Row_0_InputMux register (RDI0RI)
                                        (0086) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0087) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0088) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0089) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0090) 	db		b5h, 20h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0091) 	db		b6h, 10h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0092) 	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
                                        (0093) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0094) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0095) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0096) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0097) 	db		bdh, 10h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0098) 	db		beh, 01h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0099) 	db		c0h, 00h		; Row_2_InputMux register (RDI2RI)
                                        (0100) 	db		c1h, 00h		; Row_2_InputSync register (RDI2SYN)
                                        (0101) 	db		c2h, 20h		; Row_2_LogicInputAMux register (RDI2IS)
                                        (0102) 	db		c3h, 33h		; Row_2_LogicSelect_0 register (RDI2LT0)
                                        (0103) 	db		c4h, 33h		; Row_2_LogicSelect_1 register (RDI3LT1)
                                        (0104) 	db		c5h, 01h		; Row_2_OutputDrive_0 register (RDI2SRO0)
                                        (0105) 	db		c6h, 20h		; Row_2_OutputDrive_1 register (RDI2SRO1)
                                        (0106) 	db		c8h, 55h		; Row_3_InputMux register (RDI3RI)
                                        (0107) 	db		c9h, 00h		; Row_3_InputSync register (RDI3SYN)
                                        (0108) 	db		cah, 30h		; Row_3_LogicInputAMux register (RDI3IS)
                                        (0109) 	db		cbh, 33h		; Row_3_LogicSelect_0 register (RDI3LT0)
                                        (0110) 	db		cch, 33h		; Row_3_LogicSelect_1 register (RDI3LT1)
                                        (0111) 	db		cdh, 00h		; Row_3_OutputDrive_0 register (RDI3SRO0)
                                        (0112) 	db		ceh, 00h		; Row_3_OutputDrive_1 register (RDI3SRO1)
                                        (0113) 	db		6ch, 00h		; TMP_DR0 register (TMP_DR0)
                                        (0114) 	db		6dh, 00h		; TMP_DR1 register (TMP_DR1)
                                        (0115) 	db		6eh, 00h		; TMP_DR2 register (TMP_DR2)
                                        (0116) 	db		6fh, 00h		; TMP_DR3 register (TMP_DR3)
                                        (0117) 	db		ffh
                                        (0118) LoadConfigTBL_bot_Bank1:
                                        (0119) ;  Instance name PWM16_1, User Module PWM16
                                        (0120) ;       Instance name PWM16_1, Block Name PWM16_LSB(DBB00)
                                        (0121) 	db		20h, 01h		;PWM16_1_FUNC_LSB_REG(DBB00FN)
                                        (0122) 	db		21h, 15h		;PWM16_1_INPUT_LSB_REG(DBB00IN)
                                        (0123) 	db		22h, 40h		;PWM16_1_OUTPUT_LSB_REG(DBB00OU)
                                        (0124) ;       Instance name PWM16_1, Block Name PWM16_MSB(DBB01)
                                        (0125) 	db		24h, 21h		;PWM16_1_FUNC_MSB_REG(DBB01FN)
                                        (0126) 	db		25h, 35h		;PWM16_1_INPUT_MSB_REG(DBB01IN)
                                        (0127) 	db		26h, 47h		;PWM16_1_OUTPUT_MSB_REG(DBB01OU)
                                        (0128) ;  Instance name PWM16_2, User Module PWM16
                                        (0129) ;       Instance name PWM16_2, Block Name PWM16_LSB(DBB10)
                                        (0130) 	db		30h, 01h		;PWM16_2_FUNC_LSB_REG(DBB10FN)
                                        (0131) 	db		31h, 15h		;PWM16_2_INPUT_LSB_REG(DBB10IN)
                                        (0132) 	db		32h, 40h		;PWM16_2_OUTPUT_LSB_REG(DBB10OU)
                                        (0133) ;       Instance name PWM16_2, Block Name PWM16_MSB(DBB11)
                                        (0134) 	db		34h, 21h		;PWM16_2_FUNC_MSB_REG(DBB11FN)
                                        (0135) 	db		35h, 35h		;PWM16_2_INPUT_MSB_REG(DBB11IN)
                                        (0136) 	db		36h, 45h		;PWM16_2_OUTPUT_MSB_REG(DBB11OU)
                                        (0137) ;  Instance name PWM16_3, User Module PWM16
                                        (0138) ;       Instance name PWM16_3, Block Name PWM16_LSB(DBB20)
                                        (0139) 	db		40h, 01h		;PWM16_3_FUNC_LSB_REG(DBB20FN)
                                        (0140) 	db		41h, 15h		;PWM16_3_INPUT_LSB_REG(DBA20IN)
                                        (0141) 	db		42h, 40h		;PWM16_3_OUTPUT_LSB_REG(DBA20OU)
                                        (0142) ;       Instance name PWM16_3, Block Name PWM16_MSB(DBB21)
                                        (0143) 	db		44h, 21h		;PWM16_3_FUNC_MSB_REG(DBB21FN)
                                        (0144) 	db		45h, 35h		;PWM16_3_INPUT_MSB_REG(DBB21IN)
                                        (0145) 	db		46h, 47h		;PWM16_3_OUTPUT_MSB_REG(DBB21OU)
                                        (0146) ;  Instance name PWM16_4, User Module PWM16
                                        (0147) ;       Instance name PWM16_4, Block Name PWM16_LSB(DCB22)
                                        (0148) 	db		48h, 01h		;PWM16_4_FUNC_LSB_REG(DCB22FN)
                                        (0149) 	db		49h, 15h		;PWM16_4_INPUT_LSB_REG(DCB22IN)
                                        (0150) 	db		4ah, 40h		;PWM16_4_OUTPUT_LSB_REG(DCB22OU)
                                        (0151) ;       Instance name PWM16_4, Block Name PWM16_MSB(DCB23)
                                        (0152) 	db		4ch, 21h		;PWM16_4_FUNC_MSB_REG(DCB23FN)
                                        (0153) 	db		4dh, 35h		;PWM16_4_INPUT_MSB_REG(DCB23IN)
                                        (0154) 	db		4eh, 44h		;PWM16_4_OUTPUT_MSB_REG(DCB23OU)
                                        (0155) ;  Instance name UART_1, User Module UART
                                        (0156) ;       Instance name UART_1, Block Name RX(DCB03)
                                        (0157) 	db		2ch, 05h		;UART_1_RX_FUNC_REG   (DCB03FN)
                                        (0158) 	db		2dh, f6h		;UART_1_RX_INPUT_REG  (DCB03IN)
                                        (0159) 	db		2eh, 40h		;UART_1_RX_OUTPUT_REG (DCB03OU)
                                        (0160) ;       Instance name UART_1, Block Name TX(DCB02)
                                        (0161) 	db		28h, 1dh		;UART_1_TX_FUNC_REG   (DCB02FN)
                                        (0162) 	db		29h, 06h		;UART_1_TX_INPUT_REG  (DCB02IN)
                                        (0163) 	db		2ah, 45h		;UART_1_TX_OUTPUT_REG (DCB02OU)
                                        (0164) ;  Instance name UART_2, User Module UART
                                        (0165) ;       Instance name UART_2, Block Name RX(DCB13)
                                        (0166) 	db		3ch, 05h		;UART_2_RX_FUNC_REG   (DCB13FN)
                                        (0167) 	db		3dh, c6h		;UART_2_RX_INPUT_REG  (DCB13IN)
                                        (0168) 	db		3eh, 40h		;UART_2_RX_OUTPUT_REG (DCB13OU)
                                        (0169) ;       Instance name UART_2, Block Name TX(DCB12)
                                        (0170) 	db		38h, 1dh		;UART_2_TX_FUNC_REG   (DCB12FN)
                                        (0171) 	db		39h, 06h		;UART_2_TX_INPUT_REG  (DCB12IN)
                                        (0172) 	db		3ah, 46h		;UART_2_TX_OUTPUT_REG (DCB12OU)
                                        (0173) ;  Global Register values Bank 1
                                        (0174) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0175) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0176) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0177) 	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0178) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0179) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0180) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0181) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0182) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0183) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0184) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0185) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0186) 	db		e1h, bch		; OscillatorControl_1 register (OSC_CR1)
                                        (0187) 	db		e2h, 01h		; OscillatorControl_2 register (OSC_CR2)
                                        (0188) 	db		dfh, 27h		; OscillatorControl_3 register (OSC_CR3)
                                        (0189) 	db		deh, 01h		; OscillatorControl_4 register (OSC_CR4)
                                        (0190) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0191) 	db		e7h, 00h		; Type2Decimator_Control register (DEC_CR2)
                                        (0192) 	db		ffh
                                        (0193) AREA psoc_config(rom, rel)
                                        (0194) LoadConfigTBL_bot_Ordered:
                                        (0195) ;  Ordered Global Register values
                                        (0196) 	M8C_SetBank0
0406: 62 00 00 MOV   REG[0x0],0x0       (0197) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
0409: 71 10    OR    F,0x10             
                                        (0198) 	M8C_SetBank1
040B: 62 00 5F MOV   REG[0x0],0x5F      (0199) 	mov	reg[00h], 5fh		; Port_0_DriveMode_0 register (PRT0DM0)
040E: 62 01 A0 MOV   REG[0x1],0xA0      (0200) 	mov	reg[01h], a0h		; Port_0_DriveMode_1 register (PRT0DM1)
0411: 70 EF    AND   F,0xEF             
                                        (0201) 	M8C_SetBank0
0413: 62 03 A0 MOV   REG[0x3],0xA0      (0202) 	mov	reg[03h], a0h		; Port_0_DriveMode_2 register (PRT0DM2)
0416: 62 02 0A MOV   REG[0x2],0xA       (0203) 	mov	reg[02h], 0ah		; Port_0_GlobalSelect register (PRT0GS)
0419: 71 10    OR    F,0x10             
                                        (0204) 	M8C_SetBank1
041B: 62 02 00 MOV   REG[0x2],0x0       (0205) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
041E: 62 03 00 MOV   REG[0x3],0x0       (0206) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
0421: 70 EF    AND   F,0xEF             
                                        (0207) 	M8C_SetBank0
0423: 62 01 00 MOV   REG[0x1],0x0       (0208) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
0426: 62 04 00 MOV   REG[0x4],0x0       (0209) 	mov	reg[04h], 00h		; Port_1_Data register (PRT1DR)
0429: 71 10    OR    F,0x10             
                                        (0210) 	M8C_SetBank1
042B: 62 04 00 MOV   REG[0x4],0x0       (0211) 	mov	reg[04h], 00h		; Port_1_DriveMode_0 register (PRT1DM0)
042E: 62 05 FF MOV   REG[0x5],0xFF      (0212) 	mov	reg[05h], ffh		; Port_1_DriveMode_1 register (PRT1DM1)
0431: 70 EF    AND   F,0xEF             
                                        (0213) 	M8C_SetBank0
0433: 62 07 FF MOV   REG[0x7],0xFF      (0214) 	mov	reg[07h], ffh		; Port_1_DriveMode_2 register (PRT1DM2)
0436: 62 06 00 MOV   REG[0x6],0x0       (0215) 	mov	reg[06h], 00h		; Port_1_GlobalSelect register (PRT1GS)
0439: 71 10    OR    F,0x10             
                                        (0216) 	M8C_SetBank1
043B: 62 06 00 MOV   REG[0x6],0x0       (0217) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
043E: 62 07 00 MOV   REG[0x7],0x0       (0218) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
0441: 70 EF    AND   F,0xEF             
                                        (0219) 	M8C_SetBank0
0443: 62 05 00 MOV   REG[0x5],0x0       (0220) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
0446: 62 08 00 MOV   REG[0x8],0x0       (0221) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
0449: 71 10    OR    F,0x10             
                                        (0222) 	M8C_SetBank1
044B: 62 08 A5 MOV   REG[0x8],0xA5      (0223) 	mov	reg[08h], a5h		; Port_2_DriveMode_0 register (PRT2DM0)
044E: 62 09 5A MOV   REG[0x9],0x5A      (0224) 	mov	reg[09h], 5ah		; Port_2_DriveMode_1 register (PRT2DM1)
0451: 70 EF    AND   F,0xEF             
                                        (0225) 	M8C_SetBank0
0453: 62 0B 02 MOV   REG[0xB],0x2       (0226) 	mov	reg[0bh], 02h		; Port_2_DriveMode_2 register (PRT2DM2)
0456: 62 0A BD MOV   REG[0xA],0xBD      (0227) 	mov	reg[0ah], bdh		; Port_2_GlobalSelect register (PRT2GS)
0459: 71 10    OR    F,0x10             
                                        (0228) 	M8C_SetBank1
045B: 62 0A 00 MOV   REG[0xA],0x0       (0229) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
045E: 62 0B 00 MOV   REG[0xB],0x0       (0230) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
0461: 70 EF    AND   F,0xEF             
                                        (0231) 	M8C_SetBank0
0463: 62 09 00 MOV   REG[0x9],0x0       (0232) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
0466: 62 0C 00 MOV   REG[0xC],0x0       (0233) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
0469: 71 10    OR    F,0x10             
                                        (0234) 	M8C_SetBank1
046B: 62 0C 00 MOV   REG[0xC],0x0       (0235) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
046E: 62 0D 00 MOV   REG[0xD],0x0       (0236) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
0471: 70 EF    AND   F,0xEF             
                                        (0237) 	M8C_SetBank0
0473: 62 0F 00 MOV   REG[0xF],0x0       (0238) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
0476: 62 0E 00 MOV   REG[0xE],0x0       (0239) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
0479: 71 10    OR    F,0x10             
                                        (0240) 	M8C_SetBank1
047B: 62 0E 00 MOV   REG[0xE],0x0       (0241) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
047E: 62 0F 00 MOV   REG[0xF],0x0       (0242) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
0481: 70 EF    AND   F,0xEF             
                                        (0243) 	M8C_SetBank0
0483: 62 0D 00 MOV   REG[0xD],0x0       (0244) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
0486: 62 10 00 MOV   REG[0x10],0x0      (0245) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
0489: 71 10    OR    F,0x10             
                                        (0246) 	M8C_SetBank1
048B: 62 10 00 MOV   REG[0x10],0x0      (0247) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
048E: 62 11 00 MOV   REG[0x11],0x0      (0248) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
0491: 70 EF    AND   F,0xEF             
                                        (0249) 	M8C_SetBank0
0493: 62 13 00 MOV   REG[0x13],0x0      (0250) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
0496: 62 12 00 MOV   REG[0x12],0x0      (0251) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
0499: 71 10    OR    F,0x10             
                                        (0252) 	M8C_SetBank1
049B: 62 12 00 MOV   REG[0x12],0x0      (0253) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
049E: 62 13 00 MOV   REG[0x13],0x0      (0254) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
04A1: 70 EF    AND   F,0xEF             
                                        (0255) 	M8C_SetBank0
04A3: 62 11 00 MOV   REG[0x11],0x0      (0256) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
04A6: 62 14 00 MOV   REG[0x14],0x0      (0257) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
04A9: 71 10    OR    F,0x10             
                                        (0258) 	M8C_SetBank1
04AB: 62 14 00 MOV   REG[0x14],0x0      (0259) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
04AE: 62 15 00 MOV   REG[0x15],0x0      (0260) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
04B1: 70 EF    AND   F,0xEF             
                                        (0261) 	M8C_SetBank0
04B3: 62 17 00 MOV   REG[0x17],0x0      (0262) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
04B6: 62 16 00 MOV   REG[0x16],0x0      (0263) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
04B9: 71 10    OR    F,0x10             
                                        (0264) 	M8C_SetBank1
04BB: 62 16 00 MOV   REG[0x16],0x0      (0265) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
04BE: 62 17 00 MOV   REG[0x17],0x0      (0266) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
04C1: 70 EF    AND   F,0xEF             
                                        (0267) 	M8C_SetBank0
04C3: 62 15 00 MOV   REG[0x15],0x0      (0268) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
04C6: 62 18 00 MOV   REG[0x18],0x0      (0269) 	mov	reg[18h], 00h		; Port_6_Data register (PRT6DR)
04C9: 71 10    OR    F,0x10             
                                        (0270) 	M8C_SetBank1
04CB: 62 18 00 MOV   REG[0x18],0x0      (0271) 	mov	reg[18h], 00h		; Port_6_DriveMode_0 register (PRT6DM0)
04CE: 62 19 00 MOV   REG[0x19],0x0      (0272) 	mov	reg[19h], 00h		; Port_6_DriveMode_1 register (PRT6DM1)
04D1: 70 EF    AND   F,0xEF             
                                        (0273) 	M8C_SetBank0
04D3: 62 1B 00 MOV   REG[0x1B],0x0      (0274) 	mov	reg[1bh], 00h		; Port_6_DriveMode_2 register (PRT6DM2)
04D6: 62 1A 00 MOV   REG[0x1A],0x0      (0275) 	mov	reg[1ah], 00h		; Port_6_GlobalSelect register (PRT6GS)
04D9: 71 10    OR    F,0x10             
                                        (0276) 	M8C_SetBank1
04DB: 62 1A 00 MOV   REG[0x1A],0x0      (0277) 	mov	reg[1ah], 00h		; Port_6_IntCtrl_0 register (PRT6IC0)
04DE: 62 1B 00 MOV   REG[0x1B],0x0      (0278) 	mov	reg[1bh], 00h		; Port_6_IntCtrl_1 register (PRT6IC1)
04E1: 70 EF    AND   F,0xEF             
                                        (0279) 	M8C_SetBank0
04E3: 62 19 00 MOV   REG[0x19],0x0      (0280) 	mov	reg[19h], 00h		; Port_6_IntEn register (PRT6IE)
04E6: 62 1C 00 MOV   REG[0x1C],0x0      (0281) 	mov	reg[1ch], 00h		; Port_7_Data register (PRT7DR)
04E9: 71 10    OR    F,0x10             
                                        (0282) 	M8C_SetBank1
04EB: 62 1C 00 MOV   REG[0x1C],0x0      (0283) 	mov	reg[1ch], 00h		; Port_7_DriveMode_0 register (PRT7DM0)
04EE: 62 1D 00 MOV   REG[0x1D],0x0      (0284) 	mov	reg[1dh], 00h		; Port_7_DriveMode_1 register (PRT7DM1)
04F1: 70 EF    AND   F,0xEF             
                                        (0285) 	M8C_SetBank0
04F3: 62 1F 00 MOV   REG[0x1F],0x0      (0286) 	mov	reg[1fh], 00h		; Port_7_DriveMode_2 register (PRT7DM2)
04F6: 62 1E 00 MOV   REG[0x1E],0x0      (0287) 	mov	reg[1eh], 00h		; Port_7_GlobalSelect register (PRT7GS)
04F9: 71 10    OR    F,0x10             
                                        (0288) 	M8C_SetBank1
04FB: 62 1E 00 MOV   REG[0x1E],0x0      (0289) 	mov	reg[1eh], 00h		; Port_7_IntCtrl_0 register (PRT7IC0)
04FE: 62 1F 00 MOV   REG[0x1F],0x0      (0290) 	mov	reg[1fh], 00h		; Port_7_IntCtrl_1 register (PRT7IC1)
0501: 70 EF    AND   F,0xEF             
                                        (0291) 	M8C_SetBank0
0503: 62 1D 00 MOV   REG[0x1D],0x0      (0292) 	mov	reg[1dh], 00h		; Port_7_IntEn register (PRT7IE)
0506: 70 EF    AND   F,0xEF             
                                        (0293) 	M8C_SetBank0
0508: 7F       RET                      (0294) 	ret
                                        (0295) 
                                        (0296) 
                                        (0297) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.4.2946
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_bot
                                        (0026) export _LoadConfig_bot
                                        (0027) 
                                        (0028) export NO_SHADOW
                                        (0029) export _NO_SHADOW
                                        (0030) 
                                        (0031) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0032) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0033) 
                                        (0034) AREA psoc_config(rom, rel)
                                        (0035) 
                                        (0036) ;---------------------------------------------------------------------------
                                        (0037) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0038) ;                  parameters handled by boot code, like CPU speed). This
                                        (0039) ;                  function can be called from user code, but typically it
                                        (0040) ;                  is only called from boot.
                                        (0041) ;
                                        (0042) ;       INPUTS: None.
                                        (0043) ;      RETURNS: Nothing.
                                        (0044) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0045) ;               In the large memory model currently only the page
                                        (0046) ;               pointer registers listed below are modified.  This does
                                        (0047) ;               not guarantee that in future implementations of this
                                        (0048) ;               function other page pointer registers will not be
                                        (0049) ;               modified.
                                        (0050) ;          
                                        (0051) ;               Page Pointer Registers Modified: 
                                        (0052) ;               CUR_PP
                                        (0053) ;
                                        (0054) _LoadConfigInit:
                                        (0055)  LoadConfigInit:
                                        (0056)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0057)     
0509: 7C 05 10 LCALL 0x0510             (0058) 	lcall	LoadConfig_bot
050C: 7C 04 04 LCALL 0x0404             (0059) 	lcall	LoadConfigTBL_bot_Ordered
                                        (0060) 
                                        (0061) 
                                        (0062)     RAM_EPILOGUE RAM_USE_CLASS_4
050F: 7F       RET                      (0063)     ret
                                        (0064) 
                                        (0065) ;---------------------------------------------------------------------------
                                        (0066) ; Load Configuration bot
                                        (0067) ;
                                        (0068) ;    Load configuration registers for bot.
                                        (0069) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0070) ;
                                        (0071) ;       INPUTS: None.
                                        (0072) ;      RETURNS: Nothing.
                                        (0073) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0074) ;               modified as may the Page Pointer registers!
                                        (0075) ;               In the large memory model currently only the page
                                        (0076) ;               pointer registers listed below are modified.  This does
                                        (0077) ;               not guarantee that in future implementations of this
                                        (0078) ;               function other page pointer registers will not be
                                        (0079) ;               modified.
                                        (0080) ;          
                                        (0081) ;               Page Pointer Registers Modified: 
                                        (0082) ;               CUR_PP
                                        (0083) ;
                                        (0084) _LoadConfig_bot:
                                        (0085)  LoadConfig_bot:
                                        (0086)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0087) 
0510: 10       PUSH  X                  (0088) 	push	x
0511: 70 EF    AND   F,0xEF             
                                        (0089)     M8C_SetBank0                    ; Force bank 0
0513: 50 00    MOV   A,0x0              (0090)     mov     a, 0                    ; Specify bank 0
0515: 67       ASR   A                  (0091)     asr     a                       ; Store in carry flag
                                        (0092)                                     ; Load bank 0 table:
0516: 50 01    MOV   A,0x1              (0093)     mov     A, >LoadConfigTBL_bot_Bank0
0518: 57 FD    MOV   X,0xFD             (0094)     mov     X, <LoadConfigTBL_bot_Bank0
051A: 7C 05 2B LCALL 0x052B             (0095)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0096) 
051D: 50 01    MOV   A,0x1              (0097)     mov     a, 1                    ; Specify bank 1
051F: 67       ASR   A                  (0098)     asr     a                       ; Store in carry flag
                                        (0099)                                     ; Load bank 1 table:
0520: 50 02    MOV   A,0x2              (0100)     mov     A, >LoadConfigTBL_bot_Bank1
0522: 57 94    MOV   X,0x94             (0101)     mov     X, <LoadConfigTBL_bot_Bank1
0524: 7C 05 2B LCALL 0x052B             (0102)     lcall   LoadConfig              ; Load the bank 1 values
0527: 70 EF    AND   F,0xEF             
                                        (0103) 
                                        (0104)     M8C_SetBank0                    ; Force return to bank 0
0529: 20       POP   X                  (0105) 	pop		x
                                        (0106) 
                                        (0107)     RAM_EPILOGUE RAM_USE_CLASS_4
052A: 7F       RET                      (0108)     ret
                                        (0109) 
                                        (0110) 
                                        (0111) 
                                        (0112) 
                                        (0113) ;---------------------------------------------------------------------------
                                        (0114) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0115) ;              pairs. Terminate on address=0xFF.
                                        (0116) ;
                                        (0117) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0118) ;           Flag Register Carry bit encodes the Register Bank
                                        (0119) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0120) ;
                                        (0121) ;  RETURNS: nothing.
                                        (0122) ;
                                        (0123) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0124) ;                X-3 Temporary store for register address
                                        (0125) ;                X-2 LSB of config table address
                                        (0126) ;                X-1 MSB of config table address
                                        (0127) ;
                                        (0128) LoadConfig:
                                        (0129)     RAM_PROLOGUE RAM_USE_CLASS_2
052B: 38 02    ADD   SP,0x2             (0130)     add     SP, 2                   ; Set up local vars
052D: 10       PUSH  X                  (0131)     push    X                       ; Save config table address on stack
052E: 08       PUSH  A                  (0132)     push    A
052F: 4F       MOV   X,SP               (0133)     mov     X, SP
0530: 56 FC 00 MOV   [X-4],0x0          (0134)     mov     [X-4], 0                ; Set default Destination to Bank 0
0533: D0 04    JNC   0x0538             (0135)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
0535: 56 FC 01 MOV   [X-4],0x1          (0136)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0137) .BankSelectSaved:
0538: 18       POP   A                  (0138)     pop     A
0539: 20       POP   X                  (0139)     pop     X
053A: 70 EF    AND   F,0xEF             
053C: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0140) 
                                        (0141) LoadConfigLp:
                                        (0142)     M8C_SetBank0                    ; Switch to bank 0
                                        (0143)     M8C_ClearWDT                    ; Clear the watchdog for long inits
053F: 10       PUSH  X                  (0144)     push    X                       ; Preserve the config table address
0540: 08       PUSH  A                  (0145)     push    A
0541: 28       ROMX                     (0146)     romx                            ; Load register address from table
0542: 39 FF    CMP   A,0xFF             (0147)     cmp     A, END_CONFIG_TABLE     ; End of table?
0544: A0 1F    JZ    0x0564             (0148)     jz      EndLoadConfig           ;   Yes, go wrap it up
0546: 4F       MOV   X,SP               (0149)     mov     X, SP                   ;
0547: 48 FC 01 TST   [X-4],0x1          (0150)     tst     [X-4], 1                ; Loading IO Bank 1?
054A: A0 03    JZ    0x054E             (0151)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
054C: 71 10    OR    F,0x10             
                                        (0152)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0153) .IOBankNowSet:
054E: 54 FD    MOV   [X-3],A            (0154)     mov     [X-3], A                ; Stash the register address
0550: 18       POP   A                  (0155)     pop     A                       ; Retrieve the table address
0551: 20       POP   X                  (0156)     pop     X
0552: 75       INC   X                  (0157)     inc     X                       ; Advance to the data byte
0553: 09 00    ADC   A,0x0              (0158)     adc     A, 0
0555: 10       PUSH  X                  (0159)     push    X                       ; Save the config table address again
0556: 08       PUSH  A                  (0160)     push    A
0557: 28       ROMX                     (0161)     romx                            ; load config data from the table
0558: 4F       MOV   X,SP               (0162)     mov     X, SP                   ; retrieve the register address
0559: 59 FD    MOV   X,[X-3]            (0163)     mov     X, [X-3]
055B: 61 00    MOV   REG[X+0x0],A       (0164)     mov     reg[X], A               ; Configure the register
055D: 18       POP   A                  (0165)     pop     A                       ; retrieve the table address
055E: 20       POP   X                  (0166)     pop     X
055F: 75       INC   X                  (0167)     inc     X                       ; advance to next table entry
0560: 09 00    ADC   A,0x0              (0168)     adc     A, 0
0562: 8F D7    JMP   0x053A             (0169)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0170) EndLoadConfig:
0564: 38 FC    ADD   SP,0xFC            (0171)     add     SP, -4
0566: 70 3F    AND   F,0x3F             
0568: 71 C0    OR    F,0xC0             
                                        (0172)     RAM_EPILOGUE RAM_USE_CLASS_2
056A: 7F       RET                      (0173)     ret
                                        (0174) 
                                        (0175) AREA InterruptRAM(ram, rel)
                                        (0176) 
                                        (0177) NO_SHADOW:
                                        (0178) _NO_SHADOW:
FILE: lib\uart_2int.asm                 (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   UART_2INT.asm
                                        (0004) ;;  Version: 5.3, Updated on 2013/5/19 at 10:44:49
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  UART Interrupt Service Routine.
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) 
                                        (0014) include "UART_2.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "m8c.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _UART_2_TX_ISR
                                        (0022) export  _UART_2_RX_ISR
                                        (0023) 
                                        (0024) IF (UART_2_RXBUF_ENABLE)
                                        (0025) export  UART_2_aRxBuffer
                                        (0026) export _UART_2_aRxBuffer
                                        (0027) export  UART_2_bRxCnt
                                        (0028) export _UART_2_bRxCnt
                                        (0029) export  UART_2_fStatus
                                        (0030) export _UART_2_fStatus
                                        (0031) ENDIF
                                        (0032) 
                                        (0033) 
                                        (0034) ;-----------------------------------------------
                                        (0035) ; Variable Allocation
                                        (0036) ;-----------------------------------------------
                                        (0037) AREA InterruptRAM (RAM, REL, CON)
                                        (0038) 
                                        (0039) IF (UART_2_RXBUF_ENABLE)
                                        (0040)  UART_2_fStatus:
                                        (0041) _UART_2_fStatus:      BLK  1
                                        (0042)  UART_2_bRxCnt:
                                        (0043) _UART_2_bRxCnt:       BLK  1
                                        (0044) AREA UART_2_RAM (RAM, REL, CON)
                                        (0045)  UART_2_aRxBuffer:
                                        (0046) _UART_2_aRxBuffer:    BLK UART_2_RX_BUFFER_SIZE
                                        (0047) ENDIF
                                        (0048) 
                                        (0049) AREA InterruptRAM (RAM, REL, CON)
                                        (0050) 
                                        (0051) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0052) ;---------------------------------------------------
                                        (0053) ; Insert your custom declarations below this banner
                                        (0054) ;---------------------------------------------------
                                        (0055) 
                                        (0056) ;------------------------
                                        (0057) ;  Includes
                                        (0058) ;------------------------
                                        (0059) 
                                        (0060) 
                                        (0061) ;------------------------
                                        (0062) ;  Constant Definitions
                                        (0063) ;------------------------
                                        (0064) 
                                        (0065) 
                                        (0066) ;------------------------
                                        (0067) ; Variable Allocation
                                        (0068) ;------------------------
                                        (0069) 
                                        (0070) 
                                        (0071) ;---------------------------------------------------
                                        (0072) ; Insert your custom declarations above this banner
                                        (0073) ;---------------------------------------------------
                                        (0074) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0075) 
                                        (0076) 
                                        (0077) AREA UserModules (ROM, REL, CON)
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;  FUNCTION NAME: _UART_2_TX_ISR
                                        (0081) ;
                                        (0082) ;  DESCRIPTION:
                                        (0083) ;     UART TX interrupt handler for instance UART_2.
                                        (0084) ;
                                        (0085) ;     This is a place holder function.  If the user requires use of an interrupt
                                        (0086) ;     handler for this function, then place code where specified.
                                        (0087) ;-----------------------------------------------------------------------------
                                        (0088) 
                                        (0089) _UART_2_TX_ISR:
                                        (0090)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                        (0091)    ;---------------------------------------------------
                                        (0092)    ; Insert your custom assembly code below this banner
                                        (0093)    ;---------------------------------------------------
                                        (0094)    ;   NOTE: interrupt service routines must preserve
                                        (0095)    ;   the values of the A and X CPU registers.
                                        (0096)    
                                        (0097)    ;---------------------------------------------------
                                        (0098)    ; Insert your custom assembly code above this banner
                                        (0099)    ;---------------------------------------------------
                                        (0100)    
                                        (0101)    ;---------------------------------------------------
                                        (0102)    ; Insert a lcall to a C function below this banner
                                        (0103)    ; and un-comment the lines between these banners
                                        (0104)    ;---------------------------------------------------
                                        (0105)    
                                        (0106)    ;PRESERVE_CPU_CONTEXT
                                        (0107)    ;lcall _My_C_Function
                                        (0108)    ;RESTORE_CPU_CONTEXT
                                        (0109)    
                                        (0110)    ;---------------------------------------------------
                                        (0111)    ; Insert a lcall to a C function above this banner
                                        (0112)    ; and un-comment the lines between these banners
                                        (0113)    ;---------------------------------------------------
                                        (0114)    ;@PSoC_UserCode_END@ (Do not change this line.)
056B: 7E       RETI                     (0115)    reti
                                        (0116) 
                                        (0117) 
                                        (0118) ;-----------------------------------------------------------------------------
                                        (0119) ;  FUNCTION NAME: _UART_2_RX_ISR
                                        (0120) ;
                                        (0121) ;  DESCRIPTION:
                                        (0122) ;     UART RX interrupt handler for instance UART_2.
                                        (0123) ;     This ISR handles the background processing of received characters if
                                        (0124) ;     the buffer is enabled.
                                        (0125) ;
                                        (0126) ;
                                        (0127) ;  The following assumes that the RX buffer feature has been enabled.
                                        (0128) ;
                                        (0129) ;  SIDE EFFECTS:
                                        (0130) ;     There are 3 posible errors that may occur with the serial port.
                                        (0131) ;      1) Parity Error
                                        (0132) ;      2) Framing Error
                                        (0133) ;      3) OverRun Error
                                        (0134) ;
                                        (0135) ;  This user module check for parity and framing error.  If either of these
                                        (0136) ;  two errors are detected, the data is read and ignored.  When an overRun
                                        (0137) ;  error occurs, the last byte was lost, but the current byte is valid.  For
                                        (0138) ;  this reason this error is ignored at this time.  Code could be added to
                                        (0139) ;  this ISR to set a flag if an error condition occurs.
                                        (0140) ;
                                        (0141) ;  THEORY of OPERATION:
                                        (0142) ;     When using the RX buffer feature, the ISR collects received characters
                                        (0143) ;     in a buffer until the user defined command terminator is detected.  After
                                        (0144) ;     the command terminator is detected, the command bit is set and all other
                                        (0145) ;     characters will be ignored until the command bit is reset.  Up to
                                        (0146) ;     buffer_size - 1 characters will be collected waiting for a command
                                        (0147) ;     terminator.  After that, the characters will be discarded, although
                                        (0148) ;     a command determinator will still cause the command bit to be set.
                                        (0149) ;
                                        (0150) ;-----------------------------------------------------------------------------
                                        (0151) _UART_2_RX_ISR:
                                        (0152) 
                                        (0153)    ;@PSoC_UserCode_BODY_2@ (Do not change this line.)
                                        (0154)    ;---------------------------------------------------
                                        (0155)    ; Insert your custom assembly code below this banner
                                        (0156)    ;---------------------------------------------------
                                        (0157)    ;   NOTE: interrupt service routines must preserve
                                        (0158)    ;   the values of the A and X CPU registers.
                                        (0159)    
                                        (0160)    ;---------------------------------------------------
                                        (0161)    ; Insert your custom assembly code above this banner
                                        (0162)    ;---------------------------------------------------
                                        (0163)    
                                        (0164)    ;---------------------------------------------------
                                        (0165)    ; Insert a lcall to a C function below this banner
                                        (0166)    ; and un-comment the lines between these banners
                                        (0167)    ;---------------------------------------------------
                                        (0168)    
                                        (0169)    ;PRESERVE_CPU_CONTEXT
                                        (0170)    ;lcall _My_C_Function
                                        (0171)    ;RESTORE_CPU_CONTEXT
                                        (0172)    
                                        (0173)    ;---------------------------------------------------
                                        (0174)    ; Insert a lcall to a C function above this banner
                                        (0175)    ; and un-comment the lines between these banners
                                        (0176)    ;---------------------------------------------------
                                        (0177)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0178) 
                                        (0179) IF (UART_2_RXBUF_ENABLE)
056C: 08       PUSH  A                  (0180)    push A
056D: 10       PUSH  X                  (0181)    push X
056E: 5D D3    MOV   A,REG[0xD3]        
0570: 08       PUSH  A                  
                                        (0182)    
                                        (0183)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0184)       REG_PRESERVE IDX_PP
                                        (0185)    ENDIF
                                        (0186)    
0571: 58 01    MOV   X,[0x1]            (0187)    mov  X,[UART_2_bRxCnt]                                  ; Load X with byte counter
0573: 5D 3F    MOV   A,REG[0x3F]        (0188)    mov  A,REG[UART_2_RX_CONTROL_REG]                       ; Read the control register
0575: 08       PUSH  A                  (0189)    push A                                                  ; Store copy for later test
                                        (0190)                                                            ; IF real RX interrupt
0576: 21 08    AND   A,0x8              (0191)    and  A,UART_2_RX_REG_FULL                               ; Did really really get an IRQ
0578: B0 04    JNZ   0x057D             (0192)    jnz  .UARTRX_ReadRx                                     ; Data ready, go get it
057A: 18       POP   A                  (0193)    pop  A                                                  ; Restore stack
057B: 80 5E    JMP   0x05DA             (0194)    jmp  .RESTORE_IDX_PP
                                        (0195) 
                                        (0196) .UARTRX_ReadRx:
057D: 18       POP   A                  (0197)    pop  A                                                  ; Restore status flags
                                        (0198)                                                            ; IF there is no error, get data
                                        (0199)                                                            ; Check for parity or framing error
057E: 21 E0    AND   A,0xE0             (0200)    and  A,UART_2_RX_ERROR
0580: A0 12    JZ    0x0593             (0201)    jz   .UARTRX_NO_ERROR                                   ; If there is not an Error go read data
                                        (0202) 
0582: 2C 00    OR    [0x0],A            (0203)    or   [UART_2_fStatus],A                                 ; Set error flags (parity,framing,overrun) bits
0584: 49 3E 00 TST   REG[0x3E],0x0      (0204)    tst  REG[UART_2_RX_BUFFER_REG], 0x00                    ; Read the data buffer to clear it.
0587: 21 20    AND   A,0x20             (0205)    and  A,UART_2_RX_FRAMING_ERROR                          ; Check for framing error special case
0589: A0 50    JZ    0x05DA             (0206)    jz   .RESTORE_IDX_PP                                    ; Not framing error, all done
                                        (0207) 
                                        (0208)                                                            ; Disable and re-enable RX to reset after
                                        (0209)                                                            ; framing error.
058B: 41 3F FE AND   REG[0x3F],0xFE     (0210)    and   REG[UART_2_RX_CONTROL_REG], ~UART_2_RX_ENABLE     ; Disable RX
058E: 43 3F 01 OR    REG[0x3F],0x1      (0211)    or    REG[UART_2_RX_CONTROL_REG],  UART_2_RX_ENABLE     ; Enable RX
0591: 80 48    JMP   0x05DA             (0212)    jmp  .RESTORE_IDX_PP                                    ; Done with framing error, leave.
                                        (0213) 
                                        (0214) 
                                        (0215) .UARTRX_NO_ERROR:
0593: 5D 3E    MOV   A,REG[0x3E]        (0216)    mov  A,REG[UART_2_RX_BUFFER_REG ]                       ; Read the data buffer
                                        (0217) 
                                        (0218)                                                            ; IF buffer not full
0595: 47 00 01 TST   [0x0],0x1          (0219)    tst  [UART_2_fStatus],UART_2_RX_BUF_CMDTERM             ; Check for buffer full
0598: B0 41    JNZ   0x05DA             (0220)    jnz  .RESTORE_IDX_PP                                    ; All done
                                        (0221) 
059A: 39 3E    CMP   A,0x3E             (0222)    cmp  A,UART_2_CMD_TERM                                  ; Check for End of command
059C: B0 14    JNZ   0x05B1             (0223)    jnz  .UARTRX_CHK_BACKSPACE
059E: 2E 00 01 OR    [0x0],0x1          (0224)    or   [UART_2_fStatus],UART_2_RX_BUF_CMDTERM             ; Set command ready bit
05A1: 62 D3 00 MOV   REG[0xD3],0x0      
05A4: 70 3F    AND   F,0x3F             
05A6: 71 80    OR    F,0x80             
                                        (0225) 
                                        (0226) 
                                        (0227) 
                                        (0228)    RAM_SETPAGE_IDX >UART_2_aRxBuffer
                                        (0229)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
05A8: 56 63 00 MOV   [X+99],0x0         (0230)    mov  [X + UART_2_aRxBuffer],00h                         ; Zero out last data
05AB: 70 3F    AND   F,0x3F             
05AD: 71 00    OR    F,0x0              
                                        (0231)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
05AF: 80 2A    JMP   0x05DA             (0232)    jmp  .RESTORE_IDX_PP
                                        (0233) 
                                        (0234) .UARTRX_CHK_BACKSPACE:                                     ; 
                                        (0235) IF(UART_2_BACKSPACE_ENABLE)                                ; Enable if backspace/delete mode
                                        (0236)    cmp  A,UART_2_BACKSPACE_ENABLE                          ; Check for backspace character
                                        (0237)    jnz  .UARTRX_IGNORE                                     ; If not, skip the backspace stuff
                                        (0238)    cmp  [UART_2_bRxCnt],00h                                ; Check if buffer empty
                                        (0239)    jz   .RESTORE_IDX_PP                                    ; 
                                        (0240)    dec  [UART_2_bRxCnt]                                    ; Decrement buffer count by one.
                                        (0241)    jmp  .RESTORE_IDX_PP
                                        (0242) ENDIF                                                      ; 
                                        (0243) 
                                        (0244) .UARTRX_IGNORE:
                                        (0245) IF(UART_2_RX_IGNORE_BELOW)                                 ; Ignore charaters below this value
05B1: 39 20    CMP   A,0x20             (0246)    cmp  A,UART_2_RX_IGNORE_BELOW                           ; If ignore char is set to 0x00, do not
05B3: C0 26    JC    0x05DA             (0247)    jc   .RESTORE_IDX_PP                                    ; ignore any characters.
05B5: 62 D3 00 MOV   REG[0xD3],0x0      
                                        (0248) ENDIF
                                        (0249) 
                                        (0250) .UARTRX_CHK_OVFL:                                          ; Check for MAX String here
                                        (0251) 	
                                        (0252)    RAM_SETPAGE_IDX >UART_2_aRxBuffer                       ;   using idexed address mode
05B8: 3C 01 0F CMP   [0x1],0xF          (0253)    cmp  [UART_2_bRxCnt],(UART_2_RX_BUFFER_SIZE - 1)
05BB: C0 11    JC    0x05CD             (0254)    jc   .UARTRX_ISR_GETDATA
05BD: 70 3F    AND   F,0x3F             
05BF: 71 80    OR    F,0x80             
                                        (0255)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
05C1: 56 63 00 MOV   [X+99],0x0         (0256)    mov  [X + UART_2_aRxBuffer],00h                         ; Zero out last data in the buffer
05C4: 70 3F    AND   F,0x3F             
05C6: 71 00    OR    F,0x0              
                                        (0257)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
05C8: 2E 00 10 OR    [0x0],0x10         (0258)    or   [UART_2_fStatus],UART_2_RX_BUF_OVERRUN             ; Set error flags (parity,framing,overrun) bits
05CB: 80 0E    JMP   0x05DA             (0259)    jmp  .RESTORE_IDX_PP
05CD: 70 3F    AND   F,0x3F             
05CF: 71 80    OR    F,0x80             
                                        (0260) 
                                        (0261) .UARTRX_ISR_GETDATA:                                       ; IF input data == "CR", then end of command
                                        (0262)                                                            ; X is already loaded with pointer
                                        (0263)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
05D1: 54 63    MOV   [X+99],A           (0264)    mov  [X+UART_2_aRxBuffer],A                             ; store data in array
05D3: 70 3F    AND   F,0x3F             
05D5: 71 00    OR    F,0x0              
                                        (0265)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
05D7: 75       INC   X                  (0266)    inc  X                                                  ; Inc the pointer
05D8: 5A 01    MOV   [0x1],X            (0267)    mov  [UART_2_bRxCnt],X                                  ; Restore the pointer
05DA: 18       POP   A                  
05DB: 60 D3    MOV   REG[0xD3],A        
                                        (0268)                                                            ; ENDIF max string size
                                        (0269) .RESTORE_IDX_PP:
                                        (0270)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0271)       REG_RESTORE IDX_PP
                                        (0272)    ENDIF
                                        (0273) 
                                        (0274) .END_UARTRX_ISR:
05DD: 20       POP   X                  (0275)    pop  X
05DE: 18       POP   A                  (0276)    pop  A
                                        (0277) 
                                        (0278) ENDIF
                                        (0279) 
                                        (0280) UART_2_RX_ISR_END:
05DF: 7E       RETI                     (0281)    reti
                                        (0282) 
                                        (0283) ; end of file UART_2INT.asm
                                        (0284) 
FILE: lib\uart_2.asm                    (0001) ;;*****************************************************************************
05E0: 43 E1 40 OR    REG[0xE1],0x40     (0002) ;;*****************************************************************************
05E3: 43 E1 80 OR    REG[0xE1],0x80     
                                        (0003) ;;  Filename:   UART_2.asm
                                        (0004) ;;  Version: 5.3, Updated on 2013/5/19 at 10:44:49
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  UART User Module software implementation file for the
                                        (0008) ;;                22/24/25/26/27xxx families.
                                        (0009) ;;
                                        (0010) ;;
                                        (0011) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0012) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0013) ;;        This means it is the caller's responsibility to preserve any values
                                        (0014) ;;        in the X and A registers that are still needed after the API functions
                                        (0015) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0016) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0017) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0018) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0019) ;;-----------------------------------------------------------------------------
                                        (0020) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0021) ;;*****************************************************************************
                                        (0022) ;;*****************************************************************************
                                        (0023) 
                                        (0024) 
                                        (0025) include "m8c.inc"
                                        (0026) include "memory.inc"
                                        (0027) include "UART_2.inc"
                                        (0028) 
                                        (0029) ;-----------------------------------------------
                                        (0030) ;  Global Symbols
                                        (0031) ;-----------------------------------------------
                                        (0032) ;-------------------------------------------------------------------
                                        (0033) ;  Declare the functions global for both assembler and C compiler.
                                        (0034) ;
                                        (0035) ;  Note that there are two names for each API. First name is
                                        (0036) ;  assembler reference. Name with underscore is name refence for
                                        (0037) ;  C compiler.  Calling function in C source code does not require
                                        (0038) ;  the underscore.
                                        (0039) ;-------------------------------------------------------------------
                                        (0040) export  UART_2_SetTxIntMode
                                        (0041) export _UART_2_SetTxIntMode
                                        (0042) export  UART_2_EnableInt
                                        (0043) export _UART_2_EnableInt
                                        (0044) export  UART_2_DisableInt
                                        (0045) export _UART_2_DisableInt
                                        (0046) 
                                        (0047) export  UART_2_Start
                                        (0048) export _UART_2_Start
                                        (0049) export  UART_2_Stop
                                        (0050) export _UART_2_Stop
                                        (0051) export  UART_2_SendData
                                        (0052) export _UART_2_SendData
                                        (0053) export  UART_2_bReadTxStatus
                                        (0054) export _UART_2_bReadTxStatus
                                        (0055) export  UART_2_bReadRxData
                                        (0056) export _UART_2_bReadRxData
                                        (0057) export  UART_2_bReadRxStatus
                                        (0058) export _UART_2_bReadRxStatus
                                        (0059) 
                                        (0060) export  UART_2_IntCntl
                                        (0061) export _UART_2_IntCntl
                                        (0062) 
                                        (0063) export  UART_2_TxIntMode
                                        (0064) export _UART_2_TxIntMode
                                        (0065) 
                                        (0066) export  UART_2_PutSHexByte
                                        (0067) export _UART_2_PutSHexByte
                                        (0068) export  UART_2_PutSHexInt
                                        (0069) export _UART_2_PutSHexInt
                                        (0070) 
                                        (0071) export  UART_2_CPutString
                                        (0072) export _UART_2_CPutString
                                        (0073) export  UART_2_PutString
                                        (0074) export _UART_2_PutString
                                        (0075) export  UART_2_PutChar
                                        (0076) export _UART_2_PutChar
                                        (0077) export  UART_2_Write
                                        (0078) export _UART_2_Write
                                        (0079) export  UART_2_CWrite
                                        (0080) export _UART_2_CWrite
                                        (0081) 
                                        (0082) export  UART_2_cGetChar
                                        (0083) export _UART_2_cGetChar
                                        (0084) export  UART_2_cReadChar
                                        (0085) export _UART_2_cReadChar
                                        (0086) export  UART_2_iReadChar
                                        (0087) export _UART_2_iReadChar
                                        (0088) export  UART_2_PutCRLF
                                        (0089) export _UART_2_PutCRLF
                                        (0090) 
                                        (0091) IF (UART_2_RXBUF_ENABLE)
                                        (0092) export  UART_2_CmdReset
                                        (0093) export _UART_2_CmdReset
                                        (0094) export  UART_2_bCmdCheck
                                        (0095) export _UART_2_bCmdCheck
                                        (0096) export  UART_2_bCmdLength
                                        (0097) export _UART_2_bCmdLength
                                        (0098) export  UART_2_bErrCheck
                                        (0099) export _UART_2_bErrCheck
                                        (0100) 
                                        (0101) export  UART_2_szGetParam
                                        (0102) export _UART_2_szGetParam
                                        (0103) export  UART_2_szGetRestOfParams
                                        (0104) export _UART_2_szGetRestOfParams
                                        (0105) ENDIF
                                        (0106) 
                                        (0107) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0108) ; WARNING WARNING WARNING
                                        (0109) ; The following exports are for backwards compatibility only and should
                                        (0110) ; not be used for new designs. They may be eliminated in a future release.
                                        (0111) ; Their status is "NO FURTHER MAINTENANCE". 
                                        (0112) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0113) export  bUART_2_ReadTxStatus
                                        (0114) export _bUART_2_ReadTxStatus
                                        (0115) export  bUART_2_ReadRxData
                                        (0116) export _bUART_2_ReadRxData
                                        (0117) export  bUART_2_ReadRxStatus
                                        (0118) export _bUART_2_ReadRxStatus
                                        (0119) 	
                                        (0120) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0121) ;             END WARNING
                                        (0122) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0123) 
                                        (0124) ;-----------------------------------------------
                                        (0125) ; Variable Allocation
                                        (0126) ;-----------------------------------------------
                                        (0127) IF (UART_2_RXBUF_ENABLE)
                                        (0128)     
                                        (0129) area UART_2_RAM (RAM, REL, CON)
                                        (0130)     
                                        (0131)  ptrParam:   BLK  1
                                        (0132) 
                                        (0133) ENDIF
                                        (0134) 
                                        (0135) area text (ROM,REL)
                                        (0136) 
                                        (0137) ;-----------------------------------------------
                                        (0138) ;  EQUATES
                                        (0139) ;-----------------------------------------------
                                        (0140) bfCONTROL_REG_START_BIT:        equ    1    ; Control register start bit
                                        (0141) bfFUNCTION_REG_TX_INT_MODE_BIT: equ 0x10    ; the TX Int Mode bit
                                        (0142) 
                                        (0143) area UserModules (ROM, REL, CON)
                                        (0144) 
                                        (0145) ;=============================================================================
                                        (0146) ;=============================================================================
                                        (0147) ;
                                        (0148) ;     Low-Level Commands
                                        (0149) ;
                                        (0150) ;=============================================================================
                                        (0151) ;=============================================================================
                                        (0152) 
                                        (0153) .SECTION
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;  FUNCTION NAME: UART_2_EnableInt
                                        (0156) ;
                                        (0157) ;  DESCRIPTION:
                                        (0158) ;     Enables this UART's interrupt by setting the interrupt enable mask
                                        (0159) ;     bit associated with this User Module. Remember to call the global
                                        (0160) ;     interrupt enable function by using the macro: M8C_EnableGInt.
                                        (0161) ;-----------------------------------------------------------------------------
                                        (0162) ;
                                        (0163) ;  ARGUMENTS:
                                        (0164) ;     none.
                                        (0165) ;
                                        (0166) ;  RETURNS:
                                        (0167) ;     none.
                                        (0168) ;
                                        (0169) ;  SIDE EFFECTS:
                                        (0170) ;    The A and X registers may be modified by this or future implementations
                                        (0171) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0172) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0173) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0174) ;    functions.
                                        (0175) ;
                                        (0176)  UART_2_EnableInt:
                                        (0177) _UART_2_EnableInt:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0179)    M8C_EnableIntMask UART_2_TX_INT_REG, UART_2_TX_INT_MASK
                                        (0180)    M8C_EnableIntMask UART_2_RX_INT_REG, UART_2_RX_INT_MASK
                                        (0181)    RAM_EPILOGUE RAM_USE_CLASS_1
05E6: 7F       RET                      (0182)    ret
05E7: 41 E1 BF AND   REG[0xE1],0xBF     
05EA: 41 E1 7F AND   REG[0xE1],0x7F     
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185)     
                                        (0186) .SECTION
                                        (0187) ;-----------------------------------------------------------------------------
                                        (0188) ;  FUNCTION NAME: UART_2_DisableInt
                                        (0189) ;
                                        (0190) ;  DESCRIPTION:
                                        (0191) ;     Disables this UART's interrupt by clearing the interrupt enable mask bit
                                        (0192) ;     associated with this User Module.
                                        (0193) ;-----------------------------------------------------------------------------
                                        (0194) ;
                                        (0195) ;  ARGUMENTS:
                                        (0196) ;     none.
                                        (0197) ;
                                        (0198) ;  RETURNS:
                                        (0199) ;     none.
                                        (0200) ;
                                        (0201) ;  SIDE EFFECTS:
                                        (0202) ;    The A and X registers may be modified by this or future implementations
                                        (0203) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0204) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0205) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0206) ;    functions.
                                        (0207) ;
                                        (0208)  UART_2_DisableInt:
                                        (0209) _UART_2_DisableInt:
                                        (0210)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0211)    M8C_DisableIntMask UART_2_TX_INT_REG, UART_2_TX_INT_MASK
                                        (0212)    M8C_DisableIntMask UART_2_RX_INT_REG, UART_2_RX_INT_MASK
                                        (0213)    RAM_EPILOGUE RAM_USE_CLASS_1
05ED: 7F       RET                      (0214)    ret
05EE: 71 10    OR    F,0x10             
                                        (0215) .ENDSECTION
                                        (0216) 
                                        (0217) 
                                        (0218) .SECTION
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;  FUNCTION NAME: UART_2_SetTxIntMode(BYTE bTxIntMode)
                                        (0221) ;
                                        (0222) ;  DESCRIPTION:
                                        (0223) ;     Sets the Tx Interrupt Mode bit in the Function Register.
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;
                                        (0226) ;  ARGUMENTS:
                                        (0227) ;     BYTE bTxIntMode - The TX Interrupt mode setting. Use defined masks.
                                        (0228) ;        Passed in the A register
                                        (0229) ;
                                        (0230) ;  RETURNS:
                                        (0231) ;     none.
                                        (0232) ;
                                        (0233) ;  SIDE EFFECTS:
                                        (0234) ;    The A and X registers may be modified by this or future implementations
                                        (0235) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0236) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0237) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0238) ;    functions.
                                        (0239) ;
                                        (0240) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0241) ;     Sets the TX interrupt mode bit to define whether the interrupt occurs
                                        (0242) ;     on TX register empty or TX transmit complete
                                        (0243) ;
                                        (0244)  UART_2_SetTxIntMode:
                                        (0245) _UART_2_SetTxIntMode:
                                        (0246)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0247)    M8C_SetBank1
05F0: 21 01    AND   A,0x1              (0248)    and   A, UART_2_INT_MODE_TX_COMPLETE
05F2: A0 07    JZ    0x05FA             (0249)    jz    .SetModeRegEmpty
05F4: 43 38 10 OR    REG[0x38],0x10     (0250)    or    REG[UART_2_TX_FUNC_REG], bfFUNCTION_REG_TX_INT_MODE_BIT
05F7: 70 EF    AND   F,0xEF             
                                        (0251)    M8C_SetBank0
                                        (0252)    RAM_EPILOGUE RAM_USE_CLASS_1
05F9: 7F       RET                      (0253)    ret
                                        (0254) 
                                        (0255) .SetModeRegEmpty:
05FA: 41 38 EF AND   REG[0x38],0xEF     (0256)    and   REG[UART_2_TX_FUNC_REG], ~bfFUNCTION_REG_TX_INT_MODE_BIT
05FD: 70 EF    AND   F,0xEF             
                                        (0257)    M8C_SetBank0
                                        (0258)    RAM_EPILOGUE RAM_USE_CLASS_1
05FF: 7F       RET                      (0259)    ret
                                        (0260) .ENDSECTION
                                        (0261) 
                                        (0262) 
                                        (0263) .SECTION
                                        (0264) ;-----------------------------------------------------------------------------
                                        (0265) ;  FUNCTION NAME: UART_2_Start(BYTE bParity)
                                        (0266) ;
                                        (0267) ;  DESCRIPTION:
                                        (0268) ;     Sets the start bit and parity in the Control register of this user module.
                                        (0269) ;-----------------------------------------------------------------------------
                                        (0270) ;
                                        (0271) ;  ARGUMENTS:
                                        (0272) ;     BYTE bParity - parity setting for the Transmitter and receiver. Use defined masks.
                                        (0273) ;        Passed in the A register.
                                        (0274) ;
                                        (0275) ;  RETURNS:
                                        (0276) ;     none.
                                        (0277) ;
                                        (0278) ;  SIDE EFFECTS:
                                        (0279) ;    The A and X registers may be modified by this or future implementations
                                        (0280) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0281) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0282) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0283) ;    functions.
                                        (0284) ;
                                        (0285)  UART_2_Start:
                                        (0286) _UART_2_Start:
                                        (0287)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0288)    ; Note, Proxy Class 4 only if receive buffer used; otherwise Proxy Class 1.
                                        (0289) 
0600: 29 01    OR    A,0x1              (0290)    or    A, bfCONTROL_REG_START_BIT
0602: 60 3B    MOV   REG[0x3B],A        (0291)    mov   REG[UART_2_TX_CONTROL_REG], A
0604: 60 3F    MOV   REG[0x3F],A        (0292)    mov   REG[UART_2_RX_CONTROL_REG], A
                                        (0293) IF ( UART_2_RXBUF_ENABLE )
0606: 91 2A    CALL  _UART_2_CmdReset   (0294)    call  _UART_2_CmdReset
                                        (0295) ENDIF
                                        (0296)    RAM_EPILOGUE RAM_USE_CLASS_1
0608: 7F       RET                      (0297)    ret
                                        (0298) .ENDSECTION
                                        (0299) 
                                        (0300) 
                                        (0301) .SECTION
                                        (0302) ;-----------------------------------------------------------------------------
                                        (0303) ;  FUNCTION NAME: UART_2_Stop
                                        (0304) ;
                                        (0305) ;  DESCRIPTION:
                                        (0306) ;     Disables UART operation.
                                        (0307) ;-----------------------------------------------------------------------------
                                        (0308) ;
                                        (0309) ;  ARGUMENTS:
                                        (0310) ;     none.
                                        (0311) ;
                                        (0312) ;  RETURNS:
                                        (0313) ;     none.
                                        (0314) ;
                                        (0315) ;  SIDE EFFECTS:
                                        (0316) ;    The A and X registers may be modified by this or future implementations
                                        (0317) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0318) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0319) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0320) ;    functions.
                                        (0321) ;
                                        (0322)  UART_2_Stop:
                                        (0323) _UART_2_Stop:
                                        (0324)    RAM_PROLOGUE RAM_USE_CLASS_1
0609: 41 3B FE AND   REG[0x3B],0xFE     (0325)    and   REG[UART_2_TX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
060C: 41 3F FE AND   REG[0x3F],0xFE     (0326)    and   REG[UART_2_RX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                        (0327)    RAM_EPILOGUE RAM_USE_CLASS_1
060F: 7F       RET                      (0328)    ret
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) 
                                        (0332) .SECTION
                                        (0333) ;-----------------------------------------------------------------------------
                                        (0334) ;  FUNCTION NAME: UART_2_SendData
                                        (0335) ;
                                        (0336) ;  DESCRIPTION:
                                        (0337) ;     Initiates a transmission of data.
                                        (0338) ;-----------------------------------------------------------------------------
                                        (0339) ;
                                        (0340) ;  ARGUMENTS:
                                        (0341) ;     BYTE  TxData - data to transmit. PASSED in A register.
                                        (0342) ;
                                        (0343) ;  RETURNS:
                                        (0344) ;     none.
                                        (0345) ;
                                        (0346) ;  SIDE EFFECTS:
                                        (0347) ;    The A and X registers may be modified by this or future implementations
                                        (0348) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0349) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0350) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0351) ;    functions.
                                        (0352) ;
                                        (0353)  UART_2_SendData:
                                        (0354) _UART_2_SendData:
                                        (0355)    RAM_PROLOGUE RAM_USE_CLASS_1
0610: 60 39    MOV   REG[0x39],A        (0356)    mov REG[UART_2_TX_BUFFER_REG], A
                                        (0357)    RAM_EPILOGUE RAM_USE_CLASS_1
0612: 7F       RET                      (0358)    ret
                                        (0359) .ENDSECTION
                                        (0360) 
                                        (0361) 
                                        (0362) .SECTION
                                        (0363) ;-----------------------------------------------------------------------------
                                        (0364) ;  FUNCTION NAME: UART_2_bReadTxStatus
                                        (0365) ;
                                        (0366) ;  DESCRIPTION:
                                        (0367) ;     Reads the Tx Status bits in the Control/Status register.
                                        (0368) ;-----------------------------------------------------------------------------
                                        (0369) ;
                                        (0370) ;  ARGUMENTS:
                                        (0371) ;     none.
                                        (0372) ;
                                        (0373) ;  RETURNS:
                                        (0374) ;     BYTE  bTxStatus - transmit status data.  Use defined masks for detecting
                                        (0375) ;           status bits (returned in A)
                                        (0376) ;
                                        (0377) ;  SIDE EFFECTS:
                                        (0378) ;    The A and X registers may be modified by this or future implementations
                                        (0379) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0380) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0381) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0382) ;    functions.
                                        (0383) ;
                                        (0384)  UART_2_bReadTxStatus:
                                        (0385) _UART_2_bReadTxStatus:
                                        (0386)  bUART_2_ReadTxStatus:                           ; For backwards compatibility only
                                        (0387) _bUART_2_ReadTxStatus:                           ; For backwards compatibility only
                                        (0388)    RAM_PROLOGUE RAM_USE_CLASS_1
0613: 5D 3B    MOV   A,REG[0x3B]        (0389)    mov A,  REG[UART_2_TX_CONTROL_REG]
                                        (0390)    RAM_EPILOGUE RAM_USE_CLASS_1
0615: 7F       RET                      (0391)    ret
                                        (0392) .ENDSECTION
                                        (0393) 
                                        (0394) 
                                        (0395) .SECTION
                                        (0396) ;-----------------------------------------------------------------------------
                                        (0397) ;  FUNCTION NAME: UART_2_bReadRxData
                                        (0398) ;
                                        (0399) ;  DESCRIPTION:
                                        (0400) ;     Reads the RX buffer register.  Should check the status regiser to make
                                        (0401) ;     sure data is valid.
                                        (0402) ;-----------------------------------------------------------------------------
                                        (0403) ;
                                        (0404) ;  ARGUMENTS:
                                        (0405) ;     none.
                                        (0406) ;
                                        (0407) ;  RETURNS:
                                        (0408) ;     bRxData - returned in A.
                                        (0409) ;
                                        (0410) ;  SIDE EFFECTS:
                                        (0411) ;    The A and X registers may be modified by this or future implementations
                                        (0412) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0413) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0414) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0415) ;    functions.
                                        (0416) ;
                                        (0417)  UART_2_bReadRxData:
                                        (0418) _UART_2_bReadRxData:
                                        (0419)  bUART_2_ReadRxData:                             ; For backwards compatibility only
                                        (0420) _bUART_2_ReadRxData:                             ; For backwards compatibility only
                                        (0421)    RAM_PROLOGUE RAM_USE_CLASS_1
0616: 5D 3E    MOV   A,REG[0x3E]        (0422)    mov A, REG[UART_2_RX_BUFFER_REG]
                                        (0423)    RAM_EPILOGUE RAM_USE_CLASS_1
0618: 7F       RET                      (0424)    ret
                                        (0425) .ENDSECTION
                                        (0426) 
                                        (0427) 
                                        (0428) .SECTION
                                        (0429) ;-----------------------------------------------------------------------------
                                        (0430) ;  FUNCTION NAME: UART_2_bReadRxStatus
                                        (0431) ;
                                        (0432) ;  DESCRIPTION:
                                        (0433) ;     Reads the RX Status bits in the Control/Status register.
                                        (0434) ;-----------------------------------------------------------------------------
                                        (0435) ;
                                        (0436) ;  ARGUMENTS:
                                        (0437) ;     none.
                                        (0438) ;
                                        (0439) ;  RETURNS:
                                        (0440) ;     BYTE  bRXStatus - receive status data.  Use the following defined bits
                                        (0441) ;                       masks: RX_COMPLETE and RX_BUFFER_EMPTY
                                        (0442) ;           returned in A.
                                        (0443) ;
                                        (0444) ;  SIDE EFFECTS:
                                        (0445) ;    The A and X registers may be modified by this or future implementations
                                        (0446) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0447) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0448) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0449) ;    functions.
                                        (0450) ;
                                        (0451)  UART_2_bReadRxStatus:
                                        (0452) _UART_2_bReadRxStatus:
                                        (0453)  bUART_2_ReadRxStatus:                           ; For backwards compatibility only
                                        (0454) _bUART_2_ReadRxStatus:                           ; For backwards compatibility only
                                        (0455)    RAM_PROLOGUE RAM_USE_CLASS_1
0619: 5D 3F    MOV   A,REG[0x3F]        (0456)    mov A,  REG[UART_2_RX_CONTROL_REG]
                                        (0457)    RAM_EPILOGUE RAM_USE_CLASS_1
061B: 7F       RET                      (0458)    ret
                                        (0459) .ENDSECTION
                                        (0460) 
                                        (0461) 
                                        (0462) .SECTION
                                        (0463) ;-----------------------------------------------------------------------------
                                        (0464) ;  FUNCTION NAME: UART_2_TxIntMode
                                        (0465) ;
                                        (0466) ;  DESCRIPTION:
                                        (0467) ;     This function is used to change the TX Interrupt mode.
                                        (0468) ;-----------------------------------------------------------------------------
                                        (0469) ;
                                        (0470) ;  ARGUMENTS:
                                        (0471) ;     A => Tx Interrupt mode
                                        (0472) ;             0 => Interrupt on TX_Reg_Empty  (Default)
                                        (0473) ;             1 => Interrupt on TX Complete
                                        (0474) ;
                                        (0475) ;  RETURNS:
                                        (0476) ;     none.
                                        (0477) ;
                                        (0478) ;  SIDE EFFECTS:
                                        (0479) ;    The A and X registers may be modified by this or future implementations
                                        (0480) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0481) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0482) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0483) ;    functions.
                                        (0484) ;
                                        (0485)  UART_2_TxIntMode:
                                        (0486) _UART_2_TxIntMode:
                                        (0487)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0488) 
061C: 21 01    AND   A,0x1              (0489)    and  A,UART_2_INT_MODE_TX_COMPLETE
061E: 71 10    OR    F,0x10             
                                        (0490)    M8C_SetBank1
0620: 39 01    CMP   A,0x1              (0491)    cmp  A,UART_2_INT_MODE_TX_COMPLETE
0622: A0 06    JZ    0x0629             (0492)    jz   .SetTxCmpMode
                                        (0493) 
0624: 41 38 EF AND   REG[0x38],0xEF     (0494)    and  reg[UART_2_TX_FUNC_REG],0xEF             ; Set Interrupt on Tx_Reg_Empty
0627: 80 04    JMP   0x062C             (0495)    jmp  .TxIntMode_End
                                        (0496) 
                                        (0497) .SetTxCmpMode:                                       ; Set Interrupt on TX Complete
0629: 43 38 10 OR    REG[0x38],0x10     (0498)    or   reg[UART_2_TX_FUNC_REG],0x10
062C: 70 EF    AND   F,0xEF             
                                        (0499) 
                                        (0500) .TxIntMode_End:
                                        (0501)    M8C_SetBank0
                                        (0502)    RAM_EPILOGUE RAM_USE_CLASS_1
062E: 7F       RET                      (0503)    ret
                                        (0504) .ENDSECTION
                                        (0505) 
                                        (0506)     
                                        (0507) .SECTION
                                        (0508) ;-----------------------------------------------------------------------------
                                        (0509) ;  FUNCTION NAME: UART_2_IntCntl
                                        (0510) ;
                                        (0511) ;  DESCRIPTION:
                                        (0512) ;     This function is used to enable/disable the Rx and Tx interrupt.
                                        (0513) ;-----------------------------------------------------------------------------
                                        (0514) ;
                                        (0515) ;  ARGUMENTS:
                                        (0516) ;     A => Interrupt mask
                                        (0517) ;
                                        (0518) ;  RETURNS:
                                        (0519) ;     none.
                                        (0520) ;
                                        (0521) ;  SIDE EFFECTS:
                                        (0522) ;    The A and X registers may be modified by this or future implementations
                                        (0523) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0524) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0525) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0526) ;    functions.
                                        (0527) ;
                                        (0528) ;  THEORY of OPERATION or PROCEDURE:
                                        (0529) ;     Set or Clears the Tx/Rx user module interrupt enable mask bit in the TX
                                        (0530) ;     and RX block.
                                        (0531) ;
                                        (0532)  UART_2_IntCntl:
                                        (0533) _UART_2_IntCntl:
                                        (0534)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0535) 
062F: 08       PUSH  A                  (0536)    push A
0630: 21 01    AND   A,0x1              (0537)    and  A,UART_2_ENABLE_RX_INT
0632: A0 06    JZ    0x0639             (0538)    jz   .DisRxInt
0634: 43 E1 80 OR    REG[0xE1],0x80     
                                        (0539)      ; Enable Rx Interrupt
                                        (0540)    M8C_EnableIntMask UART_2_RX_INT_REG, UART_2_RX_INT_MASK
0637: 80 04    JMP   0x063C             (0541)    jmp  .CheckTxInt
0639: 41 E1 7F AND   REG[0xE1],0x7F     
                                        (0542) .DisRxInt:
                                        (0543)      ; Disable Rx Interrupt
                                        (0544)    M8C_DisableIntMask UART_2_RX_INT_REG, UART_2_RX_INT_MASK
                                        (0545) 
                                        (0546) .CheckTxInt:
063C: 18       POP   A                  (0547)    pop  A
063D: 21 02    AND   A,0x2              (0548)    and  A,UART_2_ENABLE_TX_INT
063F: A0 06    JZ    0x0646             (0549)    jz   .DisTxInt
0641: 43 E1 40 OR    REG[0xE1],0x40     
                                        (0550)      ; Enable Tx Interrupt
                                        (0551)    M8C_EnableIntMask UART_2_TX_INT_REG, UART_2_TX_INT_MASK
0644: 80 04    JMP   0x0649             (0552)    jmp  .End_IntCntl
0646: 41 E1 BF AND   REG[0xE1],0xBF     
                                        (0553) .DisTxInt:
                                        (0554)      ; Disable Tx Interrupt
                                        (0555)    M8C_DisableIntMask UART_2_TX_INT_REG, UART_2_TX_INT_MASK
                                        (0556) 
                                        (0557) .End_IntCntl:
                                        (0558)    RAM_EPILOGUE RAM_USE_CLASS_1
0649: 7F       RET                      (0559)    ret
                                        (0560) .ENDSECTION
                                        (0561) 
                                        (0562) 
                                        (0563) ;=============================================================================
                                        (0564) ;=============================================================================
                                        (0565) ;
                                        (0566) ;     High-Level Commands
                                        (0567) ;
                                        (0568) ;=============================================================================
                                        (0569) ;=============================================================================
                                        (0570) 
                                        (0571) 
                                        (0572) ;-----------------------------------------------------------------------------
                                        (0573) ;  FUNCTION NAME: UART_2_PutSHexByte
                                        (0574) ;
                                        (0575) ;  DESCRIPTION:
                                        (0576) ;     Print a byte in Hex (two characters) to the UART Tx
                                        (0577) ;-----------------------------------------------------------------------------
                                        (0578) ;
                                        (0579) ;  ARGUMENTS:
                                        (0580) ;     A  => (BYTE) Data/char to be printed
                                        (0581) ;
                                        (0582) ;  RETURNS:
                                        (0583) ;     none.
                                        (0584) ;
                                        (0585) ;  SIDE EFFECTS:
                                        (0586) ;    The A and X registers may be modified by this or future implementations
                                        (0587) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0588) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0589) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0590) ;    functions.
                                        (0591) ;
                                        (0592) .LITERAL
                                        (0593) UART_2_HEX_STR:
                                        (0594)      DS    "0123456789ABCDEF"
                                        (0595) .ENDLITERAL
                                        (0596) 
                                        (0597) .SECTION
                                        (0598)  UART_2_PutSHexByte:
                                        (0599) _UART_2_PutSHexByte:
                                        (0600)    RAM_PROLOGUE RAM_USE_CLASS_1
065A: 08       PUSH  A                  (0601)    push  A                             ; Save lower nibble
065B: 67       ASR   A                  (0602)    asr   A                             ; Shift high nibble to right
065C: 67       ASR   A                  (0603)    asr   A
065D: 67       ASR   A                  (0604)    asr   A
065E: 67       ASR   A                  (0605)    asr   A
065F: 21 0F    AND   A,0xF              (0606)    and   A,0Fh                         ; Mask off nibble
0661: FF E7    INDEX 0x064A             (0607)    index UART_2_HEX_STR                ; Get Hex value
0663: 90 0F    CALL  _UART_2_PutChar    (0608)    call  UART_2_PutChar                ; Write data to screen
0665: 18       POP   A                  (0609)    pop   A                             ; Restore value
0666: 21 0F    AND   A,0xF              (0610)    and   A,0Fh                         ; Mask off lower nibble
0668: FF E0    INDEX 0x064A             (0611)    index UART_2_HEX_STR                ; Get Hex value
066A: 90 08    CALL  _UART_2_PutChar    (0612)    call  UART_2_PutChar                ; Write data to screen
                                        (0613)    RAM_EPILOGUE RAM_USE_CLASS_1
066C: 7F       RET                      (0614)    ret
                                        (0615) .ENDSECTION
                                        (0616) 
                                        (0617) 
                                        (0618) .SECTION
                                        (0619) ;-----------------------------------------------------------------------------
                                        (0620) ;  FUNCTION NAME: UART_2_PutSHexInt
                                        (0621) ;
                                        (0622) ;  DESCRIPTION:
                                        (0623) ;     Print an Int in Hex (four characters) to UART Tx
                                        (0624) ;-----------------------------------------------------------------------------
                                        (0625) ;
                                        (0626) ;  ARGUMENTS:
                                        (0627) ;     Pointer to string
                                        (0628) ;     A  => ASB of Int
                                        (0629) ;     X  => MSB of Int
                                        (0630) ;
                                        (0631) ;  RETURNS:
                                        (0632) ;     none.
                                        (0633) ;
                                        (0634) ;  SIDE EFFECTS:
                                        (0635) ;    The A and X registers may be modified by this or future implementations
                                        (0636) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0637) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0638) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0639) ;    functions.
                                        (0640) ;
                                        (0641) 
                                        (0642)  UART_2_PutSHexInt:
                                        (0643) _UART_2_PutSHexInt:
                                        (0644)    RAM_PROLOGUE RAM_USE_CLASS_1
066D: 4B       SWAP  A,X                (0645)    swap  A,X
066E: 9F EA    CALL  _UART_2_PutSHexByte(0646)    call  UART_2_PutSHexByte            ; Print MSB
0670: 5B       MOV   A,X                (0647)    mov   A,X                           ; Move LSB into position
0671: 9F E7    CALL  _UART_2_PutSHexByte(0648)    call  UART_2_PutSHexByte            ; Print LSB
                                        (0649)    RAM_EPILOGUE RAM_USE_CLASS_1
0673: 7F       RET                      (0650)    ret
0674: 49 3B 10 TST   REG[0x3B],0x10     
0677: AF FC    JZ    _UART_2_PutChar    
0679: 60 39    MOV   REG[0x39],A        
                                        (0651) .ENDSECTION
                                        (0652) 
                                        (0653) 
                                        (0654) .SECTION
                                        (0655) ;-----------------------------------------------------------------------------
                                        (0656) ;  FUNCTION NAME: UART_2_PutChar
                                        (0657) ;
                                        (0658) ;  DESCRIPTION:
                                        (0659) ;     Send character out through UART TX port.
                                        (0660) ;-----------------------------------------------------------------------------
                                        (0661) ;
                                        (0662) ;  ARGUMENTS:
                                        (0663) ;     A has Character to send to UART Tx Port
                                        (0664) ;
                                        (0665) ;  RETURNS:
                                        (0666) ;     none
                                        (0667) ;
                                        (0668) ;  SIDE EFFECTS:
                                        (0669) ;    The A and X registers may be modified by this or future implementations
                                        (0670) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0671) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0672) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0673) ;    functions.
                                        (0674) ;
                                        (0675) 
                                        (0676)    macro InLinePutChar( Source )
                                        (0677) .BufEmptyWaitLoop:
                                        (0678)    tst REG[UART_2_TX_CONTROL_REG], UART_2_TX_BUFFER_EMPTY     ; Check Tx Status
                                        (0679)    jz  .BufEmptyWaitLoop
                                        (0680)    mov REG[UART_2_TX_BUFFER_REG], @Source        ; Write data to Tx Port
                                        (0681)    endm
                                        (0682) 
                                        (0683)  UART_2_PutChar:
                                        (0684) _UART_2_PutChar:
                                        (0685)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0686)    InLinePutChar A
                                        (0687)    RAM_EPILOGUE RAM_USE_CLASS_1
067B: 7F       RET                      (0688)    ret
                                        (0689) .ENDSECTION
                                        (0690) 
                                        (0691) 
                                        (0692) .SECTION
                                        (0693) ;-----------------------------------------------------------------------------
                                        (0694) ;  FUNCTION NAME: UART_2_cGetChar
                                        (0695) ;
                                        (0696) ;  DESCRIPTION:
                                        (0697) ;     Read character from UART RX port.
                                        (0698) ;-----------------------------------------------------------------------------
                                        (0699) ;
                                        (0700) ;  ARGUMENTS:
                                        (0701) ;      none
                                        (0702) ;
                                        (0703) ;  RETURNS:
                                        (0704) ;     char that is returned from UART
                                        (0705) ;
                                        (0706) ;  SIDE EFFECTS:
                                        (0707) ;    The A and X registers may be modified by this or future implementations
                                        (0708) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0709) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0710) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0711) ;    functions.
                                        (0712) ;
                                        (0713) ;    Program flow will stay in this function until a character is received.
                                        (0714) ;    If the watchdog timer is used, care must be taken to make sure that
                                        (0715) ;    the delay between characters is less than the watchdog timeout.
                                        (0716) ;
                                        (0717)  UART_2_cGetChar:
                                        (0718) _UART_2_cGetChar:
                                        (0719)    RAM_PROLOGUE RAM_USE_CLASS_1
067C: 49 3F 08 TST   REG[0x3F],0x8      (0720)    tst REG[UART_2_RX_CONTROL_REG],UART_2_RX_REG_FULL    ; Check if a character is ready
067F: AF FC    JZ    _UART_2_cGetChar   (0721)    jz  UART_2_cGetChar                              ; If not loop
0681: 5D 3E    MOV   A,REG[0x3E]        (0722)    mov A, REG[UART_2_RX_BUFFER_REG]                 ; Get character
                                        (0723)    RAM_EPILOGUE RAM_USE_CLASS_1
0683: 7F       RET                      (0724)    ret
                                        (0725) .ENDSECTION
                                        (0726) 
                                        (0727) 
                                        (0728) .SECTION
                                        (0729) ;-----------------------------------------------------------------------------
                                        (0730) ;  FUNCTION NAME: UART_2_cReadChar
                                        (0731) ;
                                        (0732) ;  DESCRIPTION:
                                        (0733) ;     Read character from UART RX port.
                                        (0734) ;-----------------------------------------------------------------------------
                                        (0735) ;
                                        (0736) ;  ARGUMENTS:
                                        (0737) ;      none
                                        (0738) ;
                                        (0739) ;  RETURNS:
                                        (0740) ;     char that is returned from UART
                                        (0741) ;
                                        (0742) ;  SIDE EFFECTS:
                                        (0743) ;    The A and X registers may be modified by this or future implementations
                                        (0744) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0745) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0746) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0747) ;    functions.
                                        (0748) ;
                                        (0749) ;    A valid 0x00 character will be ignored, since a 0x00 return value
                                        (0750) ;    implies a valid character or an error condition occured.
                                        (0751) ;
                                        (0752)  UART_2_cReadChar:
                                        (0753) _UART_2_cReadChar:
                                        (0754)    RAM_PROLOGUE RAM_USE_CLASS_1
0684: 5D 3F    MOV   A,REG[0x3F]        (0755)    mov  A,REG[UART_2_RX_CONTROL_REG]                       ; Get Status of RX
0686: 08       PUSH  A                  (0756)    push A
0687: 21 08    AND   A,0x8              (0757)    and  A,UART_2_RX_COMPLETE                               ; Check if a character is ready
0689: B0 04    JNZ   0x068E             (0758)    jnz  .RX_DATA_RDY                                       ; Data Ready go read it.
068B: 18       POP   A                  (0759)    pop  A
068C: 80 0B    JMP   0x0698             (0760)    jmp  .RX_NO_VALID_CHAR
                                        (0761) 
                                        (0762) .RX_DATA_RDY:
068E: 5D 3E    MOV   A,REG[0x3E]        (0763)    mov  A,REG[UART_2_RX_BUFFER_REG ]          
0690: 4B       SWAP  A,X                (0764)    swap A,X                                                ; determine if data is valid
                                        (0765) 
0691: 18       POP   A                  (0766)    pop  A                                                  ; Check for errors
0692: 21 A0    AND   A,0xA0             (0767)    and  A,(UART_2_RX_PARITY_ERROR | UART_2_RX_FRAMING_ERROR)
0694: B0 03    JNZ   0x0698             (0768)    jnz  .RX_NO_VALID_CHAR                                  ; No character, exit
0696: 4B       SWAP  A,X                (0769)    swap A,X                                                ; Put data in A and exit
                                        (0770)    RAM_EPILOGUE RAM_USE_CLASS_1
0697: 7F       RET                      (0771)    ret
                                        (0772) 
                                        (0773) .RX_NO_VALID_CHAR:
0698: 50 00    MOV   A,0x0              (0774)    mov A,0x00                                              ; Zero out character
                                        (0775) 
                                        (0776)  End_UART_2_cReadChar:
                                        (0777)    RAM_EPILOGUE RAM_USE_CLASS_1
069A: 7F       RET                      (0778)    ret
                                        (0779) .ENDSECTION
                                        (0780) 
                                        (0781) 
                                        (0782) .SECTION
                                        (0783) ;-----------------------------------------------------------------------------
                                        (0784) ;  FUNCTION NAME: UART_2_iReadChar
                                        (0785) ;
                                        (0786) ;  WARNING WARNING WARNING  Negative return value not correct!!!!  We may want
                                        (0787) ;  to just set a value in the upper byte if error conditions exists.
                                        (0788) ;
                                        (0789) ;  DESCRIPTION:
                                        (0790) ;     Read character from UART RX port.
                                        (0791) ;-----------------------------------------------------------------------------
                                        (0792) ;
                                        (0793) ;  ARGUMENTS:
                                        (0794) ;      none
                                        (0795) ;
                                        (0796) ;  RETURNS:
                                        (0797) ;     An integer value is returned.  A negative value inplies and error
                                        (0798) ;     condition, a positive value between 0 and 255 is the return character.
                                        (0799) ;
                                        (0800) ;     Error Codes:
                                        (0801) ;        0x80CC    Parity Error
                                        (0802) ;        0x40CC    Overrun Error
                                        (0803) ;        0x20CC    Framing Error
                                        (0804) ;        0x01CC    No Data available
                                        (0805) ;
                                        (0806) ;  SIDE EFFECTS:
                                        (0807) ;    The A and X registers may be modified by this or future implementations
                                        (0808) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0809) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0810) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0811) ;    functions.
                                        (0812) ;
                                        (0813)  UART_2_iReadChar:
                                        (0814) _UART_2_iReadChar:
                                        (0815)    RAM_PROLOGUE RAM_USE_CLASS_1
069B: 5D 3F    MOV   A,REG[0x3F]        (0816)    mov  A,REG[UART_2_RX_CONTROL_REG]                       ; Get Status of RX
                                        (0817)                                                            ; Mask only errors and data ready
069D: 21 E8    AND   A,0xE8             (0818)    and  A,(UART_2_RX_ERROR|UART_2_RX_REG_FULL)
069F: 08       PUSH  A                  (0819)    push A
06A0: 21 08    AND   A,0x8              (0820)    and  A,UART_2_RX_COMPLETE                               ; Check if a character is ready
06A2: B0 07    JNZ   0x06AA             (0821)    jnz  .RX_GET_DATA                                       ; Data Ready go read it.
06A4: 18       POP   A                  (0822)    pop  A
06A5: 29 01    OR    A,0x1              (0823)    or   A,UART_2_RX_NO_DATA                                ; Add no data flag
06A7: 4B       SWAP  A,X                (0824)    swap A,X
06A8: 80 07    JMP   0x06B0             (0825)    jmp  End_UART_2_iReadChar
                                        (0826) 
                                        (0827) .RX_GET_DATA:
06AA: 18       POP   A                  (0828)    pop  A
06AB: 21 E0    AND   A,0xE0             (0829)    and  A,UART_2_RX_ERROR
06AD: 4B       SWAP  A,X                (0830)    swap A,X
06AE: 5D 3E    MOV   A,REG[0x3E]        (0831)    mov  A,REG[UART_2_RX_BUFFER_REG ]                       ; Read data first, then
                                        (0832)                                                            ; determine if data is valid
                                        (0833) 
                                        (0834)  End_UART_2_iReadChar:
                                        (0835)    RAM_EPILOGUE RAM_USE_CLASS_1
06B0: 7F       RET                      (0836)    ret
06B1: 70 BF    AND   F,0xBF             
06B3: 60 D3    MOV   REG[0xD3],A        
                                        (0837) .ENDSECTION
                                        (0838) 
                                        (0839) 
                                        (0840) .SECTION
                                        (0841) ;-----------------------------------------------------------------------------
                                        (0842) ;  FUNCTION NAME: UART_2_PutString
                                        (0843) ;
                                        (0844) ;  DESCRIPTION:
                                        (0845) ;     Send String out through UART TX port.
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS:
                                        (0849) ;     Pointer to String
                                        (0850) ;     A has MSB of string address
                                        (0851) ;     X has LSB of string address
                                        (0852) ;
                                        (0853) ;  RETURNS:
                                        (0854) ;     none
                                        (0855) ;
                                        (0856) ;  SIDE EFFECTS:
                                        (0857) ;    The A and X registers may be modified by this or future implementations
                                        (0858) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0859) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0860) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0861) ;    functions.
                                        (0862) ;          
                                        (0863) ;    Currently only the page pointer registers listed below are modified: 
                                        (0864) ;          IDX_PP
                                        (0865) ;
                                        (0866)  UART_2_PutString:
                                        (0867) _UART_2_PutString:
                                        (0868)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0869)    RAM_SETPAGE_IDX A
                                        (0870) .PutStringLoop:
06B5: 52 00    MOV   A,[X+0]            (0871)    mov   A,[X]                                   ; Get value pointed to by X
06B7: A0 06    JZ    0x06BE             (0872)    jz    End_PutString                           ; Check for end of string
06B9: 9F B9    CALL  _UART_2_PutChar    (0873)    call  UART_2_PutChar                          ; Send character to Tx port
06BB: 75       INC   X                  (0874)    inc   X                                       ; Advance pointer to next character
06BC: 8F F8    JMP   0x06B5             (0875)    jmp   .PutStringLoop                          ; Get next character
06BE: 70 3F    AND   F,0x3F             
06C0: 71 C0    OR    F,0xC0             
                                        (0876) 
                                        (0877) End_PutString:
                                        (0878)    RAM_EPILOGUE RAM_USE_CLASS_3
06C2: 7F       RET                      (0879)    ret
06C3: 70 BF    AND   F,0xBF             
06C5: 62 D3 07 MOV   REG[0xD3],0x7      
                                        (0880) .ENDSECTION
                                        (0881)     
                                        (0882) .SECTION
                                        (0883) ;-----------------------------------------------------------------------------
                                        (0884) ;  FUNCTION NAME: UART_2_Write
                                        (0885) ;
                                        (0886) ;  DESCRIPTION:
                                        (0887) ;     Send String of length X to serial port
                                        (0888) ;-----------------------------------------------------------------------------
                                        (0889) ;
                                        (0890) ;  ARGUMENTS:
                                        (0891) ;     Pointer to String
                                        (0892) ;     [SP-5] Count of characters to send
                                        (0893) ;     [SP-4] has MSB of string address
                                        (0894) ;     [SP-3] has LSB of string address
                                        (0895) ;
                                        (0896) ;  RETURNS:
                                        (0897) ;     none
                                        (0898) ;
                                        (0899) ;  SIDE EFFECTS:
                                        (0900) ;    The A and X registers may be modified by this or future implementations
                                        (0901) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0902) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0903) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0904) ;    functions.
                                        (0905) ;          
                                        (0906) ;    Currently only the page pointer registers listed below are modified: 
                                        (0907) ;          IDX_PP
                                        (0908) ;
                                        (0909) CNT_LEN:    equ -5                               ; Length of data to send
                                        (0910) STR_MSB:    equ -4                               ; MSB pointer of string 
                                        (0911) STR_LSB:    equ -3                               ; LSB pointer of string 
                                        (0912) 
                                        (0913)  UART_2_Write:
                                        (0914) _UART_2_Write:
                                        (0915)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0916)    RAM_SETPAGE_IDX2STK                           ; Refer indexed addrs to the stack
06C8: 4F       MOV   X,SP               (0917)    mov   X, SP                                   ; Establish the frame pointer 
                                        (0918) 
                                        (0919) .NextByteLoop:
06C9: 52 FB    MOV   A,[X-5]            (0920)    mov   A, [X+CNT_LEN]                          ; End of the string?
06CB: A0 1A    JZ    0x06E6             (0921)    jz    .End_Write                              ;   Yes, prepare to exit
06CD: 7B FB    DEC   [X-5]              (0922)    dec   [X+CNT_LEN]                             ; Decrement counter
                                        (0923) 
                                        (0924)    IF SYSTEM_LARGE_MEMORY_MODEL
06CF: 52 FC    MOV   A,[X-4]            (0925)    mov   A, [X+STR_MSB]                          ; Load pointer to char to send
                                        (0926)    ENDIF
                                        (0927) 
06D1: 59 FD    MOV   X,[X-3]            (0928)    mov   X, [X+STR_LSB]                          ; Load pointer to char to send
06D3: 60 D3    MOV   REG[0xD3],A        
                                        (0929)    RAM_SETPAGE_IDX A                             ; switch index pages
06D5: 52 00    MOV   A,[X+0]            (0930)    mov   A, [X]                                  ; Grab the data
06D7: 49 3B 10 TST   REG[0x3B],0x10     
06DA: AF FC    JZ    0x06D7             
06DC: 60 39    MOV   REG[0x39],A        
                                        (0931)    InLinePutChar A                               ; Put data in empty TX buf reg
06DE: 4F       MOV   X,SP               (0932)    mov   X, SP                                   ; Recover frame pointer
06DF: 62 D3 07 MOV   REG[0xD3],0x7      
                                        (0933)    RAM_SETPAGE_IDX2STK                           ; Prepare for stack access
06E2: 77 FD    INC   [X-3]              (0934)    inc   [X+STR_LSB]                             ; Point to next byte, but do not
06E4: 8F E4    JMP   0x06C9             (0935)    jmp   .NextByteLoop                           ;    cross RAM page boundary!
06E6: 70 3F    AND   F,0x3F             
06E8: 71 C0    OR    F,0xC0             
                                        (0936) 
                                        (0937) .End_Write:
                                        (0938)    RAM_EPILOGUE RAM_USE_CLASS_3
06EA: 7F       RET                      (0939)    ret
                                        (0940) .ENDSECTION
                                        (0941)     
                                        (0942) 
                                        (0943) .SECTION
                                        (0944) ;-----------------------------------------------------------------------------
                                        (0945) ;  FUNCTION NAME: UART_2_CWrite
                                        (0946) ;
                                        (0947) ;             WARNING WARNING NOT COMPLETE
                                        (0948) ;
                                        (0949) ;  DESCRIPTION:
                                        (0950) ;     Send String of length X to serial port
                                        (0951) ;-----------------------------------------------------------------------------
                                        (0952) ;
                                        (0953) ;  ARGUMENTS:
                                        (0954) ;     [SP-4] MSB of Count of character to send
                                        (0955) ;     [SP-3] LSB of Count of character to send
                                        (0956) ;     [SP-2] has MSB of string address
                                        (0957) ;     [SP-1] has LSB of string address
                                        (0958) ;
                                        (0959) ;  RETURNS:
                                        (0960) ;     none
                                        (0961) ;
                                        (0962) ;  SIDE EFFECTS:
                                        (0963) ;    The A and X registers may be modified by this or future implementations
                                        (0964) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0965) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0966) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0967) ;    functions.
                                        (0968) ;
                                        (0969) CLEN_MSB:   equ -6           ; MSB Length of data to send
                                        (0970) CLEN_LSB:   equ -5           ; LSB Length of data to send
                                        (0971) CSTR_MSB:   equ -4           ; MSB pointer of string
                                        (0972) CSTR_LSB:   equ -3           ; LSB pointer of string
                                        (0973) 
                                        (0974)  UART_2_CWrite:
                                        (0975) _UART_2_CWrite:
                                        (0976)    RAM_PROLOGUE RAM_USE_CLASS_2
06EB: 4F       MOV   X,SP               (0977)    mov   X,SP
                                        (0978) .CW_Loop:
06EC: 3D FA 00 CMP   [X-6],0x0          (0979)    cmp   [X+CLEN_MSB],0x00                  ; Check for zero counter
06EF: B0 06    JNZ   0x06F6             (0980)    jnz   .CW_WRITEIT
06F1: 3D FB 00 CMP   [X-5],0x0          (0981)    cmp   [X+CLEN_LSB],0x00
06F4: A0 1D    JZ    0x0712             (0982)    jz    .End_CWrite                        ; Leave if done
                                        (0983) 
                                        (0984) .CW_WRITEIT:                                
06F6: 10       PUSH  X                  (0985)    push  X                                  ; Save frame pointer
06F7: 52 FC    MOV   A,[X-4]            (0986)    mov   A,[X+CSTR_MSB]
06F9: 59 FD    MOV   X,[X-3]            (0987)    mov   X,[X+CSTR_LSB]
06FB: 28       ROMX                     (0988)    romx                                     ; Get character from ROM
06FC: 49 3B 10 TST   REG[0x3B],0x10     
06FF: AF FC    JZ    0x06FC             
0701: 60 39    MOV   REG[0x39],A        
                                        (0989)    InLinePutChar A                          ; Put data in empty TX buf reg
0703: 20       POP   X                  (0990)    pop   X                                  ; Restore frame pointer
0704: 07 FD 01 ADD   [X-3],0x1          (0991)    add   [X+CSTR_LSB],1                     ; Increment the string pointer
0707: 0F FC 00 ADC   [X-4],0x0          (0992)    adc   [X+CSTR_MSB],0
070A: 17 FB 01 SUB   [X-5],0x1          (0993)    sub   [X+CLEN_LSB],0x01                  ; Dec the counter
070D: 1F FA 00 SBB   [X-6],0x0          (0994)    sbb   [X+CLEN_MSB],0x00
0710: 8F DB    JMP   0x06EC             (0995)    jmp   .CW_Loop
0712: 70 3F    AND   F,0x3F             
0714: 71 C0    OR    F,0xC0             
                                        (0996) 
                                        (0997) .End_CWrite:
                                        (0998)    RAM_EPILOGUE RAM_USE_CLASS_2
0716: 7F       RET                      (0999)    ret
                                        (1000) .ENDSECTION
                                        (1001) 
                                        (1002) 
                                        (1003) .SECTION
                                        (1004) ;-----------------------------------------------------------------------------
                                        (1005) ;  FUNCTION NAME: UART_2_CPutString
                                        (1006) ;
                                        (1007) ;  DESCRIPTION:
                                        (1008) ;     Send String out through UART TX port.
                                        (1009) ;-----------------------------------------------------------------------------
                                        (1010) ;
                                        (1011) ;  ARGUMENTS:
                                        (1012) ;     Pointer to String
                                        (1013) ;     A has MSB of string address
                                        (1014) ;     X has LSB of string address
                                        (1015) ;
                                        (1016) ;  RETURNS:
                                        (1017) ;     none
                                        (1018) ;
                                        (1019) ;  SIDE EFFECTS:
                                        (1020) ;    The A and X registers may be modified by this or future implementations
                                        (1021) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1022) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1023) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1024) ;    functions.
                                        (1025) ;
                                        (1026)  UART_2_CPutString:
                                        (1027) _UART_2_CPutString:
                                        (1028)    RAM_PROLOGUE RAM_USE_CLASS_1
0717: 08       PUSH  A                  (1029)    push  A                                       ; Store ROM pointer
0718: 10       PUSH  X                  (1030)    push  X
0719: 28       ROMX                     (1031)    romx                                          ; Get character from ROM
071A: A0 0B    JZ    0x0726             (1032)    jz    .End_CPutString
071C: 9F 56    CALL  _UART_2_PutChar    (1033)    call  UART_2_PutChar                          ; Print character
071E: 20       POP   X                  (1034)    pop   X
071F: 18       POP   A                  (1035)    pop   A
0720: 75       INC   X                  (1036)    inc   X                                       ; Inc LSB of pointer
0721: DF F5    JNC   _UART_2_CPutString (1037)    jnc   UART_2_CPutString                       ; Check for carry
0723: 74       INC   A                  (1038)    inc   A                                       ; Inc MSB of pointer
0724: 8F F2    JMP   _UART_2_CPutString (1039)    jmp   UART_2_CPutString
                                        (1040) 
                                        (1041) 
                                        (1042) .End_CPutString:
0726: 38 FE    ADD   SP,0xFE            (1043)    add   SP, -2
                                        (1044)    RAM_EPILOGUE RAM_USE_CLASS_1
0728: 7F       RET                      (1045)    ret
                                        (1046) .ENDSECTION
                                        (1047) 
                                        (1048) 
                                        (1049) .SECTION
                                        (1050) ;-----------------------------------------------------------------------------
                                        (1051) ;  FUNCTION NAME: UART_2_PutCRLF
                                        (1052) ;
                                        (1053) ;  DESCRIPTION:
                                        (1054) ;     Send a CR and LF
                                        (1055) ;-----------------------------------------------------------------------------
                                        (1056) ;
                                        (1057) ;  ARGUMENTS:
                                        (1058) ;     none.
                                        (1059) ;
                                        (1060) ;  RETURNS:
                                        (1061) ;     none.
                                        (1062) ;
                                        (1063) ;  SIDE EFFECTS:
                                        (1064) ;    The A and X registers may be modified by this or future implementations
                                        (1065) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1066) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1067) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1068) ;    functions.
                                        (1069) ;
                                        (1070)  UART_2_PutCRLF:
                                        (1071) _UART_2_PutCRLF:
                                        (1072)    RAM_PROLOGUE RAM_USE_CLASS_1
0729: 50 0D    MOV   A,0xD              (1073)    mov  A,0x0D                        ; Send CR
072B: 9F 47    CALL  _UART_2_PutChar    (1074)    call UART_2_PutChar
072D: 50 0A    MOV   A,0xA              (1075)    mov  A,0x0A                        ; Send LF
072F: 9F 43    CALL  _UART_2_PutChar    (1076)    call UART_2_PutChar
                                        (1077)    RAM_EPILOGUE RAM_USE_CLASS_1
0731: 7F       RET                      (1078)    ret
0732: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1079) .ENDSECTION
                                        (1080) 
                                        (1081) 
                                        (1082) IF (UART_2_RXBUF_ENABLE)
                                        (1083) ;=============================================================================
                                        (1084) ;=============================================================================
                                        (1085) ;
                                        (1086) ;     Command Buffer commands
                                        (1087) ;
                                        (1088) ;=============================================================================
                                        (1089) ;=============================================================================
                                        (1090) 
                                        (1091) .SECTION
                                        (1092) ;-----------------------------------------------------------------------------
                                        (1093) ;  FUNCTION NAME: UART_2_CmdReset
                                        (1094) ;
                                        (1095) ;  DESCRIPTION:
                                        (1096) ;     Reset command string and status flags
                                        (1097) ;-----------------------------------------------------------------------------
                                        (1098) ;
                                        (1099) ;  ARGUMENTS:
                                        (1100) ;     none.
                                        (1101) ;
                                        (1102) ;  RETURNS:
                                        (1103) ;     none.
                                        (1104) ;
                                        (1105) ;  SIDE EFFECTS:
                                        (1106) ;    The A and X registers may be modified by this or future implementations
                                        (1107) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1108) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1109) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1110) ;    functions.
                                        (1111) ;          
                                        (1112) ;    Currently only the page pointer registers listed below are modified: 
                                        (1113) ;          CUR_PP
                                        (1114) ;
                                        (1115) ;  THEORY of OPERATION or PROCEDURE:
                                        (1116) ;     Clear the command buffer, command counter, and flag.
                                        (1117) ;
                                        (1118)  UART_2_CmdReset:
                                        (1119) _UART_2_CmdReset:
                                        (1120)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1121)    RAM_SETPAGE_CUR >UART_2_aRxBuffer
0735: 55 63 00 MOV   [0x63],0x0         (1122)    mov [UART_2_aRxBuffer], 0x00
0738: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1123)    RAM_SETPAGE_CUR >UART_2_bRxCnt
073B: 55 01 00 MOV   [0x1],0x0          (1124)    mov [UART_2_bRxCnt], 0x00
073E: 26 00 00 AND   [0x0],0x0          (1125)    and [UART_2_fStatus], 0x00
0741: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1126)    RAM_SETPAGE_CUR >ptrParam
0744: 55 84 00 MOV   [data+6],0x0       (1127)    mov [ptrParam],0x00
                                        (1128)    RAM_EPILOGUE RAM_USE_CLASS_4
0747: 7F       RET                      (1129)    ret
0748: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1130) .ENDSECTION
                                        (1131) 
                                        (1132) 
                                        (1133) .SECTION
                                        (1134) ;-----------------------------------------------------------------------------
                                        (1135) ;  FUNCTION NAME: UART_2_bCmdCheck
                                        (1136) ;
                                        (1137) ;  DESCRIPTION:
                                        (1138) ;     Check to see if valid command in buffer.
                                        (1139) ;-----------------------------------------------------------------------------
                                        (1140) ;
                                        (1141) ;  ARGUMENTS:
                                        (1142) ;     none.
                                        (1143) ;
                                        (1144) ;  RETURNS:
                                        (1145) ;     BYTE  fStatus - Status of command receive buffer.
                                        (1146) ;                     Returns non-zero value in A if command is valid.
                                        (1147) ;
                                        (1148) ;  SIDE EFFECTS:
                                        (1149) ;    The A and X registers may be modified by this or future implementations
                                        (1150) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1151) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1152) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1153) ;    functions.
                                        (1154) ;          
                                        (1155) ;    Currently only the page pointer registers listed below are modified: 
                                        (1156) ;          CUR_PP
                                        (1157) ;
                                        (1158) ;  THEORY of OPERATION or PROCEDURE:
                                        (1159) ;     Read the status and control register.
                                        (1160) ;
                                        (1161)  UART_2_bCmdCheck:
                                        (1162) _UART_2_bCmdCheck:
                                        (1163)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1164)    RAM_SETPAGE_CUR >UART_2_fStatus
074B: 51 00    MOV   A,[0x0]            (1165)    mov A,  [UART_2_fStatus]
074D: 21 01    AND   A,0x1              (1166)    and A, UART_2_RX_BUF_CMDTERM                  ; Mask off Command status
                                        (1167)    RAM_EPILOGUE RAM_USE_CLASS_4
074F: 7F       RET                      (1168)    ret
0750: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1169) .ENDSECTION
                                        (1170)     
                                        (1171) 
                                        (1172) .SECTION
                                        (1173) ;-----------------------------------------------------------------------------
                                        (1174) ;  FUNCTION NAME: UART_2_bErrCheck
                                        (1175) ;
                                        (1176) ;  DESCRIPTION:
                                        (1177) ;     Check to see if an error has occured since last CmdReset
                                        (1178) ;-----------------------------------------------------------------------------
                                        (1179) ;
                                        (1180) ;  ARGUMENTS:
                                        (1181) ;     none.
                                        (1182) ;
                                        (1183) ;  RETURNS:
                                        (1184) ;     BYTE  fStatus - Status of command receive buffer.
                                        (1185) ;                     Returns non-zero value in A if command is valid.
                                        (1186) ;           0x80 => Parity Error
                                        (1187) ;           0x40 => OverRun Error
                                        (1188) ;           0x20 => Framing Error
                                        (1189) ;           0x10 => Software Buffer OverRun
                                        (1190) ;
                                        (1191) ;  SIDE EFFECTS:
                                        (1192) ;    The A and X registers may be modified by this or future implementations
                                        (1193) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1194) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1195) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1196) ;    functions.
                                        (1197) ;          
                                        (1198) ;    Currently only the page pointer registers listed below are modified: 
                                        (1199) ;          CUR_PP
                                        (1200) ;     Error Status is clear when read.
                                        (1201) ;
                                        (1202) ;  THEORY of OPERATION or PROCEDURE:
                                        (1203) ;     Read RX buffer error status and clear status
                                        (1204) ;
                                        (1205)  UART_2_bErrCheck:
                                        (1206) _UART_2_bErrCheck:
                                        (1207)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1208)    RAM_SETPAGE_CUR >UART_2_fStatus
0753: 51 00    MOV   A,[0x0]            (1209)    mov A,  [UART_2_fStatus]
0755: 21 F0    AND   A,0xF0             (1210)    and A, UART_2_RX_BUF_ERROR                    ; Mask off Error status
0757: 26 00 0F AND   [0x0],0xF          (1211)    and [UART_2_fStatus], ~UART_2_RX_BUF_ERROR
                                        (1212)    RAM_EPILOGUE RAM_USE_CLASS_4
075A: 7F       RET                      (1213)    ret
075B: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1214) .ENDSECTION
                                        (1215) 
                                        (1216) .SECTION
                                        (1217) ;-----------------------------------------------------------------------------
                                        (1218) ;  FUNCTION NAME: UART_2_bCmdLength
                                        (1219) ;
                                        (1220) ;  DESCRIPTION:
                                        (1221) ;     Get length of command string
                                        (1222) ;-----------------------------------------------------------------------------
                                        (1223) ;
                                        (1224) ;  ARGUMENTS:
                                        (1225) ;     none.
                                        (1226) ;
                                        (1227) ;  RETURNS:
                                        (1228) ;     BYTE  bRxCnt    Returns the command length in A.
                                        (1229) ;
                                        (1230) ;  SIDE EFFECTS:
                                        (1231) ;    The A and X registers may be modified by this or future implementations
                                        (1232) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1233) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1234) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1235) ;    functions.
                                        (1236) ;          
                                        (1237) ;    Currently only the page pointer registers listed below are modified: 
                                        (1238) ;          CUR_PP
                                        (1239) ;
                                        (1240)  UART_2_bCmdLength:
                                        (1241) _UART_2_bCmdLength:
                                        (1242)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1243)    RAM_SETPAGE_CUR >UART_2_bRxCnt
075E: 51 01    MOV   A,[0x1]            (1244)    mov A,  [UART_2_bRxCnt]
                                        (1245)    RAM_EPILOGUE RAM_USE_CLASS_4
0760: 7F       RET                      (1246)    ret
0761: 70 BF    AND   F,0xBF             
0763: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1247) .ENDSECTION
                                        (1248) 
                                        (1249) 
                                        (1250) .SECTION
                                        (1251) ;-----------------------------------------------------------------------------
                                        (1252) ;  FUNCTION NAME: UART_2_szGetParam
                                        (1253) ;
                                        (1254) ;  DESCRIPTION:
                                        (1255) ;      Return next parameter from UART_2 Rx buffer
                                        (1256) ;-----------------------------------------------------------------------------
                                        (1257) ;
                                        (1258) ;  ARGUMENTS:  none
                                        (1259) ;
                                        (1260) ;  RETURNS:
                                        (1261) ;     A => MSB of parameter address
                                        (1262) ;     X => LSB of parameter address
                                        (1263) ;
                                        (1264) ;  SIDE EFFECTS:
                                        (1265) ;    The A and X registers may be modified by this or future implementations
                                        (1266) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1267) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1268) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1269) ;    functions.
                                        (1270) ;          
                                        (1271) ;    Currently only the page pointer registers listed below are modified: 
                                        (1272) ;          CUR_PP
                                        (1273) ;          IDX_PP
                                        (1274) ;
                                        (1275) ;     The receive string is modified by placing Null characters at the end
                                        (1276) ;     of each parameter as they are recovered.
                                        (1277) ;
                                        (1278) ;  THEORY OF OPERATION:
                                        (1279) ;     This function is a stateful generator of addresses to the "parameters"
                                        (1280) ;     of an input "Command". It scans the (optional) input buffer and breaks
                                        (1281) ;     each lexically distinct element into a null-terminated string by replacing
                                        (1282) ;     delimiters with nulls, as appropriate. The state of the generator is 
                                        (1283) ;     maintained by the private variable ptrParam, which is a buffer-relative
                                        (1284) ;     offset. The generator is initialized by a call to the function
                                        (1285) ;     UART_2_CmdReset which resets the entire buffer to the 'empty'
                                        (1286) ;     state. Typically this function, UART_2_szGetParam, is
                                        (1287) ;     not called until the buffer has been loaded with an entire command
                                        (1288) ;     (See UART_2_bCmdCheck).
                                        (1289) ;
                                        (1290) ;     Note, there is no special distinction between the "command" and the 
                                        (1291) ;     "parameters". The first non-delimiter character of the buffer---the first
                                        (1292) ;     character of the "command"---is also, for the purposes of this function,
                                        (1293) ;     the first "parameter" to which it returns an address.
                                        (1294) ;
                                        (1295) ;     The value of a delimiter (commonly an ascii space, 0x20 and decimal 32)
                                        (1296) ;     is determined at configuration time by a user module parameter.
                                        (1297) ;
                                        (1298)  UART_2_szGetParam:
                                        (1299) _UART_2_szGetParam:
                                        (1300)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1301)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (1302)     
                                        (1303)    RAM_SETPAGE_CUR >ptrParam
0766: 50 63    MOV   A,0x63             (1304)    mov   A, <UART_2_aRxBuffer               ; Get address to receive buffer
0768: 02 84    ADD   A,[data+6]         (1305)    add   A, [ptrParam]                      ; Add string offset
076A: 5C       MOV   X,A                (1306)    mov   X, A
076B: 62 D3 00 MOV   REG[0xD3],0x0      
                                        (1307)    RAM_SETPAGE_IDX >UART_2_aRxBuffer
076E: 52 00    MOV   A,[X+0]            (1308)    mov   A, [X]                             ; Get character pointed by X
0770: B0 04    JNZ   0x0775             (1309)    jnz   .SkipOverDelimitersLoop            ; Null? No,  continue...
0772: 10       PUSH  X                  (1310)    push  X                                  ;       Yes, Save LSB of current pointer
0773: 80 33    JMP   0x07A7             (1311)    jmp   .End_GetNextParam
                                        (1312)                                             ; Check for delimiter and keep looping until
                                        (1313)                                             ; all leading delimiters have been found.
                                        (1314) .SkipOverDelimitersLoop:
0775: 39 20    CMP   A,0x20             (1315)    cmp   A, UART_2_DELIMITER                ; Do we have a delimiter?
0777: B0 11    JNZ   0x0789             (1316)    jnz   .ParamStartFound                   ;   No,  Bingo! found a parameter
0779: 75       INC   X                  (1317)    inc   X                                  ;   Yes, Increment both index and...
077A: 76 84    INC   [data+6]           (1318)    inc   [ptrParam]                         ;          the stored pointer.
077C: 52 00    MOV   A,[X+0]            (1319)    mov   A, [X]                             ; Get character pointed by X
077E: 3C 84 0F CMP   [data+6],0xF       (1320)    cmp   [ptrParam], (UART_2_RX_BUFFER_SIZE -1)   ; End of buffer?
0781: BF F3    JNZ   0x0775             (1321)    jnz   .SkipOverDelimitersLoop            ;   No,  continue the scan
                                        (1322) 
                                        (1323) .EndOfString:                               ;   Yes, end of string found...
0783: 10       PUSH  X                  (1324)    push  X                                  ;        Save ptr
                                        (1325) .TerminateString:
0784: 56 00 00 MOV   [X+0],0x0          (1326)    mov   [X], 0x00                          ; Make sure string is zero
0787: 80 1F    JMP   0x07A7             (1327)    jmp   .End_GetNextParam
                                        (1328) 
                                        (1329) .ParamStartFound:
0789: 10       PUSH  X                  (1330)    push  X                                  ; Beginning of parameter found, save pointer
                                        (1331) 
                                        (1332) .ParamLoop:                                 ; Now loop until end of parameter found.
078A: 75       INC   X                  (1333)    inc   X                                  ; Advance pointers.
078B: 76 84    INC   [data+6]           (1334)    inc   [ptrParam]
078D: 3C 84 0F CMP   [data+6],0xF       (1335)    cmp   [ptrParam], (UART_2_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
0790: AF F3    JZ    0x0784             (1336)    jz    .TerminateString
0792: 52 00    MOV   A,[X+0]            (1337)    mov   A, [X]                             ; Get next character
0794: A0 12    JZ    0x07A7             (1338)    jz    .End_GetNextParam
0796: 39 20    CMP   A,0x20             (1339)    cmp   A, UART_2_DELIMITER                ; Check if we have a delimiter
0798: BF F1    JNZ   0x078A             (1340)    jnz   .ParamLoop                         ; Still no delimiter, loop again
079A: 56 00 00 MOV   [X+0],0x0          (1341)    mov   [X], 0x00                          ; Replace delimiter with null for end of substring
079D: 76 84    INC   [data+6]           (1342)    inc   [ptrParam]
079F: 3C 84 0F CMP   [data+6],0xF       (1343)    cmp   [ptrParam], (UART_2_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
07A2: B0 04    JNZ   0x07A7             (1344)    jnz   .End_GetNextParam                  ; If not end of string leave
07A4: 55 84 0F MOV   [data+6],0xF       (1345)    mov   [ptrParam], (UART_2_RX_BUFFER_SIZE -1)   ; Reset pointer to end of string.
                                        (1346) 
                                        (1347) .End_GetNextParam:
07A7: 20       POP   X                  (1348)    pop   X
07A8: 10       PUSH  X                  (1349)    push  X
07A9: 3D 00 00 CMP   [X+0],0x0          (1350)    cmp   [X], 0x00
07AC: B0 0A    JNZ   0x07B7             (1351)    jnz   .NotNullString
07AE: 20       POP   X                  (1352)    pop   X
07AF: 57 00    MOV   X,0x0              (1353)    mov   X, 0x00
07B1: 5B       MOV   A,X                (1354)    mov   A, X
07B2: 70 3F    AND   F,0x3F             
07B4: 71 C0    OR    F,0xC0             
                                        (1355)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1356)    RAM_EPILOGUE RAM_USE_CLASS_4
07B6: 7F       RET                      (1357)    ret
                                        (1358) 
                                        (1359) .NotNullString:
07B7: 20       POP   X                  (1360)    pop  X
07B8: 50 00    MOV   A,0x0              (1361)    mov  A, >UART_2_aRxBuffer                ; Return pointer
07BA: 70 3F    AND   F,0x3F             
07BC: 71 C0    OR    F,0xC0             
                                        (1362)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1363)    RAM_EPILOGUE RAM_USE_CLASS_4
07BE: 7F       RET                      (1364)    ret
07BF: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1365) .ENDSECTION
                                        (1366) 
                                        (1367) 
                                        (1368) .SECTION
                                        (1369) ;-----------------------------------------------------------------------------
                                        (1370) ;  FUNCTION NAME: UART_2_szGetRestOfParams
                                        (1371) ;
                                        (1372) ;  DESCRIPTION:
                                        (1373) ;      Returns a pointer to the rest of the UART RX buffer
                                        (1374) ;-----------------------------------------------------------------------------
                                        (1375) ;
                                        (1376) ;  ARGUMENTS:  none
                                        (1377) ;
                                        (1378) ;  RETURNS:
                                        (1379) ;     A => MSB of parameter
                                        (1380) ;     X => LSB of parameter
                                        (1381) ;
                                        (1382) ;  SIDE EFFECTS:
                                        (1383) ;    The A and X registers may be modified by this or future implementations
                                        (1384) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1385) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1386) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1387) ;    functions.
                                        (1388) ;          
                                        (1389) ;    Currently only the page pointer registers listed below are modified: 
                                        (1390) ;          CUR_PP
                                        (1391) ;
                                        (1392)  UART_2_szGetRestOfParams:
                                        (1393) _UART_2_szGetRestOfParams:
                                        (1394)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1395)    RAM_SETPAGE_CUR >ptrParam
07C2: 50 63    MOV   A,0x63             (1396)    mov  A, <UART_2_aRxBuffer                ; Get address to receive buffer
07C4: 02 84    ADD   A,[data+6]         (1397)    add  A, [ptrParam]                       ; Add string offset
07C6: 5C       MOV   X,A                (1398)    mov  X,A
07C7: 50 00    MOV   A,0x0              (1399)    mov  A,>UART_2_aRxBuffer                 ; Return pointer
                                        (1400)    RAM_EPILOGUE RAM_USE_CLASS_4
07C9: 7F       RET                      (1401)    ret
                                        (1402) .ENDSECTION
                                        (1403) 
                                        (1404) ENDIF
                                        (1405) 
                                        (1406) 
                                        (1407) ; End of File UART_2.asm
FILE: lib\uart_1int.asm                 (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   UART_1INT.asm
                                        (0004) ;;  Version: 5.3, Updated on 2013/5/19 at 10:44:49
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  UART Interrupt Service Routine.
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) 
                                        (0014) include "UART_1.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "m8c.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _UART_1_TX_ISR
                                        (0022) export  _UART_1_RX_ISR
                                        (0023) 
                                        (0024) IF (UART_1_RXBUF_ENABLE)
                                        (0025) export  UART_1_aRxBuffer
                                        (0026) export _UART_1_aRxBuffer
                                        (0027) export  UART_1_bRxCnt
                                        (0028) export _UART_1_bRxCnt
                                        (0029) export  UART_1_fStatus
                                        (0030) export _UART_1_fStatus
                                        (0031) ENDIF
                                        (0032) 
                                        (0033) 
                                        (0034) ;-----------------------------------------------
                                        (0035) ; Variable Allocation
                                        (0036) ;-----------------------------------------------
                                        (0037) AREA InterruptRAM (RAM, REL, CON)
                                        (0038) 
                                        (0039) IF (UART_1_RXBUF_ENABLE)
                                        (0040)  UART_1_fStatus:
                                        (0041) _UART_1_fStatus:      BLK  1
                                        (0042)  UART_1_bRxCnt:
                                        (0043) _UART_1_bRxCnt:       BLK  1
                                        (0044) AREA UART_1_RAM (RAM, REL, CON)
                                        (0045)  UART_1_aRxBuffer:
                                        (0046) _UART_1_aRxBuffer:    BLK UART_1_RX_BUFFER_SIZE
                                        (0047) ENDIF
                                        (0048) 
                                        (0049) AREA InterruptRAM (RAM, REL, CON)
                                        (0050) 
                                        (0051) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0052) ;---------------------------------------------------
                                        (0053) ; Insert your custom declarations below this banner
                                        (0054) ;---------------------------------------------------
                                        (0055) 
                                        (0056) ;------------------------
                                        (0057) ;  Includes
                                        (0058) ;------------------------
                                        (0059) 
                                        (0060) 
                                        (0061) ;------------------------
                                        (0062) ;  Constant Definitions
                                        (0063) ;------------------------
                                        (0064) 
                                        (0065) 
                                        (0066) ;------------------------
                                        (0067) ; Variable Allocation
                                        (0068) ;------------------------
                                        (0069) 
                                        (0070) 
                                        (0071) ;---------------------------------------------------
                                        (0072) ; Insert your custom declarations above this banner
                                        (0073) ;---------------------------------------------------
                                        (0074) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0075) 
                                        (0076) 
                                        (0077) AREA UserModules (ROM, REL, CON)
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;  FUNCTION NAME: _UART_1_TX_ISR
                                        (0081) ;
                                        (0082) ;  DESCRIPTION:
                                        (0083) ;     UART TX interrupt handler for instance UART_1.
                                        (0084) ;
                                        (0085) ;     This is a place holder function.  If the user requires use of an interrupt
                                        (0086) ;     handler for this function, then place code where specified.
                                        (0087) ;-----------------------------------------------------------------------------
                                        (0088) 
                                        (0089) _UART_1_TX_ISR:
                                        (0090)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                        (0091)    ;---------------------------------------------------
                                        (0092)    ; Insert your custom assembly code below this banner
                                        (0093)    ;---------------------------------------------------
                                        (0094)    ;   NOTE: interrupt service routines must preserve
                                        (0095)    ;   the values of the A and X CPU registers.
                                        (0096)    
                                        (0097)    ;---------------------------------------------------
                                        (0098)    ; Insert your custom assembly code above this banner
                                        (0099)    ;---------------------------------------------------
                                        (0100)    
                                        (0101)    ;---------------------------------------------------
                                        (0102)    ; Insert a lcall to a C function below this banner
                                        (0103)    ; and un-comment the lines between these banners
                                        (0104)    ;---------------------------------------------------
                                        (0105)    
                                        (0106)    ;PRESERVE_CPU_CONTEXT
                                        (0107)    ;lcall _My_C_Function
                                        (0108)    ;RESTORE_CPU_CONTEXT
                                        (0109)    
                                        (0110)    ;---------------------------------------------------
                                        (0111)    ; Insert a lcall to a C function above this banner
                                        (0112)    ; and un-comment the lines between these banners
                                        (0113)    ;---------------------------------------------------
                                        (0114)    ;@PSoC_UserCode_END@ (Do not change this line.)
07CA: 7E       RETI                     (0115)    reti
                                        (0116) 
                                        (0117) 
                                        (0118) ;-----------------------------------------------------------------------------
                                        (0119) ;  FUNCTION NAME: _UART_1_RX_ISR
                                        (0120) ;
                                        (0121) ;  DESCRIPTION:
                                        (0122) ;     UART RX interrupt handler for instance UART_1.
                                        (0123) ;     This ISR handles the background processing of received characters if
                                        (0124) ;     the buffer is enabled.
                                        (0125) ;
                                        (0126) ;
                                        (0127) ;  The following assumes that the RX buffer feature has been enabled.
                                        (0128) ;
                                        (0129) ;  SIDE EFFECTS:
                                        (0130) ;     There are 3 posible errors that may occur with the serial port.
                                        (0131) ;      1) Parity Error
                                        (0132) ;      2) Framing Error
                                        (0133) ;      3) OverRun Error
                                        (0134) ;
                                        (0135) ;  This user module check for parity and framing error.  If either of these
                                        (0136) ;  two errors are detected, the data is read and ignored.  When an overRun
                                        (0137) ;  error occurs, the last byte was lost, but the current byte is valid.  For
                                        (0138) ;  this reason this error is ignored at this time.  Code could be added to
                                        (0139) ;  this ISR to set a flag if an error condition occurs.
                                        (0140) ;
                                        (0141) ;  THEORY of OPERATION:
                                        (0142) ;     When using the RX buffer feature, the ISR collects received characters
                                        (0143) ;     in a buffer until the user defined command terminator is detected.  After
                                        (0144) ;     the command terminator is detected, the command bit is set and all other
                                        (0145) ;     characters will be ignored until the command bit is reset.  Up to
                                        (0146) ;     buffer_size - 1 characters will be collected waiting for a command
                                        (0147) ;     terminator.  After that, the characters will be discarded, although
                                        (0148) ;     a command determinator will still cause the command bit to be set.
                                        (0149) ;
                                        (0150) ;-----------------------------------------------------------------------------
                                        (0151) _UART_1_RX_ISR:
                                        (0152) 
                                        (0153)    ;@PSoC_UserCode_BODY_2@ (Do not change this line.)
                                        (0154)    ;---------------------------------------------------
                                        (0155)    ; Insert your custom assembly code below this banner
                                        (0156)    ;---------------------------------------------------
                                        (0157)    ;   NOTE: interrupt service routines must preserve
                                        (0158)    ;   the values of the A and X CPU registers.
                                        (0159)    
                                        (0160)    ;---------------------------------------------------
                                        (0161)    ; Insert your custom assembly code above this banner
                                        (0162)    ;---------------------------------------------------
                                        (0163)    
                                        (0164)    ;---------------------------------------------------
                                        (0165)    ; Insert a lcall to a C function below this banner
                                        (0166)    ; and un-comment the lines between these banners
                                        (0167)    ;---------------------------------------------------
                                        (0168)    
                                        (0169)    ;PRESERVE_CPU_CONTEXT
                                        (0170)    ;lcall _My_C_Function
                                        (0171)    ;RESTORE_CPU_CONTEXT
                                        (0172)    
                                        (0173)    ;---------------------------------------------------
                                        (0174)    ; Insert a lcall to a C function above this banner
                                        (0175)    ; and un-comment the lines between these banners
                                        (0176)    ;---------------------------------------------------
                                        (0177)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0178) 
                                        (0179) IF (UART_1_RXBUF_ENABLE)
07CB: 08       PUSH  A                  (0180)    push A
07CC: 10       PUSH  X                  (0181)    push X
07CD: 5D D3    MOV   A,REG[0xD3]        
07CF: 08       PUSH  A                  
                                        (0182)    
                                        (0183)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0184)       REG_PRESERVE IDX_PP
                                        (0185)    ENDIF
                                        (0186)    
07D0: 58 03    MOV   X,[0x3]            (0187)    mov  X,[UART_1_bRxCnt]                                  ; Load X with byte counter
07D2: 5D 2F    MOV   A,REG[0x2F]        (0188)    mov  A,REG[UART_1_RX_CONTROL_REG]                       ; Read the control register
07D4: 08       PUSH  A                  (0189)    push A                                                  ; Store copy for later test
                                        (0190)                                                            ; IF real RX interrupt
07D5: 21 08    AND   A,0x8              (0191)    and  A,UART_1_RX_REG_FULL                               ; Did really really get an IRQ
07D7: B0 04    JNZ   0x07DC             (0192)    jnz  .UARTRX_ReadRx                                     ; Data ready, go get it
07D9: 18       POP   A                  (0193)    pop  A                                                  ; Restore stack
07DA: 80 5E    JMP   0x0839             (0194)    jmp  .RESTORE_IDX_PP
                                        (0195) 
                                        (0196) .UARTRX_ReadRx:
07DC: 18       POP   A                  (0197)    pop  A                                                  ; Restore status flags
                                        (0198)                                                            ; IF there is no error, get data
                                        (0199)                                                            ; Check for parity or framing error
07DD: 21 E0    AND   A,0xE0             (0200)    and  A,UART_1_RX_ERROR
07DF: A0 12    JZ    0x07F2             (0201)    jz   .UARTRX_NO_ERROR                                   ; If there is not an Error go read data
                                        (0202) 
07E1: 2C 02    OR    [0x2],A            (0203)    or   [UART_1_fStatus],A                                 ; Set error flags (parity,framing,overrun) bits
07E3: 49 2E 00 TST   REG[0x2E],0x0      (0204)    tst  REG[UART_1_RX_BUFFER_REG], 0x00                    ; Read the data buffer to clear it.
07E6: 21 20    AND   A,0x20             (0205)    and  A,UART_1_RX_FRAMING_ERROR                          ; Check for framing error special case
07E8: A0 50    JZ    0x0839             (0206)    jz   .RESTORE_IDX_PP                                    ; Not framing error, all done
                                        (0207) 
                                        (0208)                                                            ; Disable and re-enable RX to reset after
                                        (0209)                                                            ; framing error.
07EA: 41 2F FE AND   REG[0x2F],0xFE     (0210)    and   REG[UART_1_RX_CONTROL_REG], ~UART_1_RX_ENABLE     ; Disable RX
07ED: 43 2F 01 OR    REG[0x2F],0x1      (0211)    or    REG[UART_1_RX_CONTROL_REG],  UART_1_RX_ENABLE     ; Enable RX
07F0: 80 48    JMP   0x0839             (0212)    jmp  .RESTORE_IDX_PP                                    ; Done with framing error, leave.
                                        (0213) 
                                        (0214) 
                                        (0215) .UARTRX_NO_ERROR:
07F2: 5D 2E    MOV   A,REG[0x2E]        (0216)    mov  A,REG[UART_1_RX_BUFFER_REG ]                       ; Read the data buffer
                                        (0217) 
                                        (0218)                                                            ; IF buffer not full
07F4: 47 02 01 TST   [0x2],0x1          (0219)    tst  [UART_1_fStatus],UART_1_RX_BUF_CMDTERM             ; Check for buffer full
07F7: B0 41    JNZ   0x0839             (0220)    jnz  .RESTORE_IDX_PP                                    ; All done
                                        (0221) 
07F9: 39 0D    CMP   A,0xD              (0222)    cmp  A,UART_1_CMD_TERM                                  ; Check for End of command
07FB: B0 14    JNZ   0x0810             (0223)    jnz  .UARTRX_CHK_BACKSPACE
07FD: 2E 02 01 OR    [0x2],0x1          (0224)    or   [UART_1_fStatus],UART_1_RX_BUF_CMDTERM             ; Set command ready bit
0800: 62 D3 00 MOV   REG[0xD3],0x0      
0803: 70 3F    AND   F,0x3F             
0805: 71 80    OR    F,0x80             
                                        (0225) 
                                        (0226) 
                                        (0227) 
                                        (0228)    RAM_SETPAGE_IDX >UART_1_aRxBuffer
                                        (0229)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
0807: 56 04 00 MOV   [X+4],0x0          (0230)    mov  [X + UART_1_aRxBuffer],00h                         ; Zero out last data
080A: 70 3F    AND   F,0x3F             
080C: 71 00    OR    F,0x0              
                                        (0231)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
080E: 80 2A    JMP   0x0839             (0232)    jmp  .RESTORE_IDX_PP
                                        (0233) 
                                        (0234) .UARTRX_CHK_BACKSPACE:                                     ; 
                                        (0235) IF(UART_1_BACKSPACE_ENABLE)                                ; Enable if backspace/delete mode
                                        (0236)    cmp  A,UART_1_BACKSPACE_ENABLE                          ; Check for backspace character
                                        (0237)    jnz  .UARTRX_IGNORE                                     ; If not, skip the backspace stuff
                                        (0238)    cmp  [UART_1_bRxCnt],00h                                ; Check if buffer empty
                                        (0239)    jz   .RESTORE_IDX_PP                                    ; 
                                        (0240)    dec  [UART_1_bRxCnt]                                    ; Decrement buffer count by one.
                                        (0241)    jmp  .RESTORE_IDX_PP
                                        (0242) ENDIF                                                      ; 
                                        (0243) 
                                        (0244) .UARTRX_IGNORE:
                                        (0245) IF(UART_1_RX_IGNORE_BELOW)                                 ; Ignore charaters below this value
0810: 39 20    CMP   A,0x20             (0246)    cmp  A,UART_1_RX_IGNORE_BELOW                           ; If ignore char is set to 0x00, do not
0812: C0 26    JC    0x0839             (0247)    jc   .RESTORE_IDX_PP                                    ; ignore any characters.
0814: 62 D3 00 MOV   REG[0xD3],0x0      
                                        (0248) ENDIF
                                        (0249) 
                                        (0250) .UARTRX_CHK_OVFL:                                          ; Check for MAX String here
                                        (0251) 	
                                        (0252)    RAM_SETPAGE_IDX >UART_1_aRxBuffer                       ;   using idexed address mode
0817: 3C 03 5E CMP   [0x3],0x5E         (0253)    cmp  [UART_1_bRxCnt],(UART_1_RX_BUFFER_SIZE - 1)
081A: C0 11    JC    0x082C             (0254)    jc   .UARTRX_ISR_GETDATA
081C: 70 3F    AND   F,0x3F             
081E: 71 80    OR    F,0x80             
                                        (0255)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
0820: 56 04 00 MOV   [X+4],0x0          (0256)    mov  [X + UART_1_aRxBuffer],00h                         ; Zero out last data in the buffer
0823: 70 3F    AND   F,0x3F             
0825: 71 00    OR    F,0x0              
                                        (0257)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
0827: 2E 02 10 OR    [0x2],0x10         (0258)    or   [UART_1_fStatus],UART_1_RX_BUF_OVERRUN             ; Set error flags (parity,framing,overrun) bits
082A: 80 0E    JMP   0x0839             (0259)    jmp  .RESTORE_IDX_PP
082C: 70 3F    AND   F,0x3F             
082E: 71 80    OR    F,0x80             
                                        (0260) 
                                        (0261) .UARTRX_ISR_GETDATA:                                       ; IF input data == "CR", then end of command
                                        (0262)                                                            ; X is already loaded with pointer
                                        (0263)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
0830: 54 04    MOV   [X+4],A            (0264)    mov  [X+UART_1_aRxBuffer],A                             ; store data in array
0832: 70 3F    AND   F,0x3F             
0834: 71 00    OR    F,0x0              
                                        (0265)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
0836: 75       INC   X                  (0266)    inc  X                                                  ; Inc the pointer
0837: 5A 03    MOV   [0x3],X            (0267)    mov  [UART_1_bRxCnt],X                                  ; Restore the pointer
0839: 18       POP   A                  
083A: 60 D3    MOV   REG[0xD3],A        
                                        (0268)                                                            ; ENDIF max string size
                                        (0269) .RESTORE_IDX_PP:
                                        (0270)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0271)       REG_RESTORE IDX_PP
                                        (0272)    ENDIF
                                        (0273) 
                                        (0274) .END_UARTRX_ISR:
083C: 20       POP   X                  (0275)    pop  X
083D: 18       POP   A                  (0276)    pop  A
                                        (0277) 
                                        (0278) ENDIF
                                        (0279) 
                                        (0280) UART_1_RX_ISR_END:
083E: 7E       RETI                     (0281)    reti
                                        (0282) 
                                        (0283) ; end of file UART_1INT.asm
                                        (0284) 
FILE: lib\uart_1.asm                    (0001) ;;*****************************************************************************
083F: 43 E1 04 OR    REG[0xE1],0x4      (0002) ;;*****************************************************************************
0842: 43 E1 08 OR    REG[0xE1],0x8      
                                        (0003) ;;  Filename:   UART_1.asm
                                        (0004) ;;  Version: 5.3, Updated on 2013/5/19 at 10:44:49
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  UART User Module software implementation file for the
                                        (0008) ;;                22/24/25/26/27xxx families.
                                        (0009) ;;
                                        (0010) ;;
                                        (0011) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0012) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0013) ;;        This means it is the caller's responsibility to preserve any values
                                        (0014) ;;        in the X and A registers that are still needed after the API functions
                                        (0015) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0016) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0017) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0018) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0019) ;;-----------------------------------------------------------------------------
                                        (0020) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0021) ;;*****************************************************************************
                                        (0022) ;;*****************************************************************************
                                        (0023) 
                                        (0024) 
                                        (0025) include "m8c.inc"
                                        (0026) include "memory.inc"
                                        (0027) include "UART_1.inc"
                                        (0028) 
                                        (0029) ;-----------------------------------------------
                                        (0030) ;  Global Symbols
                                        (0031) ;-----------------------------------------------
                                        (0032) ;-------------------------------------------------------------------
                                        (0033) ;  Declare the functions global for both assembler and C compiler.
                                        (0034) ;
                                        (0035) ;  Note that there are two names for each API. First name is
                                        (0036) ;  assembler reference. Name with underscore is name refence for
                                        (0037) ;  C compiler.  Calling function in C source code does not require
                                        (0038) ;  the underscore.
                                        (0039) ;-------------------------------------------------------------------
                                        (0040) export  UART_1_SetTxIntMode
                                        (0041) export _UART_1_SetTxIntMode
                                        (0042) export  UART_1_EnableInt
                                        (0043) export _UART_1_EnableInt
                                        (0044) export  UART_1_DisableInt
                                        (0045) export _UART_1_DisableInt
                                        (0046) 
                                        (0047) export  UART_1_Start
                                        (0048) export _UART_1_Start
                                        (0049) export  UART_1_Stop
                                        (0050) export _UART_1_Stop
                                        (0051) export  UART_1_SendData
                                        (0052) export _UART_1_SendData
                                        (0053) export  UART_1_bReadTxStatus
                                        (0054) export _UART_1_bReadTxStatus
                                        (0055) export  UART_1_bReadRxData
                                        (0056) export _UART_1_bReadRxData
                                        (0057) export  UART_1_bReadRxStatus
                                        (0058) export _UART_1_bReadRxStatus
                                        (0059) 
                                        (0060) export  UART_1_IntCntl
                                        (0061) export _UART_1_IntCntl
                                        (0062) 
                                        (0063) export  UART_1_TxIntMode
                                        (0064) export _UART_1_TxIntMode
                                        (0065) 
                                        (0066) export  UART_1_PutSHexByte
                                        (0067) export _UART_1_PutSHexByte
                                        (0068) export  UART_1_PutSHexInt
                                        (0069) export _UART_1_PutSHexInt
                                        (0070) 
                                        (0071) export  UART_1_CPutString
                                        (0072) export _UART_1_CPutString
                                        (0073) export  UART_1_PutString
                                        (0074) export _UART_1_PutString
                                        (0075) export  UART_1_PutChar
                                        (0076) export _UART_1_PutChar
                                        (0077) export  UART_1_Write
                                        (0078) export _UART_1_Write
                                        (0079) export  UART_1_CWrite
                                        (0080) export _UART_1_CWrite
                                        (0081) 
                                        (0082) export  UART_1_cGetChar
                                        (0083) export _UART_1_cGetChar
                                        (0084) export  UART_1_cReadChar
                                        (0085) export _UART_1_cReadChar
                                        (0086) export  UART_1_iReadChar
                                        (0087) export _UART_1_iReadChar
                                        (0088) export  UART_1_PutCRLF
                                        (0089) export _UART_1_PutCRLF
                                        (0090) 
                                        (0091) IF (UART_1_RXBUF_ENABLE)
                                        (0092) export  UART_1_CmdReset
                                        (0093) export _UART_1_CmdReset
                                        (0094) export  UART_1_bCmdCheck
                                        (0095) export _UART_1_bCmdCheck
                                        (0096) export  UART_1_bCmdLength
                                        (0097) export _UART_1_bCmdLength
                                        (0098) export  UART_1_bErrCheck
                                        (0099) export _UART_1_bErrCheck
                                        (0100) 
                                        (0101) export  UART_1_szGetParam
                                        (0102) export _UART_1_szGetParam
                                        (0103) export  UART_1_szGetRestOfParams
                                        (0104) export _UART_1_szGetRestOfParams
                                        (0105) ENDIF
                                        (0106) 
                                        (0107) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0108) ; WARNING WARNING WARNING
                                        (0109) ; The following exports are for backwards compatibility only and should
                                        (0110) ; not be used for new designs. They may be eliminated in a future release.
                                        (0111) ; Their status is "NO FURTHER MAINTENANCE". 
                                        (0112) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0113) export  bUART_1_ReadTxStatus
                                        (0114) export _bUART_1_ReadTxStatus
                                        (0115) export  bUART_1_ReadRxData
                                        (0116) export _bUART_1_ReadRxData
                                        (0117) export  bUART_1_ReadRxStatus
                                        (0118) export _bUART_1_ReadRxStatus
                                        (0119) 	
                                        (0120) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0121) ;             END WARNING
                                        (0122) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0123) 
                                        (0124) ;-----------------------------------------------
                                        (0125) ; Variable Allocation
                                        (0126) ;-----------------------------------------------
                                        (0127) IF (UART_1_RXBUF_ENABLE)
                                        (0128)     
                                        (0129) area UART_1_RAM (RAM, REL, CON)
                                        (0130)     
                                        (0131)  ptrParam:   BLK  1
                                        (0132) 
                                        (0133) ENDIF
                                        (0134) 
                                        (0135) area text (ROM,REL)
                                        (0136) 
                                        (0137) ;-----------------------------------------------
                                        (0138) ;  EQUATES
                                        (0139) ;-----------------------------------------------
                                        (0140) bfCONTROL_REG_START_BIT:        equ    1    ; Control register start bit
                                        (0141) bfFUNCTION_REG_TX_INT_MODE_BIT: equ 0x10    ; the TX Int Mode bit
                                        (0142) 
                                        (0143) area UserModules (ROM, REL, CON)
                                        (0144) 
                                        (0145) ;=============================================================================
                                        (0146) ;=============================================================================
                                        (0147) ;
                                        (0148) ;     Low-Level Commands
                                        (0149) ;
                                        (0150) ;=============================================================================
                                        (0151) ;=============================================================================
                                        (0152) 
                                        (0153) .SECTION
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;  FUNCTION NAME: UART_1_EnableInt
                                        (0156) ;
                                        (0157) ;  DESCRIPTION:
                                        (0158) ;     Enables this UART's interrupt by setting the interrupt enable mask
                                        (0159) ;     bit associated with this User Module. Remember to call the global
                                        (0160) ;     interrupt enable function by using the macro: M8C_EnableGInt.
                                        (0161) ;-----------------------------------------------------------------------------
                                        (0162) ;
                                        (0163) ;  ARGUMENTS:
                                        (0164) ;     none.
                                        (0165) ;
                                        (0166) ;  RETURNS:
                                        (0167) ;     none.
                                        (0168) ;
                                        (0169) ;  SIDE EFFECTS:
                                        (0170) ;    The A and X registers may be modified by this or future implementations
                                        (0171) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0172) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0173) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0174) ;    functions.
                                        (0175) ;
                                        (0176)  UART_1_EnableInt:
                                        (0177) _UART_1_EnableInt:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0179)    M8C_EnableIntMask UART_1_TX_INT_REG, UART_1_TX_INT_MASK
                                        (0180)    M8C_EnableIntMask UART_1_RX_INT_REG, UART_1_RX_INT_MASK
                                        (0181)    RAM_EPILOGUE RAM_USE_CLASS_1
0845: 7F       RET                      (0182)    ret
0846: 41 E1 FB AND   REG[0xE1],0xFB     
0849: 41 E1 F7 AND   REG[0xE1],0xF7     
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185)     
                                        (0186) .SECTION
                                        (0187) ;-----------------------------------------------------------------------------
                                        (0188) ;  FUNCTION NAME: UART_1_DisableInt
                                        (0189) ;
                                        (0190) ;  DESCRIPTION:
                                        (0191) ;     Disables this UART's interrupt by clearing the interrupt enable mask bit
                                        (0192) ;     associated with this User Module.
                                        (0193) ;-----------------------------------------------------------------------------
                                        (0194) ;
                                        (0195) ;  ARGUMENTS:
                                        (0196) ;     none.
                                        (0197) ;
                                        (0198) ;  RETURNS:
                                        (0199) ;     none.
                                        (0200) ;
                                        (0201) ;  SIDE EFFECTS:
                                        (0202) ;    The A and X registers may be modified by this or future implementations
                                        (0203) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0204) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0205) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0206) ;    functions.
                                        (0207) ;
                                        (0208)  UART_1_DisableInt:
                                        (0209) _UART_1_DisableInt:
                                        (0210)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0211)    M8C_DisableIntMask UART_1_TX_INT_REG, UART_1_TX_INT_MASK
                                        (0212)    M8C_DisableIntMask UART_1_RX_INT_REG, UART_1_RX_INT_MASK
                                        (0213)    RAM_EPILOGUE RAM_USE_CLASS_1
084C: 7F       RET                      (0214)    ret
084D: 71 10    OR    F,0x10             
                                        (0215) .ENDSECTION
                                        (0216) 
                                        (0217) 
                                        (0218) .SECTION
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;  FUNCTION NAME: UART_1_SetTxIntMode(BYTE bTxIntMode)
                                        (0221) ;
                                        (0222) ;  DESCRIPTION:
                                        (0223) ;     Sets the Tx Interrupt Mode bit in the Function Register.
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;
                                        (0226) ;  ARGUMENTS:
                                        (0227) ;     BYTE bTxIntMode - The TX Interrupt mode setting. Use defined masks.
                                        (0228) ;        Passed in the A register
                                        (0229) ;
                                        (0230) ;  RETURNS:
                                        (0231) ;     none.
                                        (0232) ;
                                        (0233) ;  SIDE EFFECTS:
                                        (0234) ;    The A and X registers may be modified by this or future implementations
                                        (0235) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0236) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0237) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0238) ;    functions.
                                        (0239) ;
                                        (0240) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0241) ;     Sets the TX interrupt mode bit to define whether the interrupt occurs
                                        (0242) ;     on TX register empty or TX transmit complete
                                        (0243) ;
                                        (0244)  UART_1_SetTxIntMode:
                                        (0245) _UART_1_SetTxIntMode:
                                        (0246)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0247)    M8C_SetBank1
084F: 21 01    AND   A,0x1              (0248)    and   A, UART_1_INT_MODE_TX_COMPLETE
0851: A0 07    JZ    0x0859             (0249)    jz    .SetModeRegEmpty
0853: 43 28 10 OR    REG[0x28],0x10     (0250)    or    REG[UART_1_TX_FUNC_REG], bfFUNCTION_REG_TX_INT_MODE_BIT
0856: 70 EF    AND   F,0xEF             
                                        (0251)    M8C_SetBank0
                                        (0252)    RAM_EPILOGUE RAM_USE_CLASS_1
0858: 7F       RET                      (0253)    ret
                                        (0254) 
                                        (0255) .SetModeRegEmpty:
0859: 41 28 EF AND   REG[0x28],0xEF     (0256)    and   REG[UART_1_TX_FUNC_REG], ~bfFUNCTION_REG_TX_INT_MODE_BIT
085C: 70 EF    AND   F,0xEF             
                                        (0257)    M8C_SetBank0
                                        (0258)    RAM_EPILOGUE RAM_USE_CLASS_1
085E: 7F       RET                      (0259)    ret
                                        (0260) .ENDSECTION
                                        (0261) 
                                        (0262) 
                                        (0263) .SECTION
                                        (0264) ;-----------------------------------------------------------------------------
                                        (0265) ;  FUNCTION NAME: UART_1_Start(BYTE bParity)
                                        (0266) ;
                                        (0267) ;  DESCRIPTION:
                                        (0268) ;     Sets the start bit and parity in the Control register of this user module.
                                        (0269) ;-----------------------------------------------------------------------------
                                        (0270) ;
                                        (0271) ;  ARGUMENTS:
                                        (0272) ;     BYTE bParity - parity setting for the Transmitter and receiver. Use defined masks.
                                        (0273) ;        Passed in the A register.
                                        (0274) ;
                                        (0275) ;  RETURNS:
                                        (0276) ;     none.
                                        (0277) ;
                                        (0278) ;  SIDE EFFECTS:
                                        (0279) ;    The A and X registers may be modified by this or future implementations
                                        (0280) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0281) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0282) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0283) ;    functions.
                                        (0284) ;
                                        (0285)  UART_1_Start:
                                        (0286) _UART_1_Start:
                                        (0287)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0288)    ; Note, Proxy Class 4 only if receive buffer used; otherwise Proxy Class 1.
                                        (0289) 
085F: 29 01    OR    A,0x1              (0290)    or    A, bfCONTROL_REG_START_BIT
0861: 60 2B    MOV   REG[0x2B],A        (0291)    mov   REG[UART_1_TX_CONTROL_REG], A
0863: 60 2F    MOV   REG[0x2F],A        (0292)    mov   REG[UART_1_RX_CONTROL_REG], A
                                        (0293) IF ( UART_1_RXBUF_ENABLE )
0865: 91 2A    CALL  _UART_1_CmdReset   (0294)    call  _UART_1_CmdReset
                                        (0295) ENDIF
                                        (0296)    RAM_EPILOGUE RAM_USE_CLASS_1
0867: 7F       RET                      (0297)    ret
                                        (0298) .ENDSECTION
                                        (0299) 
                                        (0300) 
                                        (0301) .SECTION
                                        (0302) ;-----------------------------------------------------------------------------
                                        (0303) ;  FUNCTION NAME: UART_1_Stop
                                        (0304) ;
                                        (0305) ;  DESCRIPTION:
                                        (0306) ;     Disables UART operation.
                                        (0307) ;-----------------------------------------------------------------------------
                                        (0308) ;
                                        (0309) ;  ARGUMENTS:
                                        (0310) ;     none.
                                        (0311) ;
                                        (0312) ;  RETURNS:
                                        (0313) ;     none.
                                        (0314) ;
                                        (0315) ;  SIDE EFFECTS:
                                        (0316) ;    The A and X registers may be modified by this or future implementations
                                        (0317) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0318) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0319) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0320) ;    functions.
                                        (0321) ;
                                        (0322)  UART_1_Stop:
                                        (0323) _UART_1_Stop:
                                        (0324)    RAM_PROLOGUE RAM_USE_CLASS_1
0868: 41 2B FE AND   REG[0x2B],0xFE     (0325)    and   REG[UART_1_TX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
086B: 41 2F FE AND   REG[0x2F],0xFE     (0326)    and   REG[UART_1_RX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                        (0327)    RAM_EPILOGUE RAM_USE_CLASS_1
086E: 7F       RET                      (0328)    ret
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) 
                                        (0332) .SECTION
                                        (0333) ;-----------------------------------------------------------------------------
                                        (0334) ;  FUNCTION NAME: UART_1_SendData
                                        (0335) ;
                                        (0336) ;  DESCRIPTION:
                                        (0337) ;     Initiates a transmission of data.
                                        (0338) ;-----------------------------------------------------------------------------
                                        (0339) ;
                                        (0340) ;  ARGUMENTS:
                                        (0341) ;     BYTE  TxData - data to transmit. PASSED in A register.
                                        (0342) ;
                                        (0343) ;  RETURNS:
                                        (0344) ;     none.
                                        (0345) ;
                                        (0346) ;  SIDE EFFECTS:
                                        (0347) ;    The A and X registers may be modified by this or future implementations
                                        (0348) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0349) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0350) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0351) ;    functions.
                                        (0352) ;
                                        (0353)  UART_1_SendData:
                                        (0354) _UART_1_SendData:
                                        (0355)    RAM_PROLOGUE RAM_USE_CLASS_1
086F: 60 29    MOV   REG[0x29],A        (0356)    mov REG[UART_1_TX_BUFFER_REG], A
                                        (0357)    RAM_EPILOGUE RAM_USE_CLASS_1
0871: 7F       RET                      (0358)    ret
                                        (0359) .ENDSECTION
                                        (0360) 
                                        (0361) 
                                        (0362) .SECTION
                                        (0363) ;-----------------------------------------------------------------------------
                                        (0364) ;  FUNCTION NAME: UART_1_bReadTxStatus
                                        (0365) ;
                                        (0366) ;  DESCRIPTION:
                                        (0367) ;     Reads the Tx Status bits in the Control/Status register.
                                        (0368) ;-----------------------------------------------------------------------------
                                        (0369) ;
                                        (0370) ;  ARGUMENTS:
                                        (0371) ;     none.
                                        (0372) ;
                                        (0373) ;  RETURNS:
                                        (0374) ;     BYTE  bTxStatus - transmit status data.  Use defined masks for detecting
                                        (0375) ;           status bits (returned in A)
                                        (0376) ;
                                        (0377) ;  SIDE EFFECTS:
                                        (0378) ;    The A and X registers may be modified by this or future implementations
                                        (0379) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0380) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0381) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0382) ;    functions.
                                        (0383) ;
                                        (0384)  UART_1_bReadTxStatus:
                                        (0385) _UART_1_bReadTxStatus:
                                        (0386)  bUART_1_ReadTxStatus:                           ; For backwards compatibility only
                                        (0387) _bUART_1_ReadTxStatus:                           ; For backwards compatibility only
                                        (0388)    RAM_PROLOGUE RAM_USE_CLASS_1
0872: 5D 2B    MOV   A,REG[0x2B]        (0389)    mov A,  REG[UART_1_TX_CONTROL_REG]
                                        (0390)    RAM_EPILOGUE RAM_USE_CLASS_1
0874: 7F       RET                      (0391)    ret
                                        (0392) .ENDSECTION
                                        (0393) 
                                        (0394) 
                                        (0395) .SECTION
                                        (0396) ;-----------------------------------------------------------------------------
                                        (0397) ;  FUNCTION NAME: UART_1_bReadRxData
                                        (0398) ;
                                        (0399) ;  DESCRIPTION:
                                        (0400) ;     Reads the RX buffer register.  Should check the status regiser to make
                                        (0401) ;     sure data is valid.
                                        (0402) ;-----------------------------------------------------------------------------
                                        (0403) ;
                                        (0404) ;  ARGUMENTS:
                                        (0405) ;     none.
                                        (0406) ;
                                        (0407) ;  RETURNS:
                                        (0408) ;     bRxData - returned in A.
                                        (0409) ;
                                        (0410) ;  SIDE EFFECTS:
                                        (0411) ;    The A and X registers may be modified by this or future implementations
                                        (0412) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0413) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0414) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0415) ;    functions.
                                        (0416) ;
                                        (0417)  UART_1_bReadRxData:
                                        (0418) _UART_1_bReadRxData:
                                        (0419)  bUART_1_ReadRxData:                             ; For backwards compatibility only
                                        (0420) _bUART_1_ReadRxData:                             ; For backwards compatibility only
                                        (0421)    RAM_PROLOGUE RAM_USE_CLASS_1
0875: 5D 2E    MOV   A,REG[0x2E]        (0422)    mov A, REG[UART_1_RX_BUFFER_REG]
                                        (0423)    RAM_EPILOGUE RAM_USE_CLASS_1
0877: 7F       RET                      (0424)    ret
                                        (0425) .ENDSECTION
                                        (0426) 
                                        (0427) 
                                        (0428) .SECTION
                                        (0429) ;-----------------------------------------------------------------------------
                                        (0430) ;  FUNCTION NAME: UART_1_bReadRxStatus
                                        (0431) ;
                                        (0432) ;  DESCRIPTION:
                                        (0433) ;     Reads the RX Status bits in the Control/Status register.
                                        (0434) ;-----------------------------------------------------------------------------
                                        (0435) ;
                                        (0436) ;  ARGUMENTS:
                                        (0437) ;     none.
                                        (0438) ;
                                        (0439) ;  RETURNS:
                                        (0440) ;     BYTE  bRXStatus - receive status data.  Use the following defined bits
                                        (0441) ;                       masks: RX_COMPLETE and RX_BUFFER_EMPTY
                                        (0442) ;           returned in A.
                                        (0443) ;
                                        (0444) ;  SIDE EFFECTS:
                                        (0445) ;    The A and X registers may be modified by this or future implementations
                                        (0446) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0447) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0448) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0449) ;    functions.
                                        (0450) ;
                                        (0451)  UART_1_bReadRxStatus:
                                        (0452) _UART_1_bReadRxStatus:
                                        (0453)  bUART_1_ReadRxStatus:                           ; For backwards compatibility only
                                        (0454) _bUART_1_ReadRxStatus:                           ; For backwards compatibility only
                                        (0455)    RAM_PROLOGUE RAM_USE_CLASS_1
0878: 5D 2F    MOV   A,REG[0x2F]        (0456)    mov A,  REG[UART_1_RX_CONTROL_REG]
                                        (0457)    RAM_EPILOGUE RAM_USE_CLASS_1
087A: 7F       RET                      (0458)    ret
                                        (0459) .ENDSECTION
                                        (0460) 
                                        (0461) 
                                        (0462) .SECTION
                                        (0463) ;-----------------------------------------------------------------------------
                                        (0464) ;  FUNCTION NAME: UART_1_TxIntMode
                                        (0465) ;
                                        (0466) ;  DESCRIPTION:
                                        (0467) ;     This function is used to change the TX Interrupt mode.
                                        (0468) ;-----------------------------------------------------------------------------
                                        (0469) ;
                                        (0470) ;  ARGUMENTS:
                                        (0471) ;     A => Tx Interrupt mode
                                        (0472) ;             0 => Interrupt on TX_Reg_Empty  (Default)
                                        (0473) ;             1 => Interrupt on TX Complete
                                        (0474) ;
                                        (0475) ;  RETURNS:
                                        (0476) ;     none.
                                        (0477) ;
                                        (0478) ;  SIDE EFFECTS:
                                        (0479) ;    The A and X registers may be modified by this or future implementations
                                        (0480) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0481) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0482) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0483) ;    functions.
                                        (0484) ;
                                        (0485)  UART_1_TxIntMode:
                                        (0486) _UART_1_TxIntMode:
                                        (0487)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0488) 
087B: 21 01    AND   A,0x1              (0489)    and  A,UART_1_INT_MODE_TX_COMPLETE
087D: 71 10    OR    F,0x10             
                                        (0490)    M8C_SetBank1
087F: 39 01    CMP   A,0x1              (0491)    cmp  A,UART_1_INT_MODE_TX_COMPLETE
0881: A0 06    JZ    0x0888             (0492)    jz   .SetTxCmpMode
                                        (0493) 
0883: 41 28 EF AND   REG[0x28],0xEF     (0494)    and  reg[UART_1_TX_FUNC_REG],0xEF             ; Set Interrupt on Tx_Reg_Empty
0886: 80 04    JMP   0x088B             (0495)    jmp  .TxIntMode_End
                                        (0496) 
                                        (0497) .SetTxCmpMode:                                       ; Set Interrupt on TX Complete
0888: 43 28 10 OR    REG[0x28],0x10     (0498)    or   reg[UART_1_TX_FUNC_REG],0x10
088B: 70 EF    AND   F,0xEF             
                                        (0499) 
                                        (0500) .TxIntMode_End:
                                        (0501)    M8C_SetBank0
                                        (0502)    RAM_EPILOGUE RAM_USE_CLASS_1
088D: 7F       RET                      (0503)    ret
                                        (0504) .ENDSECTION
                                        (0505) 
                                        (0506)     
                                        (0507) .SECTION
                                        (0508) ;-----------------------------------------------------------------------------
                                        (0509) ;  FUNCTION NAME: UART_1_IntCntl
                                        (0510) ;
                                        (0511) ;  DESCRIPTION:
                                        (0512) ;     This function is used to enable/disable the Rx and Tx interrupt.
                                        (0513) ;-----------------------------------------------------------------------------
                                        (0514) ;
                                        (0515) ;  ARGUMENTS:
                                        (0516) ;     A => Interrupt mask
                                        (0517) ;
                                        (0518) ;  RETURNS:
                                        (0519) ;     none.
                                        (0520) ;
                                        (0521) ;  SIDE EFFECTS:
                                        (0522) ;    The A and X registers may be modified by this or future implementations
                                        (0523) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0524) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0525) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0526) ;    functions.
                                        (0527) ;
                                        (0528) ;  THEORY of OPERATION or PROCEDURE:
                                        (0529) ;     Set or Clears the Tx/Rx user module interrupt enable mask bit in the TX
                                        (0530) ;     and RX block.
                                        (0531) ;
                                        (0532)  UART_1_IntCntl:
                                        (0533) _UART_1_IntCntl:
                                        (0534)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0535) 
088E: 08       PUSH  A                  (0536)    push A
088F: 21 01    AND   A,0x1              (0537)    and  A,UART_1_ENABLE_RX_INT
0891: A0 06    JZ    0x0898             (0538)    jz   .DisRxInt
0893: 43 E1 08 OR    REG[0xE1],0x8      
                                        (0539)      ; Enable Rx Interrupt
                                        (0540)    M8C_EnableIntMask UART_1_RX_INT_REG, UART_1_RX_INT_MASK
0896: 80 04    JMP   0x089B             (0541)    jmp  .CheckTxInt
0898: 41 E1 F7 AND   REG[0xE1],0xF7     
                                        (0542) .DisRxInt:
                                        (0543)      ; Disable Rx Interrupt
                                        (0544)    M8C_DisableIntMask UART_1_RX_INT_REG, UART_1_RX_INT_MASK
                                        (0545) 
                                        (0546) .CheckTxInt:
089B: 18       POP   A                  (0547)    pop  A
089C: 21 02    AND   A,0x2              (0548)    and  A,UART_1_ENABLE_TX_INT
089E: A0 06    JZ    0x08A5             (0549)    jz   .DisTxInt
08A0: 43 E1 04 OR    REG[0xE1],0x4      
                                        (0550)      ; Enable Tx Interrupt
                                        (0551)    M8C_EnableIntMask UART_1_TX_INT_REG, UART_1_TX_INT_MASK
08A3: 80 04    JMP   0x08A8             (0552)    jmp  .End_IntCntl
08A5: 41 E1 FB AND   REG[0xE1],0xFB     
                                        (0553) .DisTxInt:
                                        (0554)      ; Disable Tx Interrupt
                                        (0555)    M8C_DisableIntMask UART_1_TX_INT_REG, UART_1_TX_INT_MASK
                                        (0556) 
                                        (0557) .End_IntCntl:
                                        (0558)    RAM_EPILOGUE RAM_USE_CLASS_1
08A8: 7F       RET                      (0559)    ret
                                        (0560) .ENDSECTION
                                        (0561) 
                                        (0562) 
                                        (0563) ;=============================================================================
                                        (0564) ;=============================================================================
                                        (0565) ;
                                        (0566) ;     High-Level Commands
                                        (0567) ;
                                        (0568) ;=============================================================================
                                        (0569) ;=============================================================================
                                        (0570) 
                                        (0571) 
                                        (0572) ;-----------------------------------------------------------------------------
                                        (0573) ;  FUNCTION NAME: UART_1_PutSHexByte
                                        (0574) ;
                                        (0575) ;  DESCRIPTION:
                                        (0576) ;     Print a byte in Hex (two characters) to the UART Tx
                                        (0577) ;-----------------------------------------------------------------------------
                                        (0578) ;
                                        (0579) ;  ARGUMENTS:
                                        (0580) ;     A  => (BYTE) Data/char to be printed
                                        (0581) ;
                                        (0582) ;  RETURNS:
                                        (0583) ;     none.
                                        (0584) ;
                                        (0585) ;  SIDE EFFECTS:
                                        (0586) ;    The A and X registers may be modified by this or future implementations
                                        (0587) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0588) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0589) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0590) ;    functions.
                                        (0591) ;
                                        (0592) .LITERAL
                                        (0593) UART_1_HEX_STR:
                                        (0594)      DS    "0123456789ABCDEF"
                                        (0595) .ENDLITERAL
                                        (0596) 
                                        (0597) .SECTION
                                        (0598)  UART_1_PutSHexByte:
                                        (0599) _UART_1_PutSHexByte:
                                        (0600)    RAM_PROLOGUE RAM_USE_CLASS_1
08B9: 08       PUSH  A                  (0601)    push  A                             ; Save lower nibble
08BA: 67       ASR   A                  (0602)    asr   A                             ; Shift high nibble to right
08BB: 67       ASR   A                  (0603)    asr   A
08BC: 67       ASR   A                  (0604)    asr   A
08BD: 67       ASR   A                  (0605)    asr   A
08BE: 21 0F    AND   A,0xF              (0606)    and   A,0Fh                         ; Mask off nibble
08C0: FF E7    INDEX 0x08A9             (0607)    index UART_1_HEX_STR                ; Get Hex value
08C2: 90 0F    CALL  _UART_1_PutChar    (0608)    call  UART_1_PutChar                ; Write data to screen
08C4: 18       POP   A                  (0609)    pop   A                             ; Restore value
08C5: 21 0F    AND   A,0xF              (0610)    and   A,0Fh                         ; Mask off lower nibble
08C7: FF E0    INDEX 0x08A9             (0611)    index UART_1_HEX_STR                ; Get Hex value
08C9: 90 08    CALL  _UART_1_PutChar    (0612)    call  UART_1_PutChar                ; Write data to screen
                                        (0613)    RAM_EPILOGUE RAM_USE_CLASS_1
08CB: 7F       RET                      (0614)    ret
                                        (0615) .ENDSECTION
                                        (0616) 
                                        (0617) 
                                        (0618) .SECTION
                                        (0619) ;-----------------------------------------------------------------------------
                                        (0620) ;  FUNCTION NAME: UART_1_PutSHexInt
                                        (0621) ;
                                        (0622) ;  DESCRIPTION:
                                        (0623) ;     Print an Int in Hex (four characters) to UART Tx
                                        (0624) ;-----------------------------------------------------------------------------
                                        (0625) ;
                                        (0626) ;  ARGUMENTS:
                                        (0627) ;     Pointer to string
                                        (0628) ;     A  => ASB of Int
                                        (0629) ;     X  => MSB of Int
                                        (0630) ;
                                        (0631) ;  RETURNS:
                                        (0632) ;     none.
                                        (0633) ;
                                        (0634) ;  SIDE EFFECTS:
                                        (0635) ;    The A and X registers may be modified by this or future implementations
                                        (0636) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0637) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0638) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0639) ;    functions.
                                        (0640) ;
                                        (0641) 
                                        (0642)  UART_1_PutSHexInt:
                                        (0643) _UART_1_PutSHexInt:
                                        (0644)    RAM_PROLOGUE RAM_USE_CLASS_1
08CC: 4B       SWAP  A,X                (0645)    swap  A,X
08CD: 9F EA    CALL  _UART_1_PutSHexByte(0646)    call  UART_1_PutSHexByte            ; Print MSB
08CF: 5B       MOV   A,X                (0647)    mov   A,X                           ; Move LSB into position
08D0: 9F E7    CALL  _UART_1_PutSHexByte(0648)    call  UART_1_PutSHexByte            ; Print LSB
                                        (0649)    RAM_EPILOGUE RAM_USE_CLASS_1
08D2: 7F       RET                      (0650)    ret
08D3: 49 2B 10 TST   REG[0x2B],0x10     
08D6: AF FC    JZ    _UART_1_PutChar    
08D8: 60 29    MOV   REG[0x29],A        
                                        (0651) .ENDSECTION
                                        (0652) 
                                        (0653) 
                                        (0654) .SECTION
                                        (0655) ;-----------------------------------------------------------------------------
                                        (0656) ;  FUNCTION NAME: UART_1_PutChar
                                        (0657) ;
                                        (0658) ;  DESCRIPTION:
                                        (0659) ;     Send character out through UART TX port.
                                        (0660) ;-----------------------------------------------------------------------------
                                        (0661) ;
                                        (0662) ;  ARGUMENTS:
                                        (0663) ;     A has Character to send to UART Tx Port
                                        (0664) ;
                                        (0665) ;  RETURNS:
                                        (0666) ;     none
                                        (0667) ;
                                        (0668) ;  SIDE EFFECTS:
                                        (0669) ;    The A and X registers may be modified by this or future implementations
                                        (0670) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0671) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0672) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0673) ;    functions.
                                        (0674) ;
                                        (0675) 
                                        (0676)    macro InLinePutChar( Source )
                                        (0677) .BufEmptyWaitLoop:
                                        (0678)    tst REG[UART_1_TX_CONTROL_REG], UART_1_TX_BUFFER_EMPTY     ; Check Tx Status
                                        (0679)    jz  .BufEmptyWaitLoop
                                        (0680)    mov REG[UART_1_TX_BUFFER_REG], @Source        ; Write data to Tx Port
                                        (0681)    endm
                                        (0682) 
                                        (0683)  UART_1_PutChar:
                                        (0684) _UART_1_PutChar:
                                        (0685)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0686)    InLinePutChar A
                                        (0687)    RAM_EPILOGUE RAM_USE_CLASS_1
08DA: 7F       RET                      (0688)    ret
                                        (0689) .ENDSECTION
                                        (0690) 
                                        (0691) 
                                        (0692) .SECTION
                                        (0693) ;-----------------------------------------------------------------------------
                                        (0694) ;  FUNCTION NAME: UART_1_cGetChar
                                        (0695) ;
                                        (0696) ;  DESCRIPTION:
                                        (0697) ;     Read character from UART RX port.
                                        (0698) ;-----------------------------------------------------------------------------
                                        (0699) ;
                                        (0700) ;  ARGUMENTS:
                                        (0701) ;      none
                                        (0702) ;
                                        (0703) ;  RETURNS:
                                        (0704) ;     char that is returned from UART
                                        (0705) ;
                                        (0706) ;  SIDE EFFECTS:
                                        (0707) ;    The A and X registers may be modified by this or future implementations
                                        (0708) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0709) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0710) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0711) ;    functions.
                                        (0712) ;
                                        (0713) ;    Program flow will stay in this function until a character is received.
                                        (0714) ;    If the watchdog timer is used, care must be taken to make sure that
                                        (0715) ;    the delay between characters is less than the watchdog timeout.
                                        (0716) ;
                                        (0717)  UART_1_cGetChar:
                                        (0718) _UART_1_cGetChar:
                                        (0719)    RAM_PROLOGUE RAM_USE_CLASS_1
08DB: 49 2F 08 TST   REG[0x2F],0x8      (0720)    tst REG[UART_1_RX_CONTROL_REG],UART_1_RX_REG_FULL    ; Check if a character is ready
08DE: AF FC    JZ    _UART_1_cGetChar   (0721)    jz  UART_1_cGetChar                              ; If not loop
08E0: 5D 2E    MOV   A,REG[0x2E]        (0722)    mov A, REG[UART_1_RX_BUFFER_REG]                 ; Get character
                                        (0723)    RAM_EPILOGUE RAM_USE_CLASS_1
08E2: 7F       RET                      (0724)    ret
                                        (0725) .ENDSECTION
                                        (0726) 
                                        (0727) 
                                        (0728) .SECTION
                                        (0729) ;-----------------------------------------------------------------------------
                                        (0730) ;  FUNCTION NAME: UART_1_cReadChar
                                        (0731) ;
                                        (0732) ;  DESCRIPTION:
                                        (0733) ;     Read character from UART RX port.
                                        (0734) ;-----------------------------------------------------------------------------
                                        (0735) ;
                                        (0736) ;  ARGUMENTS:
                                        (0737) ;      none
                                        (0738) ;
                                        (0739) ;  RETURNS:
                                        (0740) ;     char that is returned from UART
                                        (0741) ;
                                        (0742) ;  SIDE EFFECTS:
                                        (0743) ;    The A and X registers may be modified by this or future implementations
                                        (0744) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0745) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0746) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0747) ;    functions.
                                        (0748) ;
                                        (0749) ;    A valid 0x00 character will be ignored, since a 0x00 return value
                                        (0750) ;    implies a valid character or an error condition occured.
                                        (0751) ;
                                        (0752)  UART_1_cReadChar:
                                        (0753) _UART_1_cReadChar:
                                        (0754)    RAM_PROLOGUE RAM_USE_CLASS_1
08E3: 5D 2F    MOV   A,REG[0x2F]        (0755)    mov  A,REG[UART_1_RX_CONTROL_REG]                       ; Get Status of RX
08E5: 08       PUSH  A                  (0756)    push A
08E6: 21 08    AND   A,0x8              (0757)    and  A,UART_1_RX_COMPLETE                               ; Check if a character is ready
08E8: B0 04    JNZ   0x08ED             (0758)    jnz  .RX_DATA_RDY                                       ; Data Ready go read it.
08EA: 18       POP   A                  (0759)    pop  A
08EB: 80 0B    JMP   0x08F7             (0760)    jmp  .RX_NO_VALID_CHAR
                                        (0761) 
                                        (0762) .RX_DATA_RDY:
08ED: 5D 2E    MOV   A,REG[0x2E]        (0763)    mov  A,REG[UART_1_RX_BUFFER_REG ]          
08EF: 4B       SWAP  A,X                (0764)    swap A,X                                                ; determine if data is valid
                                        (0765) 
08F0: 18       POP   A                  (0766)    pop  A                                                  ; Check for errors
08F1: 21 A0    AND   A,0xA0             (0767)    and  A,(UART_1_RX_PARITY_ERROR | UART_1_RX_FRAMING_ERROR)
08F3: B0 03    JNZ   0x08F7             (0768)    jnz  .RX_NO_VALID_CHAR                                  ; No character, exit
08F5: 4B       SWAP  A,X                (0769)    swap A,X                                                ; Put data in A and exit
                                        (0770)    RAM_EPILOGUE RAM_USE_CLASS_1
08F6: 7F       RET                      (0771)    ret
                                        (0772) 
                                        (0773) .RX_NO_VALID_CHAR:
08F7: 50 00    MOV   A,0x0              (0774)    mov A,0x00                                              ; Zero out character
                                        (0775) 
                                        (0776)  End_UART_1_cReadChar:
                                        (0777)    RAM_EPILOGUE RAM_USE_CLASS_1
08F9: 7F       RET                      (0778)    ret
                                        (0779) .ENDSECTION
                                        (0780) 
                                        (0781) 
                                        (0782) .SECTION
                                        (0783) ;-----------------------------------------------------------------------------
                                        (0784) ;  FUNCTION NAME: UART_1_iReadChar
                                        (0785) ;
                                        (0786) ;  WARNING WARNING WARNING  Negative return value not correct!!!!  We may want
                                        (0787) ;  to just set a value in the upper byte if error conditions exists.
                                        (0788) ;
                                        (0789) ;  DESCRIPTION:
                                        (0790) ;     Read character from UART RX port.
                                        (0791) ;-----------------------------------------------------------------------------
                                        (0792) ;
                                        (0793) ;  ARGUMENTS:
                                        (0794) ;      none
                                        (0795) ;
                                        (0796) ;  RETURNS:
                                        (0797) ;     An integer value is returned.  A negative value inplies and error
                                        (0798) ;     condition, a positive value between 0 and 255 is the return character.
                                        (0799) ;
                                        (0800) ;     Error Codes:
                                        (0801) ;        0x80CC    Parity Error
                                        (0802) ;        0x40CC    Overrun Error
                                        (0803) ;        0x20CC    Framing Error
                                        (0804) ;        0x01CC    No Data available
                                        (0805) ;
                                        (0806) ;  SIDE EFFECTS:
                                        (0807) ;    The A and X registers may be modified by this or future implementations
                                        (0808) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0809) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0810) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0811) ;    functions.
                                        (0812) ;
                                        (0813)  UART_1_iReadChar:
                                        (0814) _UART_1_iReadChar:
                                        (0815)    RAM_PROLOGUE RAM_USE_CLASS_1
08FA: 5D 2F    MOV   A,REG[0x2F]        (0816)    mov  A,REG[UART_1_RX_CONTROL_REG]                       ; Get Status of RX
                                        (0817)                                                            ; Mask only errors and data ready
08FC: 21 E8    AND   A,0xE8             (0818)    and  A,(UART_1_RX_ERROR|UART_1_RX_REG_FULL)
08FE: 08       PUSH  A                  (0819)    push A
08FF: 21 08    AND   A,0x8              (0820)    and  A,UART_1_RX_COMPLETE                               ; Check if a character is ready
0901: B0 07    JNZ   0x0909             (0821)    jnz  .RX_GET_DATA                                       ; Data Ready go read it.
0903: 18       POP   A                  (0822)    pop  A
0904: 29 01    OR    A,0x1              (0823)    or   A,UART_1_RX_NO_DATA                                ; Add no data flag
0906: 4B       SWAP  A,X                (0824)    swap A,X
0907: 80 07    JMP   0x090F             (0825)    jmp  End_UART_1_iReadChar
                                        (0826) 
                                        (0827) .RX_GET_DATA:
0909: 18       POP   A                  (0828)    pop  A
090A: 21 E0    AND   A,0xE0             (0829)    and  A,UART_1_RX_ERROR
090C: 4B       SWAP  A,X                (0830)    swap A,X
090D: 5D 2E    MOV   A,REG[0x2E]        (0831)    mov  A,REG[UART_1_RX_BUFFER_REG ]                       ; Read data first, then
                                        (0832)                                                            ; determine if data is valid
                                        (0833) 
                                        (0834)  End_UART_1_iReadChar:
                                        (0835)    RAM_EPILOGUE RAM_USE_CLASS_1
090F: 7F       RET                      (0836)    ret
0910: 70 BF    AND   F,0xBF             
0912: 60 D3    MOV   REG[0xD3],A        
                                        (0837) .ENDSECTION
                                        (0838) 
                                        (0839) 
                                        (0840) .SECTION
                                        (0841) ;-----------------------------------------------------------------------------
                                        (0842) ;  FUNCTION NAME: UART_1_PutString
                                        (0843) ;
                                        (0844) ;  DESCRIPTION:
                                        (0845) ;     Send String out through UART TX port.
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS:
                                        (0849) ;     Pointer to String
                                        (0850) ;     A has MSB of string address
                                        (0851) ;     X has LSB of string address
                                        (0852) ;
                                        (0853) ;  RETURNS:
                                        (0854) ;     none
                                        (0855) ;
                                        (0856) ;  SIDE EFFECTS:
                                        (0857) ;    The A and X registers may be modified by this or future implementations
                                        (0858) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0859) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0860) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0861) ;    functions.
                                        (0862) ;          
                                        (0863) ;    Currently only the page pointer registers listed below are modified: 
                                        (0864) ;          IDX_PP
                                        (0865) ;
                                        (0866)  UART_1_PutString:
                                        (0867) _UART_1_PutString:
                                        (0868)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0869)    RAM_SETPAGE_IDX A
                                        (0870) .PutStringLoop:
0914: 52 00    MOV   A,[X+0]            (0871)    mov   A,[X]                                   ; Get value pointed to by X
0916: A0 06    JZ    0x091D             (0872)    jz    End_PutString                           ; Check for end of string
0918: 9F B9    CALL  _UART_1_PutChar    (0873)    call  UART_1_PutChar                          ; Send character to Tx port
091A: 75       INC   X                  (0874)    inc   X                                       ; Advance pointer to next character
091B: 8F F8    JMP   0x0914             (0875)    jmp   .PutStringLoop                          ; Get next character
091D: 70 3F    AND   F,0x3F             
091F: 71 C0    OR    F,0xC0             
                                        (0876) 
                                        (0877) End_PutString:
                                        (0878)    RAM_EPILOGUE RAM_USE_CLASS_3
0921: 7F       RET                      (0879)    ret
0922: 70 BF    AND   F,0xBF             
0924: 62 D3 07 MOV   REG[0xD3],0x7      
                                        (0880) .ENDSECTION
                                        (0881)     
                                        (0882) .SECTION
                                        (0883) ;-----------------------------------------------------------------------------
                                        (0884) ;  FUNCTION NAME: UART_1_Write
                                        (0885) ;
                                        (0886) ;  DESCRIPTION:
                                        (0887) ;     Send String of length X to serial port
                                        (0888) ;-----------------------------------------------------------------------------
                                        (0889) ;
                                        (0890) ;  ARGUMENTS:
                                        (0891) ;     Pointer to String
                                        (0892) ;     [SP-5] Count of characters to send
                                        (0893) ;     [SP-4] has MSB of string address
                                        (0894) ;     [SP-3] has LSB of string address
                                        (0895) ;
                                        (0896) ;  RETURNS:
                                        (0897) ;     none
                                        (0898) ;
                                        (0899) ;  SIDE EFFECTS:
                                        (0900) ;    The A and X registers may be modified by this or future implementations
                                        (0901) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0902) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0903) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0904) ;    functions.
                                        (0905) ;          
                                        (0906) ;    Currently only the page pointer registers listed below are modified: 
                                        (0907) ;          IDX_PP
                                        (0908) ;
                                        (0909) CNT_LEN:    equ -5                               ; Length of data to send
                                        (0910) STR_MSB:    equ -4                               ; MSB pointer of string 
                                        (0911) STR_LSB:    equ -3                               ; LSB pointer of string 
                                        (0912) 
                                        (0913)  UART_1_Write:
                                        (0914) _UART_1_Write:
                                        (0915)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0916)    RAM_SETPAGE_IDX2STK                           ; Refer indexed addrs to the stack
0927: 4F       MOV   X,SP               (0917)    mov   X, SP                                   ; Establish the frame pointer 
                                        (0918) 
                                        (0919) .NextByteLoop:
0928: 52 FB    MOV   A,[X-5]            (0920)    mov   A, [X+CNT_LEN]                          ; End of the string?
092A: A0 1A    JZ    0x0945             (0921)    jz    .End_Write                              ;   Yes, prepare to exit
092C: 7B FB    DEC   [X-5]              (0922)    dec   [X+CNT_LEN]                             ; Decrement counter
                                        (0923) 
                                        (0924)    IF SYSTEM_LARGE_MEMORY_MODEL
092E: 52 FC    MOV   A,[X-4]            (0925)    mov   A, [X+STR_MSB]                          ; Load pointer to char to send
                                        (0926)    ENDIF
                                        (0927) 
0930: 59 FD    MOV   X,[X-3]            (0928)    mov   X, [X+STR_LSB]                          ; Load pointer to char to send
0932: 60 D3    MOV   REG[0xD3],A        
                                        (0929)    RAM_SETPAGE_IDX A                             ; switch index pages
0934: 52 00    MOV   A,[X+0]            (0930)    mov   A, [X]                                  ; Grab the data
0936: 49 2B 10 TST   REG[0x2B],0x10     
0939: AF FC    JZ    0x0936             
093B: 60 29    MOV   REG[0x29],A        
                                        (0931)    InLinePutChar A                               ; Put data in empty TX buf reg
093D: 4F       MOV   X,SP               (0932)    mov   X, SP                                   ; Recover frame pointer
093E: 62 D3 07 MOV   REG[0xD3],0x7      
                                        (0933)    RAM_SETPAGE_IDX2STK                           ; Prepare for stack access
0941: 77 FD    INC   [X-3]              (0934)    inc   [X+STR_LSB]                             ; Point to next byte, but do not
0943: 8F E4    JMP   0x0928             (0935)    jmp   .NextByteLoop                           ;    cross RAM page boundary!
0945: 70 3F    AND   F,0x3F             
0947: 71 C0    OR    F,0xC0             
                                        (0936) 
                                        (0937) .End_Write:
                                        (0938)    RAM_EPILOGUE RAM_USE_CLASS_3
0949: 7F       RET                      (0939)    ret
                                        (0940) .ENDSECTION
                                        (0941)     
                                        (0942) 
                                        (0943) .SECTION
                                        (0944) ;-----------------------------------------------------------------------------
                                        (0945) ;  FUNCTION NAME: UART_1_CWrite
                                        (0946) ;
                                        (0947) ;             WARNING WARNING NOT COMPLETE
                                        (0948) ;
                                        (0949) ;  DESCRIPTION:
                                        (0950) ;     Send String of length X to serial port
                                        (0951) ;-----------------------------------------------------------------------------
                                        (0952) ;
                                        (0953) ;  ARGUMENTS:
                                        (0954) ;     [SP-4] MSB of Count of character to send
                                        (0955) ;     [SP-3] LSB of Count of character to send
                                        (0956) ;     [SP-2] has MSB of string address
                                        (0957) ;     [SP-1] has LSB of string address
                                        (0958) ;
                                        (0959) ;  RETURNS:
                                        (0960) ;     none
                                        (0961) ;
                                        (0962) ;  SIDE EFFECTS:
                                        (0963) ;    The A and X registers may be modified by this or future implementations
                                        (0964) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0965) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0966) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0967) ;    functions.
                                        (0968) ;
                                        (0969) CLEN_MSB:   equ -6           ; MSB Length of data to send
                                        (0970) CLEN_LSB:   equ -5           ; LSB Length of data to send
                                        (0971) CSTR_MSB:   equ -4           ; MSB pointer of string
                                        (0972) CSTR_LSB:   equ -3           ; LSB pointer of string
                                        (0973) 
                                        (0974)  UART_1_CWrite:
                                        (0975) _UART_1_CWrite:
                                        (0976)    RAM_PROLOGUE RAM_USE_CLASS_2
094A: 4F       MOV   X,SP               (0977)    mov   X,SP
                                        (0978) .CW_Loop:
094B: 3D FA 00 CMP   [X-6],0x0          (0979)    cmp   [X+CLEN_MSB],0x00                  ; Check for zero counter
094E: B0 06    JNZ   0x0955             (0980)    jnz   .CW_WRITEIT
0950: 3D FB 00 CMP   [X-5],0x0          (0981)    cmp   [X+CLEN_LSB],0x00
0953: A0 1D    JZ    0x0971             (0982)    jz    .End_CWrite                        ; Leave if done
                                        (0983) 
                                        (0984) .CW_WRITEIT:                                
0955: 10       PUSH  X                  (0985)    push  X                                  ; Save frame pointer
0956: 52 FC    MOV   A,[X-4]            (0986)    mov   A,[X+CSTR_MSB]
0958: 59 FD    MOV   X,[X-3]            (0987)    mov   X,[X+CSTR_LSB]
095A: 28       ROMX                     (0988)    romx                                     ; Get character from ROM
095B: 49 2B 10 TST   REG[0x2B],0x10     
095E: AF FC    JZ    0x095B             
0960: 60 29    MOV   REG[0x29],A        
                                        (0989)    InLinePutChar A                          ; Put data in empty TX buf reg
0962: 20       POP   X                  (0990)    pop   X                                  ; Restore frame pointer
0963: 07 FD 01 ADD   [X-3],0x1          (0991)    add   [X+CSTR_LSB],1                     ; Increment the string pointer
0966: 0F FC 00 ADC   [X-4],0x0          (0992)    adc   [X+CSTR_MSB],0
0969: 17 FB 01 SUB   [X-5],0x1          (0993)    sub   [X+CLEN_LSB],0x01                  ; Dec the counter
096C: 1F FA 00 SBB   [X-6],0x0          (0994)    sbb   [X+CLEN_MSB],0x00
096F: 8F DB    JMP   0x094B             (0995)    jmp   .CW_Loop
0971: 70 3F    AND   F,0x3F             
0973: 71 C0    OR    F,0xC0             
                                        (0996) 
                                        (0997) .End_CWrite:
                                        (0998)    RAM_EPILOGUE RAM_USE_CLASS_2
0975: 7F       RET                      (0999)    ret
                                        (1000) .ENDSECTION
                                        (1001) 
                                        (1002) 
                                        (1003) .SECTION
                                        (1004) ;-----------------------------------------------------------------------------
                                        (1005) ;  FUNCTION NAME: UART_1_CPutString
                                        (1006) ;
                                        (1007) ;  DESCRIPTION:
                                        (1008) ;     Send String out through UART TX port.
                                        (1009) ;-----------------------------------------------------------------------------
                                        (1010) ;
                                        (1011) ;  ARGUMENTS:
                                        (1012) ;     Pointer to String
                                        (1013) ;     A has MSB of string address
                                        (1014) ;     X has LSB of string address
                                        (1015) ;
                                        (1016) ;  RETURNS:
                                        (1017) ;     none
                                        (1018) ;
                                        (1019) ;  SIDE EFFECTS:
                                        (1020) ;    The A and X registers may be modified by this or future implementations
                                        (1021) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1022) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1023) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1024) ;    functions.
                                        (1025) ;
                                        (1026)  UART_1_CPutString:
                                        (1027) _UART_1_CPutString:
                                        (1028)    RAM_PROLOGUE RAM_USE_CLASS_1
0976: 08       PUSH  A                  (1029)    push  A                                       ; Store ROM pointer
0977: 10       PUSH  X                  (1030)    push  X
0978: 28       ROMX                     (1031)    romx                                          ; Get character from ROM
0979: A0 0B    JZ    0x0985             (1032)    jz    .End_CPutString
097B: 9F 56    CALL  _UART_1_PutChar    (1033)    call  UART_1_PutChar                          ; Print character
097D: 20       POP   X                  (1034)    pop   X
097E: 18       POP   A                  (1035)    pop   A
097F: 75       INC   X                  (1036)    inc   X                                       ; Inc LSB of pointer
0980: DF F5    JNC   _UART_1_CPutString (1037)    jnc   UART_1_CPutString                       ; Check for carry
0982: 74       INC   A                  (1038)    inc   A                                       ; Inc MSB of pointer
0983: 8F F2    JMP   _UART_1_CPutString (1039)    jmp   UART_1_CPutString
                                        (1040) 
                                        (1041) 
                                        (1042) .End_CPutString:
0985: 38 FE    ADD   SP,0xFE            (1043)    add   SP, -2
                                        (1044)    RAM_EPILOGUE RAM_USE_CLASS_1
0987: 7F       RET                      (1045)    ret
                                        (1046) .ENDSECTION
                                        (1047) 
                                        (1048) 
                                        (1049) .SECTION
                                        (1050) ;-----------------------------------------------------------------------------
                                        (1051) ;  FUNCTION NAME: UART_1_PutCRLF
                                        (1052) ;
                                        (1053) ;  DESCRIPTION:
                                        (1054) ;     Send a CR and LF
                                        (1055) ;-----------------------------------------------------------------------------
                                        (1056) ;
                                        (1057) ;  ARGUMENTS:
                                        (1058) ;     none.
                                        (1059) ;
                                        (1060) ;  RETURNS:
                                        (1061) ;     none.
                                        (1062) ;
                                        (1063) ;  SIDE EFFECTS:
                                        (1064) ;    The A and X registers may be modified by this or future implementations
                                        (1065) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1066) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1067) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1068) ;    functions.
                                        (1069) ;
                                        (1070)  UART_1_PutCRLF:
                                        (1071) _UART_1_PutCRLF:
                                        (1072)    RAM_PROLOGUE RAM_USE_CLASS_1
0988: 50 0D    MOV   A,0xD              (1073)    mov  A,0x0D                        ; Send CR
098A: 9F 47    CALL  _UART_1_PutChar    (1074)    call UART_1_PutChar
098C: 50 0A    MOV   A,0xA              (1075)    mov  A,0x0A                        ; Send LF
098E: 9F 43    CALL  _UART_1_PutChar    (1076)    call UART_1_PutChar
                                        (1077)    RAM_EPILOGUE RAM_USE_CLASS_1
0990: 7F       RET                      (1078)    ret
0991: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1079) .ENDSECTION
                                        (1080) 
                                        (1081) 
                                        (1082) IF (UART_1_RXBUF_ENABLE)
                                        (1083) ;=============================================================================
                                        (1084) ;=============================================================================
                                        (1085) ;
                                        (1086) ;     Command Buffer commands
                                        (1087) ;
                                        (1088) ;=============================================================================
                                        (1089) ;=============================================================================
                                        (1090) 
                                        (1091) .SECTION
                                        (1092) ;-----------------------------------------------------------------------------
                                        (1093) ;  FUNCTION NAME: UART_1_CmdReset
                                        (1094) ;
                                        (1095) ;  DESCRIPTION:
                                        (1096) ;     Reset command string and status flags
                                        (1097) ;-----------------------------------------------------------------------------
                                        (1098) ;
                                        (1099) ;  ARGUMENTS:
                                        (1100) ;     none.
                                        (1101) ;
                                        (1102) ;  RETURNS:
                                        (1103) ;     none.
                                        (1104) ;
                                        (1105) ;  SIDE EFFECTS:
                                        (1106) ;    The A and X registers may be modified by this or future implementations
                                        (1107) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1108) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1109) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1110) ;    functions.
                                        (1111) ;          
                                        (1112) ;    Currently only the page pointer registers listed below are modified: 
                                        (1113) ;          CUR_PP
                                        (1114) ;
                                        (1115) ;  THEORY of OPERATION or PROCEDURE:
                                        (1116) ;     Clear the command buffer, command counter, and flag.
                                        (1117) ;
                                        (1118)  UART_1_CmdReset:
                                        (1119) _UART_1_CmdReset:
                                        (1120)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1121)    RAM_SETPAGE_CUR >UART_1_aRxBuffer
0994: 55 04 00 MOV   [0x4],0x0          (1122)    mov [UART_1_aRxBuffer], 0x00
0997: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1123)    RAM_SETPAGE_CUR >UART_1_bRxCnt
099A: 55 03 00 MOV   [0x3],0x0          (1124)    mov [UART_1_bRxCnt], 0x00
099D: 26 02 00 AND   [0x2],0x0          (1125)    and [UART_1_fStatus], 0x00
09A0: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1126)    RAM_SETPAGE_CUR >ptrParam
09A3: 55 85 00 MOV   [data+7],0x0       (1127)    mov [ptrParam],0x00
                                        (1128)    RAM_EPILOGUE RAM_USE_CLASS_4
09A6: 7F       RET                      (1129)    ret
09A7: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1130) .ENDSECTION
                                        (1131) 
                                        (1132) 
                                        (1133) .SECTION
                                        (1134) ;-----------------------------------------------------------------------------
                                        (1135) ;  FUNCTION NAME: UART_1_bCmdCheck
                                        (1136) ;
                                        (1137) ;  DESCRIPTION:
                                        (1138) ;     Check to see if valid command in buffer.
                                        (1139) ;-----------------------------------------------------------------------------
                                        (1140) ;
                                        (1141) ;  ARGUMENTS:
                                        (1142) ;     none.
                                        (1143) ;
                                        (1144) ;  RETURNS:
                                        (1145) ;     BYTE  fStatus - Status of command receive buffer.
                                        (1146) ;                     Returns non-zero value in A if command is valid.
                                        (1147) ;
                                        (1148) ;  SIDE EFFECTS:
                                        (1149) ;    The A and X registers may be modified by this or future implementations
                                        (1150) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1151) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1152) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1153) ;    functions.
                                        (1154) ;          
                                        (1155) ;    Currently only the page pointer registers listed below are modified: 
                                        (1156) ;          CUR_PP
                                        (1157) ;
                                        (1158) ;  THEORY of OPERATION or PROCEDURE:
                                        (1159) ;     Read the status and control register.
                                        (1160) ;
                                        (1161)  UART_1_bCmdCheck:
                                        (1162) _UART_1_bCmdCheck:
                                        (1163)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1164)    RAM_SETPAGE_CUR >UART_1_fStatus
09AA: 51 02    MOV   A,[0x2]            (1165)    mov A,  [UART_1_fStatus]
09AC: 21 01    AND   A,0x1              (1166)    and A, UART_1_RX_BUF_CMDTERM                  ; Mask off Command status
                                        (1167)    RAM_EPILOGUE RAM_USE_CLASS_4
09AE: 7F       RET                      (1168)    ret
09AF: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1169) .ENDSECTION
                                        (1170)     
                                        (1171) 
                                        (1172) .SECTION
                                        (1173) ;-----------------------------------------------------------------------------
                                        (1174) ;  FUNCTION NAME: UART_1_bErrCheck
                                        (1175) ;
                                        (1176) ;  DESCRIPTION:
                                        (1177) ;     Check to see if an error has occured since last CmdReset
                                        (1178) ;-----------------------------------------------------------------------------
                                        (1179) ;
                                        (1180) ;  ARGUMENTS:
                                        (1181) ;     none.
                                        (1182) ;
                                        (1183) ;  RETURNS:
                                        (1184) ;     BYTE  fStatus - Status of command receive buffer.
                                        (1185) ;                     Returns non-zero value in A if command is valid.
                                        (1186) ;           0x80 => Parity Error
                                        (1187) ;           0x40 => OverRun Error
                                        (1188) ;           0x20 => Framing Error
                                        (1189) ;           0x10 => Software Buffer OverRun
                                        (1190) ;
                                        (1191) ;  SIDE EFFECTS:
                                        (1192) ;    The A and X registers may be modified by this or future implementations
                                        (1193) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1194) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1195) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1196) ;    functions.
                                        (1197) ;          
                                        (1198) ;    Currently only the page pointer registers listed below are modified: 
                                        (1199) ;          CUR_PP
                                        (1200) ;     Error Status is clear when read.
                                        (1201) ;
                                        (1202) ;  THEORY of OPERATION or PROCEDURE:
                                        (1203) ;     Read RX buffer error status and clear status
                                        (1204) ;
                                        (1205)  UART_1_bErrCheck:
                                        (1206) _UART_1_bErrCheck:
                                        (1207)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1208)    RAM_SETPAGE_CUR >UART_1_fStatus
09B2: 51 02    MOV   A,[0x2]            (1209)    mov A,  [UART_1_fStatus]
09B4: 21 F0    AND   A,0xF0             (1210)    and A, UART_1_RX_BUF_ERROR                    ; Mask off Error status
09B6: 26 02 0F AND   [0x2],0xF          (1211)    and [UART_1_fStatus], ~UART_1_RX_BUF_ERROR
                                        (1212)    RAM_EPILOGUE RAM_USE_CLASS_4
09B9: 7F       RET                      (1213)    ret
09BA: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1214) .ENDSECTION
                                        (1215) 
                                        (1216) .SECTION
                                        (1217) ;-----------------------------------------------------------------------------
                                        (1218) ;  FUNCTION NAME: UART_1_bCmdLength
                                        (1219) ;
                                        (1220) ;  DESCRIPTION:
                                        (1221) ;     Get length of command string
                                        (1222) ;-----------------------------------------------------------------------------
                                        (1223) ;
                                        (1224) ;  ARGUMENTS:
                                        (1225) ;     none.
                                        (1226) ;
                                        (1227) ;  RETURNS:
                                        (1228) ;     BYTE  bRxCnt    Returns the command length in A.
                                        (1229) ;
                                        (1230) ;  SIDE EFFECTS:
                                        (1231) ;    The A and X registers may be modified by this or future implementations
                                        (1232) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1233) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1234) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1235) ;    functions.
                                        (1236) ;          
                                        (1237) ;    Currently only the page pointer registers listed below are modified: 
                                        (1238) ;          CUR_PP
                                        (1239) ;
                                        (1240)  UART_1_bCmdLength:
                                        (1241) _UART_1_bCmdLength:
                                        (1242)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1243)    RAM_SETPAGE_CUR >UART_1_bRxCnt
09BD: 51 03    MOV   A,[0x3]            (1244)    mov A,  [UART_1_bRxCnt]
                                        (1245)    RAM_EPILOGUE RAM_USE_CLASS_4
09BF: 7F       RET                      (1246)    ret
09C0: 70 BF    AND   F,0xBF             
09C2: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1247) .ENDSECTION
                                        (1248) 
                                        (1249) 
                                        (1250) .SECTION
                                        (1251) ;-----------------------------------------------------------------------------
                                        (1252) ;  FUNCTION NAME: UART_1_szGetParam
                                        (1253) ;
                                        (1254) ;  DESCRIPTION:
                                        (1255) ;      Return next parameter from UART_1 Rx buffer
                                        (1256) ;-----------------------------------------------------------------------------
                                        (1257) ;
                                        (1258) ;  ARGUMENTS:  none
                                        (1259) ;
                                        (1260) ;  RETURNS:
                                        (1261) ;     A => MSB of parameter address
                                        (1262) ;     X => LSB of parameter address
                                        (1263) ;
                                        (1264) ;  SIDE EFFECTS:
                                        (1265) ;    The A and X registers may be modified by this or future implementations
                                        (1266) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1267) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1268) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1269) ;    functions.
                                        (1270) ;          
                                        (1271) ;    Currently only the page pointer registers listed below are modified: 
                                        (1272) ;          CUR_PP
                                        (1273) ;          IDX_PP
                                        (1274) ;
                                        (1275) ;     The receive string is modified by placing Null characters at the end
                                        (1276) ;     of each parameter as they are recovered.
                                        (1277) ;
                                        (1278) ;  THEORY OF OPERATION:
                                        (1279) ;     This function is a stateful generator of addresses to the "parameters"
                                        (1280) ;     of an input "Command". It scans the (optional) input buffer and breaks
                                        (1281) ;     each lexically distinct element into a null-terminated string by replacing
                                        (1282) ;     delimiters with nulls, as appropriate. The state of the generator is 
                                        (1283) ;     maintained by the private variable ptrParam, which is a buffer-relative
                                        (1284) ;     offset. The generator is initialized by a call to the function
                                        (1285) ;     UART_1_CmdReset which resets the entire buffer to the 'empty'
                                        (1286) ;     state. Typically this function, UART_1_szGetParam, is
                                        (1287) ;     not called until the buffer has been loaded with an entire command
                                        (1288) ;     (See UART_1_bCmdCheck).
                                        (1289) ;
                                        (1290) ;     Note, there is no special distinction between the "command" and the 
                                        (1291) ;     "parameters". The first non-delimiter character of the buffer---the first
                                        (1292) ;     character of the "command"---is also, for the purposes of this function,
                                        (1293) ;     the first "parameter" to which it returns an address.
                                        (1294) ;
                                        (1295) ;     The value of a delimiter (commonly an ascii space, 0x20 and decimal 32)
                                        (1296) ;     is determined at configuration time by a user module parameter.
                                        (1297) ;
                                        (1298)  UART_1_szGetParam:
                                        (1299) _UART_1_szGetParam:
                                        (1300)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1301)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (1302)     
                                        (1303)    RAM_SETPAGE_CUR >ptrParam
09C5: 50 04    MOV   A,0x4              (1304)    mov   A, <UART_1_aRxBuffer               ; Get address to receive buffer
09C7: 02 85    ADD   A,[data+7]         (1305)    add   A, [ptrParam]                      ; Add string offset
09C9: 5C       MOV   X,A                (1306)    mov   X, A
09CA: 62 D3 00 MOV   REG[0xD3],0x0      
                                        (1307)    RAM_SETPAGE_IDX >UART_1_aRxBuffer
09CD: 52 00    MOV   A,[X+0]            (1308)    mov   A, [X]                             ; Get character pointed by X
09CF: B0 04    JNZ   0x09D4             (1309)    jnz   .SkipOverDelimitersLoop            ; Null? No,  continue...
09D1: 10       PUSH  X                  (1310)    push  X                                  ;       Yes, Save LSB of current pointer
09D2: 80 33    JMP   0x0A06             (1311)    jmp   .End_GetNextParam
                                        (1312)                                             ; Check for delimiter and keep looping until
                                        (1313)                                             ; all leading delimiters have been found.
                                        (1314) .SkipOverDelimitersLoop:
09D4: 39 20    CMP   A,0x20             (1315)    cmp   A, UART_1_DELIMITER                ; Do we have a delimiter?
09D6: B0 11    JNZ   0x09E8             (1316)    jnz   .ParamStartFound                   ;   No,  Bingo! found a parameter
09D8: 75       INC   X                  (1317)    inc   X                                  ;   Yes, Increment both index and...
09D9: 76 85    INC   [data+7]           (1318)    inc   [ptrParam]                         ;          the stored pointer.
09DB: 52 00    MOV   A,[X+0]            (1319)    mov   A, [X]                             ; Get character pointed by X
09DD: 3C 85 5E CMP   [data+7],0x5E      (1320)    cmp   [ptrParam], (UART_1_RX_BUFFER_SIZE -1)   ; End of buffer?
09E0: BF F3    JNZ   0x09D4             (1321)    jnz   .SkipOverDelimitersLoop            ;   No,  continue the scan
                                        (1322) 
                                        (1323) .EndOfString:                               ;   Yes, end of string found...
09E2: 10       PUSH  X                  (1324)    push  X                                  ;        Save ptr
                                        (1325) .TerminateString:
09E3: 56 00 00 MOV   [X+0],0x0          (1326)    mov   [X], 0x00                          ; Make sure string is zero
09E6: 80 1F    JMP   0x0A06             (1327)    jmp   .End_GetNextParam
                                        (1328) 
                                        (1329) .ParamStartFound:
09E8: 10       PUSH  X                  (1330)    push  X                                  ; Beginning of parameter found, save pointer
                                        (1331) 
                                        (1332) .ParamLoop:                                 ; Now loop until end of parameter found.
09E9: 75       INC   X                  (1333)    inc   X                                  ; Advance pointers.
09EA: 76 85    INC   [data+7]           (1334)    inc   [ptrParam]
09EC: 3C 85 5E CMP   [data+7],0x5E      (1335)    cmp   [ptrParam], (UART_1_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
09EF: AF F3    JZ    0x09E3             (1336)    jz    .TerminateString
09F1: 52 00    MOV   A,[X+0]            (1337)    mov   A, [X]                             ; Get next character
09F3: A0 12    JZ    0x0A06             (1338)    jz    .End_GetNextParam
09F5: 39 20    CMP   A,0x20             (1339)    cmp   A, UART_1_DELIMITER                ; Check if we have a delimiter
09F7: BF F1    JNZ   0x09E9             (1340)    jnz   .ParamLoop                         ; Still no delimiter, loop again
09F9: 56 00 00 MOV   [X+0],0x0          (1341)    mov   [X], 0x00                          ; Replace delimiter with null for end of substring
09FC: 76 85    INC   [data+7]           (1342)    inc   [ptrParam]
09FE: 3C 85 5E CMP   [data+7],0x5E      (1343)    cmp   [ptrParam], (UART_1_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
0A01: B0 04    JNZ   0x0A06             (1344)    jnz   .End_GetNextParam                  ; If not end of string leave
0A03: 55 85 5E MOV   [data+7],0x5E      (1345)    mov   [ptrParam], (UART_1_RX_BUFFER_SIZE -1)   ; Reset pointer to end of string.
                                        (1346) 
                                        (1347) .End_GetNextParam:
0A06: 20       POP   X                  (1348)    pop   X
0A07: 10       PUSH  X                  (1349)    push  X
0A08: 3D 00 00 CMP   [X+0],0x0          (1350)    cmp   [X], 0x00
0A0B: B0 0A    JNZ   0x0A16             (1351)    jnz   .NotNullString
0A0D: 20       POP   X                  (1352)    pop   X
0A0E: 57 00    MOV   X,0x0              (1353)    mov   X, 0x00
0A10: 5B       MOV   A,X                (1354)    mov   A, X
0A11: 70 3F    AND   F,0x3F             
0A13: 71 C0    OR    F,0xC0             
                                        (1355)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1356)    RAM_EPILOGUE RAM_USE_CLASS_4
0A15: 7F       RET                      (1357)    ret
                                        (1358) 
                                        (1359) .NotNullString:
0A16: 20       POP   X                  (1360)    pop  X
0A17: 50 00    MOV   A,0x0              (1361)    mov  A, >UART_1_aRxBuffer                ; Return pointer
0A19: 70 3F    AND   F,0x3F             
0A1B: 71 C0    OR    F,0xC0             
                                        (1362)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1363)    RAM_EPILOGUE RAM_USE_CLASS_4
0A1D: 7F       RET                      (1364)    ret
0A1E: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1365) .ENDSECTION
                                        (1366) 
                                        (1367) 
                                        (1368) .SECTION
                                        (1369) ;-----------------------------------------------------------------------------
                                        (1370) ;  FUNCTION NAME: UART_1_szGetRestOfParams
                                        (1371) ;
                                        (1372) ;  DESCRIPTION:
                                        (1373) ;      Returns a pointer to the rest of the UART RX buffer
                                        (1374) ;-----------------------------------------------------------------------------
                                        (1375) ;
                                        (1376) ;  ARGUMENTS:  none
                                        (1377) ;
                                        (1378) ;  RETURNS:
                                        (1379) ;     A => MSB of parameter
                                        (1380) ;     X => LSB of parameter
                                        (1381) ;
                                        (1382) ;  SIDE EFFECTS:
                                        (1383) ;    The A and X registers may be modified by this or future implementations
                                        (1384) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1385) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1386) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1387) ;    functions.
                                        (1388) ;          
                                        (1389) ;    Currently only the page pointer registers listed below are modified: 
                                        (1390) ;          CUR_PP
                                        (1391) ;
                                        (1392)  UART_1_szGetRestOfParams:
                                        (1393) _UART_1_szGetRestOfParams:
                                        (1394)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1395)    RAM_SETPAGE_CUR >ptrParam
0A21: 50 04    MOV   A,0x4              (1396)    mov  A, <UART_1_aRxBuffer                ; Get address to receive buffer
0A23: 02 85    ADD   A,[data+7]         (1397)    add  A, [ptrParam]                       ; Add string offset
0A25: 5C       MOV   X,A                (1398)    mov  X,A
0A26: 50 00    MOV   A,0x0              (1399)    mov  A,>UART_1_aRxBuffer                 ; Return pointer
                                        (1400)    RAM_EPILOGUE RAM_USE_CLASS_4
0A28: 7F       RET                      (1401)    ret
                                        (1402) .ENDSECTION
                                        (1403) 
                                        (1404) ENDIF
                                        (1405) 
                                        (1406) 
                                        (1407) ; End of File UART_1.asm
FILE: lib\pwm16_4int.asm                (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM16_4INT.asm
                                        (0004) ;;   Version: 2.5, Updated on 2013/5/19 at 10:44:6
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM16 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "PWM16_4.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _PWM16_4_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _PWM16_4_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _PWM16_4_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
0A29: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file PWM16_4INT.asm
FILE: lib\pwm16_4.asm                   (0001) ;;*****************************************************************************
0A2A: 43 DF 08 OR    REG[0xDF],0x8      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM16_4.asm
                                        (0004) ;;   Version: 2.5, Updated on 2013/5/19 at 10:44:6
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM16 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "PWM16_4.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  PWM16_4_EnableInt
                                        (0030) export _PWM16_4_EnableInt
                                        (0031) export  PWM16_4_DisableInt
                                        (0032) export _PWM16_4_DisableInt
                                        (0033) export  PWM16_4_Start
                                        (0034) export _PWM16_4_Start
                                        (0035) export  PWM16_4_Stop
                                        (0036) export _PWM16_4_Stop
                                        (0037) export  PWM16_4_WritePeriod
                                        (0038) export _PWM16_4_WritePeriod
                                        (0039) export  PWM16_4_WritePulseWidth
                                        (0040) export _PWM16_4_WritePulseWidth
                                        (0041) export  PWM16_4_wReadPulseWidth
                                        (0042) export _PWM16_4_wReadPulseWidth
                                        (0043) export  PWM16_4_wReadCounter
                                        (0044) export _PWM16_4_wReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  wPWM16_4_ReadPulseWidth    ; deprecated
                                        (0049) export _wPWM16_4_ReadPulseWidth    ; deprecated
                                        (0050) export  wPWM16_4_ReadCounter       ; deprecated
                                        (0051) export _wPWM16_4_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) 
                                        (0054) AREA bot_RAM (RAM,REL)
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Constant Definitions
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: PWM16_4_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS: 
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  PWM16_4_EnableInt:
                                        (0091) _PWM16_4_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0093)    PWM16_4_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
0A2D: 7F       RET                      (0095)    ret
0A2E: 41 DF F7 AND   REG[0xDF],0xF7     
                                        (0096) 
                                        (0097) 
                                        (0098) .ENDSECTION
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: PWM16_4_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this PWM's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS:
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  PWM16_4_DisableInt:
                                        (0119) _PWM16_4_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0121)    PWM16_4_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
0A31: 7F       RET                      (0123)    ret
0A32: 43 4B 01 OR    REG[0x4B],0x1      
                                        (0124) 
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: PWM16_4_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     PWM will begin counting on the next input clock as soon as the
                                        (0135) ;     enable input is asserted high.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;
                                        (0138) ;  ARGUMENTS:    None
                                        (0139) ;  RETURNS:      Nothing
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  PWM16_4_Start:
                                        (0148) _PWM16_4_Start:
                                        (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0150)    PWM16_4_Start_M
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
0A35: 7F       RET                      (0152)    ret
0A36: 41 4B FE AND   REG[0x4B],0xFE     
                                        (0153) 
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: PWM16_4_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables PWM operation by clearing the start bit in the Control
                                        (0163) ;     register of the LSB block.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  PWM16_4_Stop:
                                        (0176) _PWM16_4_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0178)    PWM16_4_Stop_M
                                        (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
0A39: 7F       RET                      (0180)    ret
                                        (0181) 
                                        (0182) 
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185) .SECTION
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  FUNCTION NAME: PWM16_4_WritePeriod
                                        (0188) ;
                                        (0189) ;  DESCRIPTION:
                                        (0190) ;     Write the 16-bit period value into the Period register (DR1).
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
                                        (0194) ;  RETURNS:   Nothing
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    If the PWM user module is stopped, then this value will also be
                                        (0197) ;    latched into the Count registers (DR0).
                                        (0198) ;    
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  PWM16_4_WritePeriod:
                                        (0206) _PWM16_4_WritePeriod:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
0A3A: 60 49    MOV   REG[0x49],A        (0208)    mov   reg[PWM16_4_PERIOD_LSB_REG], A
0A3C: 5B       MOV   A,X                (0209)    mov   A, X
0A3D: 60 4D    MOV   REG[0x4D],A        (0210)    mov   reg[PWM16_4_PERIOD_MSB_REG], A
                                        (0211)    RAM_EPILOGUE RAM_USE_CLASS_1
0A3F: 7F       RET                      (0212)    ret
                                        (0213) 
                                        (0214) 
                                        (0215) .ENDSECTION
                                        (0216) 
                                        (0217) .SECTION
                                        (0218) ;-----------------------------------------------------------------------------
                                        (0219) ;  FUNCTION NAME: PWM16_4_WritePulseWidth
                                        (0220) ;
                                        (0221) ;  DESCRIPTION:
                                        (0222) ;     Writes the pulse width value into the Compare register (DR2).
                                        (0223) ;-----------------------------------------------------------------------------
                                        (0224) ;
                                        (0225) ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
                                        (0226) ;  RETURNS:      Nothing
                                        (0227) ;  SIDE EFFECTS:
                                        (0228) ;    The A and X registers may be modified by this or future implementations
                                        (0229) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0230) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0231) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0232) ;    functions.
                                        (0233) ;
                                        (0234)  PWM16_4_WritePulseWidth:
                                        (0235) _PWM16_4_WritePulseWidth:
                                        (0236)    RAM_PROLOGUE RAM_USE_CLASS_1
0A40: 60 4A    MOV   REG[0x4A],A        (0237)    mov   reg[PWM16_4_COMPARE_LSB_REG], A
0A42: 5B       MOV   A,X                (0238)    mov   A, X
0A43: 60 4E    MOV   REG[0x4E],A        (0239)    mov   reg[PWM16_4_COMPARE_MSB_REG], A
                                        (0240)    RAM_EPILOGUE RAM_USE_CLASS_1
0A45: 7F       RET                      (0241)    ret
                                        (0242) 
                                        (0243) 
                                        (0244) .ENDSECTION
                                        (0245) 
                                        (0246) .SECTION
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;  FUNCTION NAME: PWM16_4_wReadPulseWidth
                                        (0249) ;
                                        (0250) ;  DESCRIPTION:
                                        (0251) ;     Reads the Compare register.
                                        (0252) ;-----------------------------------------------------------------------------
                                        (0253) ;
                                        (0254) ;  ARGUMENTS:    None
                                        (0255) ;  RETURNS:      fastcall16 WORD wCompareValue (value of DR2 in the X & A registers)
                                        (0256) ;  SIDE EFFECTS:
                                        (0257) ;    The A and X registers may be modified by this or future implementations
                                        (0258) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0259) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0260) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0261) ;    functions.
                                        (0262) ;
                                        (0263)  PWM16_4_wReadPulseWidth:
                                        (0264) _PWM16_4_wReadPulseWidth:
                                        (0265)  wPWM16_4_ReadPulseWidth:                        ; this name deprecated
                                        (0266) _wPWM16_4_ReadPulseWidth:                        ; this name deprecated
                                        (0267)    RAM_PROLOGUE RAM_USE_CLASS_1
0A46: 5D 4E    MOV   A,REG[0x4E]        (0268)    mov   A, reg[PWM16_4_COMPARE_MSB_REG]
0A48: 5C       MOV   X,A                (0269)    mov   X, A
0A49: 5D 4A    MOV   A,REG[0x4A]        (0270)    mov   A, reg[PWM16_4_COMPARE_LSB_REG]
                                        (0271)    RAM_EPILOGUE RAM_USE_CLASS_1
0A4B: 7F       RET                      (0272)    ret
                                        (0273) 
                                        (0274) 
                                        (0275) .ENDSECTION
                                        (0276) 
                                        (0277) .SECTION
                                        (0278) ;-----------------------------------------------------------------------------
                                        (0279) ;  FUNCTION NAME: PWM16_4_wReadCounter
                                        (0280) ;
                                        (0281) ;  DESCRIPTION:
                                        (0282) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0283) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0284) ;     from the Count to the Compare register by holding the clock low in
                                        (0285) ;     the MSB PSoC block.
                                        (0286) ;-----------------------------------------------------------------------------
                                        (0287) ;
                                        (0288) ;  ARGUMENTS: None
                                        (0289) ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
                                        (0290) ;  SIDE EFFECTS:
                                        (0291) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0292) ;     2) The A and X registers may be modified by this or future implementations
                                        (0293) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0294) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0295) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0296) ;        functions.
                                        (0297) ;
                                        (0298)  PWM16_4_wReadCounter:
                                        (0299) _PWM16_4_wReadCounter:
                                        (0300)  wPWM16_4_ReadCounter:                           ; this name deprecated
                                        (0301) _wPWM16_4_ReadCounter:                           ; this name deprecated
                                        (0302) 
                                        (0303)    bOrigCompareValue:      EQU   0                  ; Frame offset to temp Compare store
                                        (0304)    bOrigClockSetting:      EQU   2                  ; Frame offset to temp Input   store
                                        (0305)    wCounter:               EQU   3                  ; Frame offset to temp Count   store
                                        (0306)    STACK_FRAME_SIZE:       EQU   5                  ; max stack frame size is 5 bytes
                                        (0307) 
                                        (0308)    RAM_PROLOGUE RAM_USE_CLASS_2
0A4C: 4F       MOV   X,SP               (0309)    mov   X, SP                                      ; X <-  stack frame pointer
0A4D: 5D 4E    MOV   A,REG[0x4E]        (0310)    mov   A, reg[PWM16_4_COMPARE_MSB_REG]         ; Save the Compare register on the stack
0A4F: 08       PUSH  A                  (0311)    push  A                                          ;
0A50: 5D 4A    MOV   A,REG[0x4A]        (0312)    mov   A, reg[PWM16_4_COMPARE_LSB_REG]         ;
0A52: 08       PUSH  A                  (0313)    push  A                                          ;  -stack frame now 2 bytes-
0A53: 41 4B FE AND   REG[0x4B],0xFE     
0A56: 71 10    OR    F,0x10             
                                        (0314)    PWM16_4_Stop_M                                ; Disable the PWM function
                                        (0315)    M8C_SetBank1                                     ;
0A58: 5D 49    MOV   A,REG[0x49]        (0316)    mov   A, reg[PWM16_4_INPUT_LSB_REG]           ; save the LSB clock input setting
0A5A: 08       PUSH  A                  (0317)    push  A                                          ;   on the stack (now 3 bytes) and ...
                                        (0318)                                                     ;   hold the clock low:
0A5B: 62 49 00 MOV   REG[0x49],0x0      (0319)    mov   reg[PWM16_4_INPUT_LSB_REG], INPUT_REG_NULL
0A5E: 70 EF    AND   F,0xEF             
                                        (0320)    M8C_SetBank0                                     ; Extract the Count via DR2 register
0A60: 5D 4C    MOV   A,REG[0x4C]        (0321)    mov   A, reg[PWM16_4_COUNTER_MSB_REG]         ; DR2 <- DR0 (in the MSB block)
0A62: 5D 4E    MOV   A,REG[0x4E]        (0322)    mov   A, reg[PWM16_4_COMPARE_MSB_REG]         ; Stash the Count MSB on the stack
0A64: 08       PUSH  A                  (0323)    push  A                                          ;  -stack frame is now 4 bytes
0A65: 5D 48    MOV   A,REG[0x48]        (0324)    mov   A, reg[PWM16_4_COUNTER_LSB_REG]         ; DR2 <- DR0 (in the LSB block)
0A67: 5D 4A    MOV   A,REG[0x4A]        (0325)    mov   A, reg[PWM16_4_COMPARE_LSB_REG]         ; Stash the Count LSB on the stack
0A69: 08       PUSH  A                  (0326)    push  A                                          ;   -stack frame is now 5 bytes-
0A6A: 52 00    MOV   A,[X+0]            (0327)    mov   A, [X+bOrigCompareValue]                   ; Restore the Compare MSB register
0A6C: 60 4E    MOV   REG[0x4E],A        (0328)    mov   reg[PWM16_4_COMPARE_MSB_REG], A         ;
0A6E: 52 01    MOV   A,[X+1]            (0329)    mov   A, [X+bOrigCompareValue+1]                 ; Restore the Compare LSB register
0A70: 60 4A    MOV   REG[0x4A],A        (0330)    mov   reg[PWM16_4_COMPARE_LSB_REG], A         ;
0A72: 71 10    OR    F,0x10             
                                        (0331)    M8C_SetBank1                                     ; ---Restore the PWM operation
0A74: 52 02    MOV   A,[X+2]            (0332)    mov   A, [X+bOrigClockSetting]                   ; Grab the LSB clock setting...
0A76: 60 49    MOV   REG[0x49],A        (0333)    mov   reg[PWM16_4_INPUT_LSB_REG], A           ;    and restore it
0A78: 70 EF    AND   F,0xEF             
0A7A: 43 4B 01 OR    REG[0x4B],0x1      
                                        (0334)    M8C_SetBank0                                     ;
                                        (0335)    PWM16_4_Start_M                               ; Now re-enable the PWM function
0A7D: 18       POP   A                  (0336)    pop   A                                          ; Setup the return value
0A7E: 20       POP   X                  (0337)    pop   X                                          ;
0A7F: 38 FD    ADD   SP,0xFD            (0338)    ADD   SP, -(STACK_FRAME_SIZE-2)                  ; Zap remainder of stack frame
0A81: 70 3F    AND   F,0x3F             
0A83: 71 C0    OR    F,0xC0             
                                        (0339)    RAM_EPILOGUE RAM_USE_CLASS_2
0A85: 7F       RET                      (0340)    ret
                                        (0341) 
                                        (0342) .ENDSECTION
                                        (0343) 
                                        (0344) ; End of File PWM16_4.asm
FILE: lib\pwm16_3int.asm                (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM16_3INT.asm
                                        (0004) ;;   Version: 2.5, Updated on 2013/5/19 at 10:44:6
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM16 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "PWM16_3.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _PWM16_3_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _PWM16_3_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _PWM16_3_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
0A86: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file PWM16_3INT.asm
FILE: lib\pwm16_3.asm                   (0001) ;;*****************************************************************************
0A87: 43 DF 02 OR    REG[0xDF],0x2      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM16_3.asm
                                        (0004) ;;   Version: 2.5, Updated on 2013/5/19 at 10:44:6
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM16 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "PWM16_3.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  PWM16_3_EnableInt
                                        (0030) export _PWM16_3_EnableInt
                                        (0031) export  PWM16_3_DisableInt
                                        (0032) export _PWM16_3_DisableInt
                                        (0033) export  PWM16_3_Start
                                        (0034) export _PWM16_3_Start
                                        (0035) export  PWM16_3_Stop
                                        (0036) export _PWM16_3_Stop
                                        (0037) export  PWM16_3_WritePeriod
                                        (0038) export _PWM16_3_WritePeriod
                                        (0039) export  PWM16_3_WritePulseWidth
                                        (0040) export _PWM16_3_WritePulseWidth
                                        (0041) export  PWM16_3_wReadPulseWidth
                                        (0042) export _PWM16_3_wReadPulseWidth
                                        (0043) export  PWM16_3_wReadCounter
                                        (0044) export _PWM16_3_wReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  wPWM16_3_ReadPulseWidth    ; deprecated
                                        (0049) export _wPWM16_3_ReadPulseWidth    ; deprecated
                                        (0050) export  wPWM16_3_ReadCounter       ; deprecated
                                        (0051) export _wPWM16_3_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) 
                                        (0054) AREA bot_RAM (RAM,REL)
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Constant Definitions
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: PWM16_3_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS: 
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  PWM16_3_EnableInt:
                                        (0091) _PWM16_3_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0093)    PWM16_3_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
0A8A: 7F       RET                      (0095)    ret
0A8B: 41 DF FD AND   REG[0xDF],0xFD     
                                        (0096) 
                                        (0097) 
                                        (0098) .ENDSECTION
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: PWM16_3_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this PWM's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS:
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  PWM16_3_DisableInt:
                                        (0119) _PWM16_3_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0121)    PWM16_3_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
0A8E: 7F       RET                      (0123)    ret
0A8F: 43 43 01 OR    REG[0x43],0x1      
                                        (0124) 
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: PWM16_3_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     PWM will begin counting on the next input clock as soon as the
                                        (0135) ;     enable input is asserted high.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;
                                        (0138) ;  ARGUMENTS:    None
                                        (0139) ;  RETURNS:      Nothing
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  PWM16_3_Start:
                                        (0148) _PWM16_3_Start:
                                        (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0150)    PWM16_3_Start_M
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
0A92: 7F       RET                      (0152)    ret
0A93: 41 43 FE AND   REG[0x43],0xFE     
                                        (0153) 
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: PWM16_3_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables PWM operation by clearing the start bit in the Control
                                        (0163) ;     register of the LSB block.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  PWM16_3_Stop:
                                        (0176) _PWM16_3_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0178)    PWM16_3_Stop_M
                                        (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
0A96: 7F       RET                      (0180)    ret
                                        (0181) 
                                        (0182) 
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185) .SECTION
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  FUNCTION NAME: PWM16_3_WritePeriod
                                        (0188) ;
                                        (0189) ;  DESCRIPTION:
                                        (0190) ;     Write the 16-bit period value into the Period register (DR1).
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
                                        (0194) ;  RETURNS:   Nothing
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    If the PWM user module is stopped, then this value will also be
                                        (0197) ;    latched into the Count registers (DR0).
                                        (0198) ;    
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  PWM16_3_WritePeriod:
                                        (0206) _PWM16_3_WritePeriod:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
0A97: 60 41    MOV   REG[0x41],A        (0208)    mov   reg[PWM16_3_PERIOD_LSB_REG], A
0A99: 5B       MOV   A,X                (0209)    mov   A, X
0A9A: 60 45    MOV   REG[0x45],A        (0210)    mov   reg[PWM16_3_PERIOD_MSB_REG], A
                                        (0211)    RAM_EPILOGUE RAM_USE_CLASS_1
0A9C: 7F       RET                      (0212)    ret
                                        (0213) 
                                        (0214) 
                                        (0215) .ENDSECTION
                                        (0216) 
                                        (0217) .SECTION
                                        (0218) ;-----------------------------------------------------------------------------
                                        (0219) ;  FUNCTION NAME: PWM16_3_WritePulseWidth
                                        (0220) ;
                                        (0221) ;  DESCRIPTION:
                                        (0222) ;     Writes the pulse width value into the Compare register (DR2).
                                        (0223) ;-----------------------------------------------------------------------------
                                        (0224) ;
                                        (0225) ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
                                        (0226) ;  RETURNS:      Nothing
                                        (0227) ;  SIDE EFFECTS:
                                        (0228) ;    The A and X registers may be modified by this or future implementations
                                        (0229) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0230) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0231) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0232) ;    functions.
                                        (0233) ;
                                        (0234)  PWM16_3_WritePulseWidth:
                                        (0235) _PWM16_3_WritePulseWidth:
                                        (0236)    RAM_PROLOGUE RAM_USE_CLASS_1
0A9D: 60 42    MOV   REG[0x42],A        (0237)    mov   reg[PWM16_3_COMPARE_LSB_REG], A
0A9F: 5B       MOV   A,X                (0238)    mov   A, X
0AA0: 60 46    MOV   REG[0x46],A        (0239)    mov   reg[PWM16_3_COMPARE_MSB_REG], A
                                        (0240)    RAM_EPILOGUE RAM_USE_CLASS_1
0AA2: 7F       RET                      (0241)    ret
                                        (0242) 
                                        (0243) 
                                        (0244) .ENDSECTION
                                        (0245) 
                                        (0246) .SECTION
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;  FUNCTION NAME: PWM16_3_wReadPulseWidth
                                        (0249) ;
                                        (0250) ;  DESCRIPTION:
                                        (0251) ;     Reads the Compare register.
                                        (0252) ;-----------------------------------------------------------------------------
                                        (0253) ;
                                        (0254) ;  ARGUMENTS:    None
                                        (0255) ;  RETURNS:      fastcall16 WORD wCompareValue (value of DR2 in the X & A registers)
                                        (0256) ;  SIDE EFFECTS:
                                        (0257) ;    The A and X registers may be modified by this or future implementations
                                        (0258) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0259) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0260) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0261) ;    functions.
                                        (0262) ;
                                        (0263)  PWM16_3_wReadPulseWidth:
                                        (0264) _PWM16_3_wReadPulseWidth:
                                        (0265)  wPWM16_3_ReadPulseWidth:                        ; this name deprecated
                                        (0266) _wPWM16_3_ReadPulseWidth:                        ; this name deprecated
                                        (0267)    RAM_PROLOGUE RAM_USE_CLASS_1
0AA3: 5D 46    MOV   A,REG[0x46]        (0268)    mov   A, reg[PWM16_3_COMPARE_MSB_REG]
0AA5: 5C       MOV   X,A                (0269)    mov   X, A
0AA6: 5D 42    MOV   A,REG[0x42]        (0270)    mov   A, reg[PWM16_3_COMPARE_LSB_REG]
                                        (0271)    RAM_EPILOGUE RAM_USE_CLASS_1
0AA8: 7F       RET                      (0272)    ret
                                        (0273) 
                                        (0274) 
                                        (0275) .ENDSECTION
                                        (0276) 
                                        (0277) .SECTION
                                        (0278) ;-----------------------------------------------------------------------------
                                        (0279) ;  FUNCTION NAME: PWM16_3_wReadCounter
                                        (0280) ;
                                        (0281) ;  DESCRIPTION:
                                        (0282) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0283) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0284) ;     from the Count to the Compare register by holding the clock low in
                                        (0285) ;     the MSB PSoC block.
                                        (0286) ;-----------------------------------------------------------------------------
                                        (0287) ;
                                        (0288) ;  ARGUMENTS: None
                                        (0289) ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
                                        (0290) ;  SIDE EFFECTS:
                                        (0291) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0292) ;     2) The A and X registers may be modified by this or future implementations
                                        (0293) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0294) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0295) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0296) ;        functions.
                                        (0297) ;
                                        (0298)  PWM16_3_wReadCounter:
                                        (0299) _PWM16_3_wReadCounter:
                                        (0300)  wPWM16_3_ReadCounter:                           ; this name deprecated
                                        (0301) _wPWM16_3_ReadCounter:                           ; this name deprecated
                                        (0302) 
                                        (0303)    bOrigCompareValue:      EQU   0                  ; Frame offset to temp Compare store
                                        (0304)    bOrigClockSetting:      EQU   2                  ; Frame offset to temp Input   store
                                        (0305)    wCounter:               EQU   3                  ; Frame offset to temp Count   store
                                        (0306)    STACK_FRAME_SIZE:       EQU   5                  ; max stack frame size is 5 bytes
                                        (0307) 
                                        (0308)    RAM_PROLOGUE RAM_USE_CLASS_2
0AA9: 4F       MOV   X,SP               (0309)    mov   X, SP                                      ; X <-  stack frame pointer
0AAA: 5D 46    MOV   A,REG[0x46]        (0310)    mov   A, reg[PWM16_3_COMPARE_MSB_REG]         ; Save the Compare register on the stack
0AAC: 08       PUSH  A                  (0311)    push  A                                          ;
0AAD: 5D 42    MOV   A,REG[0x42]        (0312)    mov   A, reg[PWM16_3_COMPARE_LSB_REG]         ;
0AAF: 08       PUSH  A                  (0313)    push  A                                          ;  -stack frame now 2 bytes-
0AB0: 41 43 FE AND   REG[0x43],0xFE     
0AB3: 71 10    OR    F,0x10             
                                        (0314)    PWM16_3_Stop_M                                ; Disable the PWM function
                                        (0315)    M8C_SetBank1                                     ;
0AB5: 5D 41    MOV   A,REG[0x41]        (0316)    mov   A, reg[PWM16_3_INPUT_LSB_REG]           ; save the LSB clock input setting
0AB7: 08       PUSH  A                  (0317)    push  A                                          ;   on the stack (now 3 bytes) and ...
                                        (0318)                                                     ;   hold the clock low:
0AB8: 62 41 00 MOV   REG[0x41],0x0      (0319)    mov   reg[PWM16_3_INPUT_LSB_REG], INPUT_REG_NULL
0ABB: 70 EF    AND   F,0xEF             
                                        (0320)    M8C_SetBank0                                     ; Extract the Count via DR2 register
0ABD: 5D 44    MOV   A,REG[0x44]        (0321)    mov   A, reg[PWM16_3_COUNTER_MSB_REG]         ; DR2 <- DR0 (in the MSB block)
0ABF: 5D 46    MOV   A,REG[0x46]        (0322)    mov   A, reg[PWM16_3_COMPARE_MSB_REG]         ; Stash the Count MSB on the stack
0AC1: 08       PUSH  A                  (0323)    push  A                                          ;  -stack frame is now 4 bytes
0AC2: 5D 40    MOV   A,REG[0x40]        (0324)    mov   A, reg[PWM16_3_COUNTER_LSB_REG]         ; DR2 <- DR0 (in the LSB block)
0AC4: 5D 42    MOV   A,REG[0x42]        (0325)    mov   A, reg[PWM16_3_COMPARE_LSB_REG]         ; Stash the Count LSB on the stack
0AC6: 08       PUSH  A                  (0326)    push  A                                          ;   -stack frame is now 5 bytes-
0AC7: 52 00    MOV   A,[X+0]            (0327)    mov   A, [X+bOrigCompareValue]                   ; Restore the Compare MSB register
0AC9: 60 46    MOV   REG[0x46],A        (0328)    mov   reg[PWM16_3_COMPARE_MSB_REG], A         ;
0ACB: 52 01    MOV   A,[X+1]            (0329)    mov   A, [X+bOrigCompareValue+1]                 ; Restore the Compare LSB register
0ACD: 60 42    MOV   REG[0x42],A        (0330)    mov   reg[PWM16_3_COMPARE_LSB_REG], A         ;
0ACF: 71 10    OR    F,0x10             
                                        (0331)    M8C_SetBank1                                     ; ---Restore the PWM operation
0AD1: 52 02    MOV   A,[X+2]            (0332)    mov   A, [X+bOrigClockSetting]                   ; Grab the LSB clock setting...
0AD3: 60 41    MOV   REG[0x41],A        (0333)    mov   reg[PWM16_3_INPUT_LSB_REG], A           ;    and restore it
0AD5: 70 EF    AND   F,0xEF             
0AD7: 43 43 01 OR    REG[0x43],0x1      
                                        (0334)    M8C_SetBank0                                     ;
                                        (0335)    PWM16_3_Start_M                               ; Now re-enable the PWM function
0ADA: 18       POP   A                  (0336)    pop   A                                          ; Setup the return value
0ADB: 20       POP   X                  (0337)    pop   X                                          ;
0ADC: 38 FD    ADD   SP,0xFD            (0338)    ADD   SP, -(STACK_FRAME_SIZE-2)                  ; Zap remainder of stack frame
0ADE: 70 3F    AND   F,0x3F             
0AE0: 71 C0    OR    F,0xC0             
                                        (0339)    RAM_EPILOGUE RAM_USE_CLASS_2
0AE2: 7F       RET                      (0340)    ret
                                        (0341) 
                                        (0342) .ENDSECTION
                                        (0343) 
                                        (0344) ; End of File PWM16_3.asm
FILE: lib\pwm16_2int.asm                (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM16_2INT.asm
                                        (0004) ;;   Version: 2.5, Updated on 2013/5/19 at 10:44:6
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM16 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "PWM16_2.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _PWM16_2_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _PWM16_2_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _PWM16_2_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
0AE3: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file PWM16_2INT.asm
FILE: lib\pwm16_2.asm                   (0001) ;;*****************************************************************************
0AE4: 43 E1 20 OR    REG[0xE1],0x20     (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM16_2.asm
                                        (0004) ;;   Version: 2.5, Updated on 2013/5/19 at 10:44:6
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM16 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "PWM16_2.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  PWM16_2_EnableInt
                                        (0030) export _PWM16_2_EnableInt
                                        (0031) export  PWM16_2_DisableInt
                                        (0032) export _PWM16_2_DisableInt
                                        (0033) export  PWM16_2_Start
                                        (0034) export _PWM16_2_Start
                                        (0035) export  PWM16_2_Stop
                                        (0036) export _PWM16_2_Stop
                                        (0037) export  PWM16_2_WritePeriod
                                        (0038) export _PWM16_2_WritePeriod
                                        (0039) export  PWM16_2_WritePulseWidth
                                        (0040) export _PWM16_2_WritePulseWidth
                                        (0041) export  PWM16_2_wReadPulseWidth
                                        (0042) export _PWM16_2_wReadPulseWidth
                                        (0043) export  PWM16_2_wReadCounter
                                        (0044) export _PWM16_2_wReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  wPWM16_2_ReadPulseWidth    ; deprecated
                                        (0049) export _wPWM16_2_ReadPulseWidth    ; deprecated
                                        (0050) export  wPWM16_2_ReadCounter       ; deprecated
                                        (0051) export _wPWM16_2_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) 
                                        (0054) AREA bot_RAM (RAM,REL)
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Constant Definitions
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: PWM16_2_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS: 
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  PWM16_2_EnableInt:
                                        (0091) _PWM16_2_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0093)    PWM16_2_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
0AE7: 7F       RET                      (0095)    ret
0AE8: 41 E1 DF AND   REG[0xE1],0xDF     
                                        (0096) 
                                        (0097) 
                                        (0098) .ENDSECTION
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: PWM16_2_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this PWM's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS:
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  PWM16_2_DisableInt:
                                        (0119) _PWM16_2_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0121)    PWM16_2_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
0AEB: 7F       RET                      (0123)    ret
0AEC: 43 33 01 OR    REG[0x33],0x1      
                                        (0124) 
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: PWM16_2_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     PWM will begin counting on the next input clock as soon as the
                                        (0135) ;     enable input is asserted high.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;
                                        (0138) ;  ARGUMENTS:    None
                                        (0139) ;  RETURNS:      Nothing
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  PWM16_2_Start:
                                        (0148) _PWM16_2_Start:
                                        (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0150)    PWM16_2_Start_M
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
0AEF: 7F       RET                      (0152)    ret
0AF0: 41 33 FE AND   REG[0x33],0xFE     
                                        (0153) 
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: PWM16_2_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables PWM operation by clearing the start bit in the Control
                                        (0163) ;     register of the LSB block.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  PWM16_2_Stop:
                                        (0176) _PWM16_2_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0178)    PWM16_2_Stop_M
                                        (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
0AF3: 7F       RET                      (0180)    ret
                                        (0181) 
                                        (0182) 
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185) .SECTION
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  FUNCTION NAME: PWM16_2_WritePeriod
                                        (0188) ;
                                        (0189) ;  DESCRIPTION:
                                        (0190) ;     Write the 16-bit period value into the Period register (DR1).
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
                                        (0194) ;  RETURNS:   Nothing
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    If the PWM user module is stopped, then this value will also be
                                        (0197) ;    latched into the Count registers (DR0).
                                        (0198) ;    
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  PWM16_2_WritePeriod:
                                        (0206) _PWM16_2_WritePeriod:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
0AF4: 60 31    MOV   REG[0x31],A        (0208)    mov   reg[PWM16_2_PERIOD_LSB_REG], A
0AF6: 5B       MOV   A,X                (0209)    mov   A, X
0AF7: 60 35    MOV   REG[0x35],A        (0210)    mov   reg[PWM16_2_PERIOD_MSB_REG], A
                                        (0211)    RAM_EPILOGUE RAM_USE_CLASS_1
0AF9: 7F       RET                      (0212)    ret
                                        (0213) 
                                        (0214) 
                                        (0215) .ENDSECTION
                                        (0216) 
                                        (0217) .SECTION
                                        (0218) ;-----------------------------------------------------------------------------
                                        (0219) ;  FUNCTION NAME: PWM16_2_WritePulseWidth
                                        (0220) ;
                                        (0221) ;  DESCRIPTION:
                                        (0222) ;     Writes the pulse width value into the Compare register (DR2).
                                        (0223) ;-----------------------------------------------------------------------------
                                        (0224) ;
                                        (0225) ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
                                        (0226) ;  RETURNS:      Nothing
                                        (0227) ;  SIDE EFFECTS:
                                        (0228) ;    The A and X registers may be modified by this or future implementations
                                        (0229) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0230) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0231) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0232) ;    functions.
                                        (0233) ;
                                        (0234)  PWM16_2_WritePulseWidth:
                                        (0235) _PWM16_2_WritePulseWidth:
                                        (0236)    RAM_PROLOGUE RAM_USE_CLASS_1
0AFA: 60 32    MOV   REG[0x32],A        (0237)    mov   reg[PWM16_2_COMPARE_LSB_REG], A
0AFC: 5B       MOV   A,X                (0238)    mov   A, X
0AFD: 60 36    MOV   REG[0x36],A        (0239)    mov   reg[PWM16_2_COMPARE_MSB_REG], A
                                        (0240)    RAM_EPILOGUE RAM_USE_CLASS_1
0AFF: 7F       RET                      (0241)    ret
                                        (0242) 
                                        (0243) 
                                        (0244) .ENDSECTION
                                        (0245) 
                                        (0246) .SECTION
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;  FUNCTION NAME: PWM16_2_wReadPulseWidth
                                        (0249) ;
                                        (0250) ;  DESCRIPTION:
                                        (0251) ;     Reads the Compare register.
                                        (0252) ;-----------------------------------------------------------------------------
                                        (0253) ;
                                        (0254) ;  ARGUMENTS:    None
                                        (0255) ;  RETURNS:      fastcall16 WORD wCompareValue (value of DR2 in the X & A registers)
                                        (0256) ;  SIDE EFFECTS:
                                        (0257) ;    The A and X registers may be modified by this or future implementations
                                        (0258) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0259) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0260) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0261) ;    functions.
                                        (0262) ;
                                        (0263)  PWM16_2_wReadPulseWidth:
                                        (0264) _PWM16_2_wReadPulseWidth:
                                        (0265)  wPWM16_2_ReadPulseWidth:                        ; this name deprecated
                                        (0266) _wPWM16_2_ReadPulseWidth:                        ; this name deprecated
                                        (0267)    RAM_PROLOGUE RAM_USE_CLASS_1
0B00: 5D 36    MOV   A,REG[0x36]        (0268)    mov   A, reg[PWM16_2_COMPARE_MSB_REG]
0B02: 5C       MOV   X,A                (0269)    mov   X, A
0B03: 5D 32    MOV   A,REG[0x32]        (0270)    mov   A, reg[PWM16_2_COMPARE_LSB_REG]
                                        (0271)    RAM_EPILOGUE RAM_USE_CLASS_1
0B05: 7F       RET                      (0272)    ret
                                        (0273) 
                                        (0274) 
                                        (0275) .ENDSECTION
                                        (0276) 
                                        (0277) .SECTION
                                        (0278) ;-----------------------------------------------------------------------------
                                        (0279) ;  FUNCTION NAME: PWM16_2_wReadCounter
                                        (0280) ;
                                        (0281) ;  DESCRIPTION:
                                        (0282) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0283) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0284) ;     from the Count to the Compare register by holding the clock low in
                                        (0285) ;     the MSB PSoC block.
                                        (0286) ;-----------------------------------------------------------------------------
                                        (0287) ;
                                        (0288) ;  ARGUMENTS: None
                                        (0289) ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
                                        (0290) ;  SIDE EFFECTS:
                                        (0291) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0292) ;     2) The A and X registers may be modified by this or future implementations
                                        (0293) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0294) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0295) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0296) ;        functions.
                                        (0297) ;
                                        (0298)  PWM16_2_wReadCounter:
                                        (0299) _PWM16_2_wReadCounter:
                                        (0300)  wPWM16_2_ReadCounter:                           ; this name deprecated
                                        (0301) _wPWM16_2_ReadCounter:                           ; this name deprecated
                                        (0302) 
                                        (0303)    bOrigCompareValue:      EQU   0                  ; Frame offset to temp Compare store
                                        (0304)    bOrigClockSetting:      EQU   2                  ; Frame offset to temp Input   store
                                        (0305)    wCounter:               EQU   3                  ; Frame offset to temp Count   store
                                        (0306)    STACK_FRAME_SIZE:       EQU   5                  ; max stack frame size is 5 bytes
                                        (0307) 
                                        (0308)    RAM_PROLOGUE RAM_USE_CLASS_2
0B06: 4F       MOV   X,SP               (0309)    mov   X, SP                                      ; X <-  stack frame pointer
0B07: 5D 36    MOV   A,REG[0x36]        (0310)    mov   A, reg[PWM16_2_COMPARE_MSB_REG]         ; Save the Compare register on the stack
0B09: 08       PUSH  A                  (0311)    push  A                                          ;
0B0A: 5D 32    MOV   A,REG[0x32]        (0312)    mov   A, reg[PWM16_2_COMPARE_LSB_REG]         ;
0B0C: 08       PUSH  A                  (0313)    push  A                                          ;  -stack frame now 2 bytes-
0B0D: 41 33 FE AND   REG[0x33],0xFE     
0B10: 71 10    OR    F,0x10             
                                        (0314)    PWM16_2_Stop_M                                ; Disable the PWM function
                                        (0315)    M8C_SetBank1                                     ;
0B12: 5D 31    MOV   A,REG[0x31]        (0316)    mov   A, reg[PWM16_2_INPUT_LSB_REG]           ; save the LSB clock input setting
0B14: 08       PUSH  A                  (0317)    push  A                                          ;   on the stack (now 3 bytes) and ...
                                        (0318)                                                     ;   hold the clock low:
0B15: 62 31 00 MOV   REG[0x31],0x0      (0319)    mov   reg[PWM16_2_INPUT_LSB_REG], INPUT_REG_NULL
0B18: 70 EF    AND   F,0xEF             
                                        (0320)    M8C_SetBank0                                     ; Extract the Count via DR2 register
0B1A: 5D 34    MOV   A,REG[0x34]        (0321)    mov   A, reg[PWM16_2_COUNTER_MSB_REG]         ; DR2 <- DR0 (in the MSB block)
0B1C: 5D 36    MOV   A,REG[0x36]        (0322)    mov   A, reg[PWM16_2_COMPARE_MSB_REG]         ; Stash the Count MSB on the stack
0B1E: 08       PUSH  A                  (0323)    push  A                                          ;  -stack frame is now 4 bytes
0B1F: 5D 30    MOV   A,REG[0x30]        (0324)    mov   A, reg[PWM16_2_COUNTER_LSB_REG]         ; DR2 <- DR0 (in the LSB block)
0B21: 5D 32    MOV   A,REG[0x32]        (0325)    mov   A, reg[PWM16_2_COMPARE_LSB_REG]         ; Stash the Count LSB on the stack
0B23: 08       PUSH  A                  (0326)    push  A                                          ;   -stack frame is now 5 bytes-
0B24: 52 00    MOV   A,[X+0]            (0327)    mov   A, [X+bOrigCompareValue]                   ; Restore the Compare MSB register
0B26: 60 36    MOV   REG[0x36],A        (0328)    mov   reg[PWM16_2_COMPARE_MSB_REG], A         ;
0B28: 52 01    MOV   A,[X+1]            (0329)    mov   A, [X+bOrigCompareValue+1]                 ; Restore the Compare LSB register
0B2A: 60 32    MOV   REG[0x32],A        (0330)    mov   reg[PWM16_2_COMPARE_LSB_REG], A         ;
0B2C: 71 10    OR    F,0x10             
                                        (0331)    M8C_SetBank1                                     ; ---Restore the PWM operation
0B2E: 52 02    MOV   A,[X+2]            (0332)    mov   A, [X+bOrigClockSetting]                   ; Grab the LSB clock setting...
0B30: 60 31    MOV   REG[0x31],A        (0333)    mov   reg[PWM16_2_INPUT_LSB_REG], A           ;    and restore it
0B32: 70 EF    AND   F,0xEF             
0B34: 43 33 01 OR    REG[0x33],0x1      
                                        (0334)    M8C_SetBank0                                     ;
                                        (0335)    PWM16_2_Start_M                               ; Now re-enable the PWM function
0B37: 18       POP   A                  (0336)    pop   A                                          ; Setup the return value
0B38: 20       POP   X                  (0337)    pop   X                                          ;
0B39: 38 FD    ADD   SP,0xFD            (0338)    ADD   SP, -(STACK_FRAME_SIZE-2)                  ; Zap remainder of stack frame
0B3B: 70 3F    AND   F,0x3F             
0B3D: 71 C0    OR    F,0xC0             
                                        (0339)    RAM_EPILOGUE RAM_USE_CLASS_2
0B3F: 7F       RET                      (0340)    ret
                                        (0341) 
                                        (0342) .ENDSECTION
                                        (0343) 
                                        (0344) ; End of File PWM16_2.asm
FILE: lib\pwm16_1int.asm                (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM16_1INT.asm
                                        (0004) ;;   Version: 2.5, Updated on 2013/5/19 at 10:44:6
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM16 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "PWM16_1.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _PWM16_1_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _PWM16_1_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _PWM16_1_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
0B40: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file PWM16_1INT.asm
FILE: lib\pwm16_1.asm                   (0001) ;;*****************************************************************************
0B41: 43 E1 02 OR    REG[0xE1],0x2      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM16_1.asm
                                        (0004) ;;   Version: 2.5, Updated on 2013/5/19 at 10:44:6
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM16 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "PWM16_1.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  PWM16_1_EnableInt
                                        (0030) export _PWM16_1_EnableInt
                                        (0031) export  PWM16_1_DisableInt
                                        (0032) export _PWM16_1_DisableInt
                                        (0033) export  PWM16_1_Start
                                        (0034) export _PWM16_1_Start
                                        (0035) export  PWM16_1_Stop
                                        (0036) export _PWM16_1_Stop
                                        (0037) export  PWM16_1_WritePeriod
                                        (0038) export _PWM16_1_WritePeriod
                                        (0039) export  PWM16_1_WritePulseWidth
                                        (0040) export _PWM16_1_WritePulseWidth
                                        (0041) export  PWM16_1_wReadPulseWidth
                                        (0042) export _PWM16_1_wReadPulseWidth
                                        (0043) export  PWM16_1_wReadCounter
                                        (0044) export _PWM16_1_wReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  wPWM16_1_ReadPulseWidth    ; deprecated
                                        (0049) export _wPWM16_1_ReadPulseWidth    ; deprecated
                                        (0050) export  wPWM16_1_ReadCounter       ; deprecated
                                        (0051) export _wPWM16_1_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) 
                                        (0054) AREA bot_RAM (RAM,REL)
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Constant Definitions
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: PWM16_1_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS: 
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  PWM16_1_EnableInt:
                                        (0091) _PWM16_1_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0093)    PWM16_1_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
0B44: 7F       RET                      (0095)    ret
0B45: 41 E1 FD AND   REG[0xE1],0xFD     
                                        (0096) 
                                        (0097) 
                                        (0098) .ENDSECTION
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: PWM16_1_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this PWM's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS:
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  PWM16_1_DisableInt:
                                        (0119) _PWM16_1_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0121)    PWM16_1_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
0B48: 7F       RET                      (0123)    ret
0B49: 43 23 01 OR    REG[0x23],0x1      
                                        (0124) 
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: PWM16_1_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     PWM will begin counting on the next input clock as soon as the
                                        (0135) ;     enable input is asserted high.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;
                                        (0138) ;  ARGUMENTS:    None
                                        (0139) ;  RETURNS:      Nothing
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  PWM16_1_Start:
                                        (0148) _PWM16_1_Start:
                                        (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0150)    PWM16_1_Start_M
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
0B4C: 7F       RET                      (0152)    ret
0B4D: 41 23 FE AND   REG[0x23],0xFE     
                                        (0153) 
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: PWM16_1_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables PWM operation by clearing the start bit in the Control
                                        (0163) ;     register of the LSB block.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  PWM16_1_Stop:
                                        (0176) _PWM16_1_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0178)    PWM16_1_Stop_M
                                        (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
0B50: 7F       RET                      (0180)    ret
                                        (0181) 
                                        (0182) 
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185) .SECTION
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  FUNCTION NAME: PWM16_1_WritePeriod
                                        (0188) ;
                                        (0189) ;  DESCRIPTION:
                                        (0190) ;     Write the 16-bit period value into the Period register (DR1).
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
                                        (0194) ;  RETURNS:   Nothing
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    If the PWM user module is stopped, then this value will also be
                                        (0197) ;    latched into the Count registers (DR0).
                                        (0198) ;    
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  PWM16_1_WritePeriod:
                                        (0206) _PWM16_1_WritePeriod:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
0B51: 60 21    MOV   REG[0x21],A        (0208)    mov   reg[PWM16_1_PERIOD_LSB_REG], A
0B53: 5B       MOV   A,X                (0209)    mov   A, X
0B54: 60 25    MOV   REG[0x25],A        (0210)    mov   reg[PWM16_1_PERIOD_MSB_REG], A
                                        (0211)    RAM_EPILOGUE RAM_USE_CLASS_1
0B56: 7F       RET                      (0212)    ret
                                        (0213) 
                                        (0214) 
                                        (0215) .ENDSECTION
                                        (0216) 
                                        (0217) .SECTION
                                        (0218) ;-----------------------------------------------------------------------------
                                        (0219) ;  FUNCTION NAME: PWM16_1_WritePulseWidth
                                        (0220) ;
                                        (0221) ;  DESCRIPTION:
                                        (0222) ;     Writes the pulse width value into the Compare register (DR2).
                                        (0223) ;-----------------------------------------------------------------------------
                                        (0224) ;
                                        (0225) ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
                                        (0226) ;  RETURNS:      Nothing
                                        (0227) ;  SIDE EFFECTS:
                                        (0228) ;    The A and X registers may be modified by this or future implementations
                                        (0229) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0230) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0231) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0232) ;    functions.
                                        (0233) ;
                                        (0234)  PWM16_1_WritePulseWidth:
                                        (0235) _PWM16_1_WritePulseWidth:
                                        (0236)    RAM_PROLOGUE RAM_USE_CLASS_1
0B57: 60 22    MOV   REG[0x22],A        (0237)    mov   reg[PWM16_1_COMPARE_LSB_REG], A
0B59: 5B       MOV   A,X                (0238)    mov   A, X
0B5A: 60 26    MOV   REG[0x26],A        (0239)    mov   reg[PWM16_1_COMPARE_MSB_REG], A
                                        (0240)    RAM_EPILOGUE RAM_USE_CLASS_1
0B5C: 7F       RET                      (0241)    ret
                                        (0242) 
                                        (0243) 
                                        (0244) .ENDSECTION
                                        (0245) 
                                        (0246) .SECTION
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;  FUNCTION NAME: PWM16_1_wReadPulseWidth
                                        (0249) ;
                                        (0250) ;  DESCRIPTION:
                                        (0251) ;     Reads the Compare register.
                                        (0252) ;-----------------------------------------------------------------------------
                                        (0253) ;
                                        (0254) ;  ARGUMENTS:    None
                                        (0255) ;  RETURNS:      fastcall16 WORD wCompareValue (value of DR2 in the X & A registers)
                                        (0256) ;  SIDE EFFECTS:
                                        (0257) ;    The A and X registers may be modified by this or future implementations
                                        (0258) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0259) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0260) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0261) ;    functions.
                                        (0262) ;
                                        (0263)  PWM16_1_wReadPulseWidth:
                                        (0264) _PWM16_1_wReadPulseWidth:
                                        (0265)  wPWM16_1_ReadPulseWidth:                        ; this name deprecated
                                        (0266) _wPWM16_1_ReadPulseWidth:                        ; this name deprecated
                                        (0267)    RAM_PROLOGUE RAM_USE_CLASS_1
0B5D: 5D 26    MOV   A,REG[0x26]        (0268)    mov   A, reg[PWM16_1_COMPARE_MSB_REG]
0B5F: 5C       MOV   X,A                (0269)    mov   X, A
0B60: 5D 22    MOV   A,REG[0x22]        (0270)    mov   A, reg[PWM16_1_COMPARE_LSB_REG]
                                        (0271)    RAM_EPILOGUE RAM_USE_CLASS_1
0B62: 7F       RET                      (0272)    ret
                                        (0273) 
                                        (0274) 
                                        (0275) .ENDSECTION
                                        (0276) 
                                        (0277) .SECTION
                                        (0278) ;-----------------------------------------------------------------------------
                                        (0279) ;  FUNCTION NAME: PWM16_1_wReadCounter
                                        (0280) ;
                                        (0281) ;  DESCRIPTION:
                                        (0282) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0283) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0284) ;     from the Count to the Compare register by holding the clock low in
                                        (0285) ;     the MSB PSoC block.
                                        (0286) ;-----------------------------------------------------------------------------
                                        (0287) ;
                                        (0288) ;  ARGUMENTS: None
                                        (0289) ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
                                        (0290) ;  SIDE EFFECTS:
                                        (0291) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0292) ;     2) The A and X registers may be modified by this or future implementations
                                        (0293) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0294) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0295) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0296) ;        functions.
                                        (0297) ;
                                        (0298)  PWM16_1_wReadCounter:
                                        (0299) _PWM16_1_wReadCounter:
                                        (0300)  wPWM16_1_ReadCounter:                           ; this name deprecated
                                        (0301) _wPWM16_1_ReadCounter:                           ; this name deprecated
                                        (0302) 
                                        (0303)    bOrigCompareValue:      EQU   0                  ; Frame offset to temp Compare store
                                        (0304)    bOrigClockSetting:      EQU   2                  ; Frame offset to temp Input   store
                                        (0305)    wCounter:               EQU   3                  ; Frame offset to temp Count   store
                                        (0306)    STACK_FRAME_SIZE:       EQU   5                  ; max stack frame size is 5 bytes
                                        (0307) 
                                        (0308)    RAM_PROLOGUE RAM_USE_CLASS_2
0B63: 4F       MOV   X,SP               (0309)    mov   X, SP                                      ; X <-  stack frame pointer
0B64: 5D 26    MOV   A,REG[0x26]        (0310)    mov   A, reg[PWM16_1_COMPARE_MSB_REG]         ; Save the Compare register on the stack
0B66: 08       PUSH  A                  (0311)    push  A                                          ;
0B67: 5D 22    MOV   A,REG[0x22]        (0312)    mov   A, reg[PWM16_1_COMPARE_LSB_REG]         ;
0B69: 08       PUSH  A                  (0313)    push  A                                          ;  -stack frame now 2 bytes-
0B6A: 41 23 FE AND   REG[0x23],0xFE     
0B6D: 71 10    OR    F,0x10             
                                        (0314)    PWM16_1_Stop_M                                ; Disable the PWM function
                                        (0315)    M8C_SetBank1                                     ;
0B6F: 5D 21    MOV   A,REG[0x21]        (0316)    mov   A, reg[PWM16_1_INPUT_LSB_REG]           ; save the LSB clock input setting
0B71: 08       PUSH  A                  (0317)    push  A                                          ;   on the stack (now 3 bytes) and ...
                                        (0318)                                                     ;   hold the clock low:
0B72: 62 21 00 MOV   REG[0x21],0x0      (0319)    mov   reg[PWM16_1_INPUT_LSB_REG], INPUT_REG_NULL
0B75: 70 EF    AND   F,0xEF             
                                        (0320)    M8C_SetBank0                                     ; Extract the Count via DR2 register
0B77: 5D 24    MOV   A,REG[0x24]        (0321)    mov   A, reg[PWM16_1_COUNTER_MSB_REG]         ; DR2 <- DR0 (in the MSB block)
0B79: 5D 26    MOV   A,REG[0x26]        (0322)    mov   A, reg[PWM16_1_COMPARE_MSB_REG]         ; Stash the Count MSB on the stack
0B7B: 08       PUSH  A                  (0323)    push  A                                          ;  -stack frame is now 4 bytes
0B7C: 5D 20    MOV   A,REG[0x20]        (0324)    mov   A, reg[PWM16_1_COUNTER_LSB_REG]         ; DR2 <- DR0 (in the LSB block)
0B7E: 5D 22    MOV   A,REG[0x22]        (0325)    mov   A, reg[PWM16_1_COMPARE_LSB_REG]         ; Stash the Count LSB on the stack
0B80: 08       PUSH  A                  (0326)    push  A                                          ;   -stack frame is now 5 bytes-
0B81: 52 00    MOV   A,[X+0]            (0327)    mov   A, [X+bOrigCompareValue]                   ; Restore the Compare MSB register
0B83: 60 26    MOV   REG[0x26],A        (0328)    mov   reg[PWM16_1_COMPARE_MSB_REG], A         ;
0B85: 52 01    MOV   A,[X+1]            (0329)    mov   A, [X+bOrigCompareValue+1]                 ; Restore the Compare LSB register
0B87: 60 22    MOV   REG[0x22],A        (0330)    mov   reg[PWM16_1_COMPARE_LSB_REG], A         ;
0B89: 71 10    OR    F,0x10             
                                        (0331)    M8C_SetBank1                                     ; ---Restore the PWM operation
0B8B: 52 02    MOV   A,[X+2]            (0332)    mov   A, [X+bOrigClockSetting]                   ; Grab the LSB clock setting...
0B8D: 60 21    MOV   REG[0x21],A        (0333)    mov   reg[PWM16_1_INPUT_LSB_REG], A           ;    and restore it
0B8F: 70 EF    AND   F,0xEF             
0B91: 43 23 01 OR    REG[0x23],0x1      
                                        (0334)    M8C_SetBank0                                     ;
                                        (0335)    PWM16_1_Start_M                               ; Now re-enable the PWM function
0B94: 18       POP   A                  (0336)    pop   A                                          ; Setup the return value
0B95: 20       POP   X                  (0337)    pop   X                                          ;
0B96: 38 FD    ADD   SP,0xFD            (0338)    ADD   SP, -(STACK_FRAME_SIZE-2)                  ; Zap remainder of stack frame
0B98: 70 3F    AND   F,0x3F             
0B9A: 71 C0    OR    F,0xC0             
                                        (0339)    RAM_EPILOGUE RAM_USE_CLASS_2
0B9C: 7F       RET                      (0340)    ret
                                        (0341) 
                                        (0342) .ENDSECTION
                                        (0343) 
                                        (0344) ; End of File PWM16_1.asm
FILE: .\delay.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: delay.asm
                                        (0004) ;;
                                        (0005) ;;  DESCRIPTION: Delay functions implementation file
                                        (0006) ;;
                                        (0007) ;;-----------------------------------------------------------------------------
                                        (0008) ;;  Copyright (c) Cypress MicroSystems 2002-2006. All Rights Reserved.
                                        (0009) ;;*****************************************************************************
                                        (0010) ;;*****************************************************************************
                                        (0011) 
                                        (0012) ;-----------------------------------------------------------------------------
                                        (0013) ;  Include Files
                                        (0014) ;-----------------------------------------------------------------------------
                                        (0015) include "m8c.inc"
                                        (0016) include "memory.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------------------------------------
                                        (0021) export  Delay50uTimes
                                        (0022) export _Delay50uTimes
                                        (0023) 
                                        (0024) export  Delay50u
                                        (0025) export _Delay50u
                                        (0026) 
                                        (0027) export  Delay10msTimes
                                        (0028) export _Delay10msTimes
                                        (0029) 
                                        (0030) 
                                        (0031) area text(rom)
                                        (0032) .SECTION
                                        (0033) ;-----------------------------------------------------------------------------
                                        (0034) ;  FUNCTION NAME: DelaySeconds
                                        (0035) ;
                                        (0036) ;  DESCRIPTION:
                                        (0037) ;     Delay increments of 10mSeconds
                                        (0038) ;
                                        (0039) ;-----------------------------------------------------------------------------
                                        (0040) ;
                                        (0041) ;  ARGUMENTS:
                                        (0042) ;     A contains the delay multiplier
                                        (0043) ;
                                        (0044) ;  RETURNS:
                                        (0045) ;
                                        (0046) ;  SIDE EFFECTS:
                                        (0047) ;    The A and X registers may be modified by this or future implementations
                                        (0048) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0049) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0050) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0051) ;    functions.
                                        (0052) 
                                        (0053) 
                                        (0054)  Delay10msTimes:
                                        (0055) _Delay10msTimes:
                                        (0056)     RAM_PROLOGUE RAM_USE_CLASS_1
0B9D: 08       PUSH  A                  (0057) 	push A
                                        (0058) 
0B9E: 50 C8    MOV   A,0xC8             (0059) 	mov A, 200
                                        (0060) 	DELAY50US:
0BA0: 90 16    CALL  _Delay50u          (0061)     call  Delay50u
0BA2: 78       DEC   A                  (0062)     dec   A
0BA3: BF FC    JNZ   0x0BA0             (0063)     jnz   DELAY50US
                                        (0064) 
0BA5: 18       POP   A                  (0065) 	pop A
0BA6: 78       DEC   A                  (0066) 	dec   A
0BA7: BF F5    JNZ   __UserModules_end|__text_start|_Delay10msTimes|Delay10msTimes(0067)     jnz   Delay10msTimes
                                        (0068) 
                                        (0069)     RAM_EPILOGUE RAM_USE_CLASS_1
0BA9: 7F       RET                      (0070)     ret
                                        (0071) .ENDSECTION
                                        (0072) 
                                        (0073) 
                                        (0074) 
                                        (0075) 
                                        (0076) .SECTION
                                        (0077) ;-----------------------------------------------------------------------------
                                        (0078) ;  FUNCTION NAME: Delay50uTimes
                                        (0079) ;
                                        (0080) ;  DESCRIPTION:
                                        (0081) ;     Delay increments of 50uSeconds
                                        (0082) ;
                                        (0083) ;-----------------------------------------------------------------------------
                                        (0084) ;
                                        (0085) ;  ARGUMENTS:
                                        (0086) ;     A contains the delay multiplier
                                        (0087) ;
                                        (0088) ;  RETURNS:
                                        (0089) ;
                                        (0090) ;  SIDE EFFECTS:
                                        (0091) ;    The A and X registers may be modified by this or future implementations
                                        (0092) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0093) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0094) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0095) ;    functions.
                                        (0096) ;
                                        (0097) ;
                                        (0098) 
                                        (0099)  Delay50uTimes:
                                        (0100) _Delay50uTimes:
                                        (0101)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0102) 
0BAA: 90 0C    CALL  _Delay50u          (0103)     call  Delay50u
0BAC: 78       DEC   A                  (0104) 	dec A
0BAD: BF FC    JNZ   _Delay50uTimes     (0105)     jnz   Delay50uTimes
                                        (0106) 
                                        (0107) 	
                                        (0108)     RAM_EPILOGUE RAM_USE_CLASS_1
0BAF: 7F       RET                      (0109)     ret
                                        (0110) 
                                        (0111) .ENDSECTION
                                        (0112) 
                                        (0113) ;-----------------------------------------------------------------------------
                                        (0114) ;  FUNCTION NAME: Delay50u
                                        (0115) ;
                                        (0116) ;  DESCRIPTION:
                                        (0117) ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
                                        (0118) ;     Slower clock frequencies the delay will be;
                                        (0119) ;           1.5
                                        (0120) ;        -------------- * 50uSec
                                        (0121) ;        clock_freq(MHz)
                                        (0122) ;
                                        (0123) ;
                                        (0124) ;-----------------------------------------------------------------------------
                                        (0125) ;
                                        (0126) ;  ARGUMENTS: none
                                        (0127) ;
                                        (0128) ;  RETURNS: none
                                        (0129) ;
                                        (0130) ;  SIDE EFFECTS:
                                        (0131) ;    The A and X registers may be modified by this or future implementations
                                        (0132) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0133) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0134) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0135) ;    functions.
                                        (0136) ;
                                        (0137) ;  THEORY of OPERATION or PROCEDURE:
                                        (0138) ;
                                        (0139) .LITERAL
                                        (0140)  Delay50u_Table::
                                        (0141)      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
                                        (0142) ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
                                        (0143) .ENDLITERAL
                                        (0144) .SECTION
                                        (0145) 
                                        (0146)   Delay50u:
                                        (0147)  _Delay50u:                      ; [11]  Call
                                        (0148)     RAM_PROLOGUE RAM_USE_CLASS_1
0BB8: 08       PUSH  A                  (0149)     push  A
0BB9: 71 10    OR    F,0x10             
                                        (0150)     M8C_SetBank1                       ; [4]
0BBB: 5D E0    MOV   A,REG[0xE0]        (0151)     mov   A, reg[OSC_CR0]              ; [6] Get delay value
0BBD: 70 EF    AND   F,0xEF             
                                        (0152)     M8C_SetBank0                       ; [4]
0BBF: 21 07    AND   A,0x7              (0153)     and   A,07h                        ; [4] Mask off only the clock bits
0BC1: 39 05    CMP   A,0x5              (0154)     cmp   A,05h
0BC3: D0 06    JNC   0x0BCA             (0155)     jnc   Delay50u_End
0BC5: FF E9    INDEX Delay50u_Table     (0156)     index Delay50u_Table               ; [13] Get delay value
                                        (0157) Delay50u_Loop:                         ;
0BC7: 78       DEC   A                  (0158)     dec   A                            ; [4]
0BC8: BF FE    JNZ   0x0BC7             (0159)     jnz   Delay50u_Loop                ; [5]
                                        (0160) Delay50u_End:
0BCA: 18       POP   A                  (0161)     pop   A
                                        (0162)     RAM_EPILOGUE RAM_USE_CLASS_1
0BCB: 7F       RET                      (0163)     ret
FILE: C:\cygwin\home\smihica\code\smapo\beacon\bot\bot\main.c
(0001) //----------------------------------------------------------------------------
(0002) // C main line
(0003) //----------------------------------------------------------------------------
(0004) #include <m8c.h>        // part specific constants and macros
(0005) #include <stdlib.h>
(0006) #include "delay.h"
(0007) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0008) 
(0009) #define WAIT_FOR_SEND_1() { while( !( UART_1_bReadTxStatus() & UART_1_TX_BUFFER_EMPTY ) ); }
(0010) #define WAIT_FOR_SEND_2() { while( !( UART_2_bReadTxStatus() & UART_2_TX_BUFFER_EMPTY ) ); }
(0011) #define OFF(port, bit)  PRT##port##DR = (PRT##port##DR & (~bit))
(0012) #define ON(port, bit)   PRT##port##DR = (PRT##port##DR | bit)
(0013) #define BATTSW0  (1 << 6)
(0014) #define BATTSW1  (1 << 4)
(0015) #define LATCH    (1 << 2)
(0016) #define SCK      (1 << 0)
(0017) #define DATA     (1 << 6)
(0018) #define RX_SIZE  95
(0019) 
(0020) #define ARGLEN 6
(0021) unsigned char data[ARGLEN]; // dir, pan, acc, battsw0, battsw1,
(0022) 
(0023) void init_aq(void)
(0024) {
_init_aq:
  i                    --> X+0
    0BCC: 10       PUSH  X
    0BCD: 4F       MOV   X,SP
    0BCE: 38 01    ADD   SP,0x1
    0BD0: 80 40    JMP   0x0C11
(0025) 	unsigned char i;
(0026) 	while (1) {
(0027) 		UART_2_CPutString("?");
    0BD2: 10       PUSH  X
    0BD3: 50 01    MOV   A,0x1
    0BD5: 08       PUSH  A
    0BD6: 50 FB    MOV   A,0xFB
    0BD8: 5C       MOV   X,A
    0BD9: 18       POP   A
    0BDA: 7C 07 17 LCALL _UART_2_CPutString
    0BDD: 20       POP   X
(0028) 		WAIT_FOR_SEND_2();
    0BDE: 10       PUSH  X
    0BDF: 7C 06 13 LCALL _bUART_2_ReadTxStatus|UART_2_bReadTxStatus|bUART_2_ReadTxStatus|_UART_2_bReadTxStatus
    0BE2: 20       POP   X
    0BE3: 62 D0 00 MOV   REG[0xD0],0x0
    0BE6: 53 7D    MOV   [__r0],A
    0BE8: 47 7D 10 TST   [__r0],0x10
    0BEB: AF F2    JZ    0x0BDE
(0029) 		for(i = 0; i < 200; i++) {
    0BED: 56 00 00 MOV   [X+0],0x0
    0BF0: 80 1B    JMP   0x0C0C
(0030) 			Delay50uTimes(100); // delay 5ms
    0BF2: 10       PUSH  X
    0BF3: 50 64    MOV   A,0x64
    0BF5: 7C 0B AA LCALL _Delay50uTimes
(0031) 			if (UART_2_bCmdCheck()){
    0BF8: 7C 07 48 LCALL _UART_2_bCmdCheck
    0BFB: 20       POP   X
    0BFC: 62 D0 00 MOV   REG[0xD0],0x0
    0BFF: 39 00    CMP   A,0x0
    0C01: A0 08    JZ    0x0C0A
(0032) 				UART_2_CmdReset();
    0C03: 10       PUSH  X
    0C04: 7C 07 32 LCALL _UART_2_CmdReset
    0C07: 20       POP   X
(0033) 				return;
    0C08: 80 0A    JMP   0x0C13
(0034) 			}
(0035) 		}
    0C0A: 77 00    INC   [X+0]
    0C0C: 3D 00 C8 CMP   [X+0],0xC8
    0C0F: CF E2    JC    0x0BF2
(0036) 	}
    0C11: 8F C0    JMP   0x0BD2
    0C13: 38 FF    ADD   SP,0xFF
    0C15: 20       POP   X
    0C16: 7F       RET   
(0037) }
(0038) 
(0039) void init(void)     //IO Initialize
(0040) {
(0041) 	//UART setup
(0042) 	UART_1_CmdReset(); 						//Initialize receiver/cmd buf.
_init:
    0C17: 10       PUSH  X
    0C18: 7C 09 91 LCALL _UART_1_CmdReset
(0043) 	UART_1_IntCntl(UART_1_ENABLE_RX_INT);   //Enable RX interrupts
    0C1B: 50 01    MOV   A,0x1
    0C1D: 7C 08 8E LCALL _UART_1_IntCntl
(0044) 	UART_1_Start(UART_1_PARITY_NONE);		//Enable UART
    0C20: 50 00    MOV   A,0x0
    0C22: 7C 08 5F LCALL _UART_1_Start
(0045) 	
(0046) 	UART_2_CmdReset(); 						//Initialize receiver/cmd buf.
    0C25: 7C 07 32 LCALL _UART_2_CmdReset
(0047) 	UART_2_IntCntl(UART_2_ENABLE_RX_INT);   //Enable RX interrupts
    0C28: 50 01    MOV   A,0x1
    0C2A: 7C 06 2F LCALL _UART_2_IntCntl
(0048) 	UART_2_Start(UART_2_PARITY_NONE);		//Enable UART
    0C2D: 50 00    MOV   A,0x0
    0C2F: 7C 06 00 LCALL _UART_2_Start
    0C32: 20       POP   X
(0049) 
(0050) 	//CPU ALL Interrupt Enable
(0051) 	M8C_EnableGInt;							//CPU ALL Interrupt Enable
    0C33: 71 01    OR    F,0x1
(0052) 
(0053) 	PWM16_1_Start();
    0C35: 10       PUSH  X
    0C36: 7C 0B 49 LCALL _PWM16_1_Start
(0054) 	PWM16_2_Start();
    0C39: 7C 0A EC LCALL _PWM16_2_Start
(0055) 	PWM16_3_Start();
    0C3C: 7C 0A 8F LCALL _PWM16_3_Start
(0056) 	PWM16_4_Start();
    0C3F: 7C 0A 32 LCALL _PWM16_4_Start
    0C42: 20       POP   X
(0057) 	// DAC8_2_Start(DAC8_2_HIGHPOWER);			// power up the DAC
(0058) 	// DAC8_2_WriteStall(0);
(0059) 	
(0060) 	ON(0, LATCH);
    0C43: 43 00 04 OR    REG[0x0],0x4
(0061) 	ON(0, SCK);
    0C46: 43 00 01 OR    REG[0x0],0x1
(0062) 	OFF(0, BATTSW0);
    0C49: 41 00 BF AND   REG[0x0],0xBF
(0063) 	OFF(0, BATTSW1);
    0C4C: 41 00 EF AND   REG[0x0],0xEF
(0064) 	
(0065) 	data[0] = 127; // accel
    0C4F: 62 D0 00 MOV   REG[0xD0],0x0
    0C52: 55 7E 7F MOV   [data],0x7F
(0066) 	data[1] = 127; // direction
    0C55: 55 7F 7F MOV   [data+1],0x7F
(0067) 	data[2] = 127; // pan_h
    0C58: 55 80 7F MOV   [data+2],0x7F
(0068) 	data[3] = 127; // pan_v
    0C5B: 55 81 7F MOV   [data+3],0x7F
(0069) 	data[4] = 0;   // batt1
    0C5E: 55 82 00 MOV   [data+4],0x0
(0070) 	data[5] = 0;   // batt2
    0C61: 55 83 00 MOV   [data+5],0x0
(0071) 	
(0072) 	// setup aquestalk
(0073) 	init_aq();
    0C64: 9F 66    CALL  _init_aq
    0C66: 7F       RET   
(0074) }
(0075) 
(0076) void serial_print(const char * s, unsigned int l, unsigned int crlf)
(0077) {
_serial_print:
  i                    --> X+0
  crlf                 --> X-9
  l                    --> X-7
  s                    --> X-5
    0C67: 10       PUSH  X
    0C68: 4F       MOV   X,SP
    0C69: 38 02    ADD   SP,0x2
(0078) 	unsigned int i;
(0079) 	for(i=0; i < l; i++){
    0C6B: 56 01 00 MOV   [X+1],0x0
    0C6E: 56 00 00 MOV   [X+0],0x0
    0C71: 80 2C    JMP   0x0C9E
(0080) 		UART_1_SendData( *(s + i) );
    0C73: 62 D0 00 MOV   REG[0xD0],0x0
    0C76: 52 01    MOV   A,[X+1]
    0C78: 03 FC    ADD   A,[X-4]
    0C7A: 53 7C    MOV   [__r1],A
    0C7C: 52 00    MOV   A,[X+0]
    0C7E: 0B FB    ADC   A,[X-5]
    0C80: 10       PUSH  X
    0C81: 58 7C    MOV   X,[__r1]
    0C83: 28       ROMX  
    0C84: 20       POP   X
    0C85: 10       PUSH  X
    0C86: 7C 08 6F LCALL _UART_1_SendData
    0C89: 20       POP   X
(0081) 		WAIT_FOR_SEND_1();
    0C8A: 10       PUSH  X
    0C8B: 7C 08 72 LCALL _bUART_1_ReadTxStatus|_UART_1_bReadTxStatus|UART_1_bReadTxStatus
    0C8E: 20       POP   X
    0C8F: 62 D0 00 MOV   REG[0xD0],0x0
    0C92: 53 7D    MOV   [__r0],A
    0C94: 47 7D 10 TST   [__r0],0x10
    0C97: AF F2    JZ    0x0C8A
(0082) 	}
    0C99: 77 01    INC   [X+1]
    0C9B: 0F 00 00 ADC   [X+0],0x0
    0C9E: 52 01    MOV   A,[X+1]
    0CA0: 13 FA    SUB   A,[X-6]
    0CA2: 52 00    MOV   A,[X+0]
    0CA4: 1B F9    SBB   A,[X-7]
    0CA6: CF CC    JC    0x0C73
(0083) 	if (crlf != 0) UART_1_PutCRLF();
    0CA8: 3D F7 00 CMP   [X-9],0x0
    0CAB: B0 06    JNZ   0x0CB2
    0CAD: 3D F8 00 CMP   [X-8],0x0
    0CB0: A0 06    JZ    0x0CB7
    0CB2: 10       PUSH  X
    0CB3: 7C 09 88 LCALL _UART_1_PutCRLF
    0CB6: 20       POP   X
    0CB7: 38 FE    ADD   SP,0xFE
    0CB9: 20       POP   X
    0CBA: 7F       RET   
(0084) }
(0085) 
(0086) void serial_print_2(char * s, unsigned int l, unsigned int crlf)
(0087) {
_serial_print_2:
  i                    --> X+0
  crlf                 --> X-9
  l                    --> X-7
  s                    --> X-5
    0CBB: 10       PUSH  X
    0CBC: 4F       MOV   X,SP
    0CBD: 38 02    ADD   SP,0x2
(0088) 	unsigned int i;
(0089) 	for(i=0; i < l; i++){
    0CBF: 56 01 00 MOV   [X+1],0x0
    0CC2: 56 00 00 MOV   [X+0],0x0
    0CC5: 80 2B    JMP   0x0CF1
(0090) 		UART_2_SendData( *(s + i) );
    0CC7: 62 D0 00 MOV   REG[0xD0],0x0
    0CCA: 52 01    MOV   A,[X+1]
    0CCC: 03 FC    ADD   A,[X-4]
    0CCE: 53 7C    MOV   [__r1],A
    0CD0: 52 00    MOV   A,[X+0]
    0CD2: 0B FB    ADC   A,[X-5]
    0CD4: 60 D4    MOV   REG[0xD4],A
    0CD6: 3E 7C    MVI   A,[__r1]
    0CD8: 10       PUSH  X
    0CD9: 7C 06 10 LCALL _UART_2_SendData
    0CDC: 20       POP   X
(0091) 		WAIT_FOR_SEND_2();
    0CDD: 10       PUSH  X
    0CDE: 7C 06 13 LCALL _bUART_2_ReadTxStatus|UART_2_bReadTxStatus|bUART_2_ReadTxStatus|_UART_2_bReadTxStatus
    0CE1: 20       POP   X
    0CE2: 62 D0 00 MOV   REG[0xD0],0x0
    0CE5: 53 7D    MOV   [__r0],A
    0CE7: 47 7D 10 TST   [__r0],0x10
    0CEA: AF F2    JZ    0x0CDD
(0092) 	}
    0CEC: 77 01    INC   [X+1]
    0CEE: 0F 00 00 ADC   [X+0],0x0
    0CF1: 52 01    MOV   A,[X+1]
    0CF3: 13 FA    SUB   A,[X-6]
    0CF5: 52 00    MOV   A,[X+0]
    0CF7: 1B F9    SBB   A,[X-7]
    0CF9: CF CD    JC    0x0CC7
(0093) 	if (crlf != 0) UART_2_PutCRLF();
    0CFB: 3D F7 00 CMP   [X-9],0x0
    0CFE: B0 06    JNZ   0x0D05
    0D00: 3D F8 00 CMP   [X-8],0x0
    0D03: A0 06    JZ    0x0D0A
    0D05: 10       PUSH  X
    0D06: 7C 07 29 LCALL _UART_2_PutCRLF
    0D09: 20       POP   X
    0D0A: 38 FE    ADD   SP,0xFE
    0D0C: 20       POP   X
    0D0D: 7F       RET   
(0094) }
(0095) 
(0096) void send_test(void) //send test
(0097) {
_send_test:
  data                 --> X+4
  send_buf             --> X+2
  c                    --> X+0
    0D0E: 10       PUSH  X
    0D0F: 4F       MOV   X,SP
    0D10: 38 36    ADD   SP,0x36
(0098) 	char *send_buf; //RS232C
(0099) 	unsigned int c;
(0100) 	char data[50]="ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    0D12: 62 D0 00 MOV   REG[0xD0],0x0
    0D15: 55 7C A0 MOV   [__r1],0xA0
    0D18: 55 7D 01 MOV   [__r0],0x1
    0D1B: 5A 7A    MOV   [__r3],X
    0D1D: 06 7A 04 ADD   [__r3],0x4
    0D20: 62 D5 07 MOV   REG[0xD5],0x7
    0D23: 10       PUSH  X
    0D24: 55 75 00 MOV   [__rX],0x0
    0D27: 51 7D    MOV   A,[__r0]
    0D29: 58 7C    MOV   X,[__r1]
    0D2B: 08       PUSH  A
    0D2C: 28       ROMX  
    0D2D: 62 D0 00 MOV   REG[0xD0],0x0
    0D30: 3F 7A    MVI   [__r3],A
    0D32: 18       POP   A
    0D33: 75       INC   X
    0D34: 09 00    ADC   A,0x0
    0D36: 76 75    INC   [__rX]
    0D38: 3C 75 32 CMP   [__rX],0x32
    0D3B: BF EF    JNZ   0x0D2B
(0101) 
(0102) 	UART_1_CPutString("\r\nPSoC UART RS-232C program \r\n");
    0D3D: 50 01    MOV   A,0x1
    0D3F: 08       PUSH  A
    0D40: 50 DC    MOV   A,0xDC
    0D42: 5C       MOV   X,A
    0D43: 18       POP   A
    0D44: 7C 09 76 LCALL _UART_1_CPutString
    0D47: 20       POP   X
(0103) 	WAIT_FOR_SEND_1();
    0D48: 10       PUSH  X
    0D49: 7C 08 72 LCALL _bUART_1_ReadTxStatus|_UART_1_bReadTxStatus|UART_1_bReadTxStatus
    0D4C: 20       POP   X
    0D4D: 62 D0 00 MOV   REG[0xD0],0x0
    0D50: 53 7D    MOV   [__r0],A
    0D52: 47 7D 10 TST   [__r0],0x10
    0D55: AF F2    JZ    0x0D48
(0104) 
(0105) 	send_buf = &data[0];
    0D57: 5A 7C    MOV   [__r1],X
    0D59: 06 7C 04 ADD   [__r1],0x4
    0D5C: 51 7C    MOV   A,[__r1]
    0D5E: 54 03    MOV   [X+3],A
    0D60: 56 02 07 MOV   [X+2],0x7
(0106) 	for(c=0; c<26; c++){
    0D63: 56 01 00 MOV   [X+1],0x0
    0D66: 56 00 00 MOV   [X+0],0x0
    0D69: 80 2B    JMP   0x0D95
(0107) 		UART_1_SendData( *(send_buf + c) );
    0D6B: 62 D0 00 MOV   REG[0xD0],0x0
    0D6E: 52 01    MOV   A,[X+1]
    0D70: 03 03    ADD   A,[X+3]
    0D72: 53 7C    MOV   [__r1],A
    0D74: 52 00    MOV   A,[X+0]
    0D76: 0B 02    ADC   A,[X+2]
    0D78: 60 D4    MOV   REG[0xD4],A
    0D7A: 3E 7C    MVI   A,[__r1]
    0D7C: 10       PUSH  X
    0D7D: 7C 08 6F LCALL _UART_1_SendData
    0D80: 20       POP   X
(0108) 		WAIT_FOR_SEND_1();
    0D81: 10       PUSH  X
    0D82: 7C 08 72 LCALL _bUART_1_ReadTxStatus|_UART_1_bReadTxStatus|UART_1_bReadTxStatus
    0D85: 20       POP   X
    0D86: 62 D0 00 MOV   REG[0xD0],0x0
    0D89: 53 7D    MOV   [__r0],A
    0D8B: 47 7D 10 TST   [__r0],0x10
    0D8E: AF F2    JZ    0x0D81
(0109) 	}
    0D90: 77 01    INC   [X+1]
    0D92: 0F 00 00 ADC   [X+0],0x0
    0D95: 52 01    MOV   A,[X+1]
    0D97: 11 1A    SUB   A,0x1A
    0D99: 52 00    MOV   A,[X+0]
    0D9B: 19 00    SBB   A,0x0
    0D9D: CF CD    JC    0x0D6B
(0110) 	UART_1_PutCRLF();
    0D9F: 10       PUSH  X
    0DA0: 7C 09 88 LCALL _UART_1_PutCRLF
    0DA3: 20       POP   X
    0DA4: 38 CA    ADD   SP,0xCA
    0DA6: 20       POP   X
    0DA7: 7F       RET   
(0111) }
(0112) 
(0113) void command_w(void)
(0114) {
_command_w:
  recvd                --> X+103
  buff                 --> X+99
  i                    --> X+98
  j                    --> X+97
  d                    --> X+96
  send_buff            --> X+1
  c                    --> X+0
    0DA8: 10       PUSH  X
    0DA9: 4F       MOV   X,SP
    0DAA: 38 69    ADD   SP,0x69
(0115) 	char *recvd;
(0116) 	char buff[4];
(0117) 	char send_buff[RX_SIZE];
(0118) 	unsigned char c, i, j;
(0119) 	char d;
(0120) 
(0121) 	recvd = UART_1_szGetRestOfParams();
    0DAC: 10       PUSH  X
    0DAD: 7C 0A 1E LCALL _UART_1_szGetRestOfParams
    0DB0: 62 D0 00 MOV   REG[0xD0],0x0
    0DB3: 53 7D    MOV   [__r0],A
    0DB5: 5A 7C    MOV   [__r1],X
    0DB7: 20       POP   X
    0DB8: 51 7C    MOV   A,[__r1]
    0DBA: 54 68    MOV   [X+104],A
    0DBC: 51 7D    MOV   A,[__r0]
    0DBE: 54 67    MOV   [X+103],A
(0122) 	for ( c = 0, i = 0, j = 0; c < RX_SIZE; c++ ) {
    0DC0: 56 00 00 MOV   [X+0],0x0
    0DC3: 56 62 00 MOV   [X+98],0x0
    0DC6: 56 61 00 MOV   [X+97],0x0
    0DC9: 80 9C    JMP   0x0E66
(0123) 		d = *(recvd + c);
    0DCB: 62 D0 00 MOV   REG[0xD0],0x0
    0DCE: 52 00    MOV   A,[X+0]
    0DD0: 53 7C    MOV   [__r1],A
    0DD2: 55 7D 00 MOV   [__r0],0x0
    0DD5: 52 68    MOV   A,[X+104]
    0DD7: 04 7C    ADD   [__r1],A
    0DD9: 52 67    MOV   A,[X+103]
    0DDB: 0C 7D    ADC   [__r0],A
    0DDD: 51 7D    MOV   A,[__r0]
    0DDF: 60 D4    MOV   REG[0xD4],A
    0DE1: 3E 7C    MVI   A,[__r1]
    0DE3: 54 60    MOV   [X+96],A
(0124) 		if (d == ' ' || d == '\r' || d == '\n' || d == '\0') {
    0DE5: 3D 60 20 CMP   [X+96],0x20
    0DE8: A0 10    JZ    0x0DF9
    0DEA: 3D 60 0D CMP   [X+96],0xD
    0DED: A0 0B    JZ    0x0DF9
    0DEF: 3D 60 0A CMP   [X+96],0xA
    0DF2: A0 06    JZ    0x0DF9
    0DF4: 3D 60 00 CMP   [X+96],0x0
    0DF7: B0 4F    JNZ   0x0E47
(0125) 			buff[i] = '\0';
    0DF9: 62 D0 00 MOV   REG[0xD0],0x0
    0DFC: 55 7D 07 MOV   [__r0],0x7
    0DFF: 5A 7C    MOV   [__r1],X
    0E01: 06 7C 63 ADD   [__r1],0x63
    0E04: 52 62    MOV   A,[X+98]
    0E06: 02 7C    ADD   A,[__r1]
    0E08: 53 7C    MOV   [__r1],A
    0E0A: 50 00    MOV   A,0x0
    0E0C: 0A 7D    ADC   A,[__r0]
    0E0E: 60 D5    MOV   REG[0xD5],A
    0E10: 50 00    MOV   A,0x0
    0E12: 3F 7C    MVI   [__r1],A
(0126) 			data[j] = (unsigned char)atoi(buff);
    0E14: 5A 7C    MOV   [__r1],X
    0E16: 06 7C 63 ADD   [__r1],0x63
    0E19: 50 07    MOV   A,0x7
    0E1B: 08       PUSH  A
    0E1C: 51 7C    MOV   A,[__r1]
    0E1E: 08       PUSH  A
    0E1F: 7C 19 3E LCALL _atoi
    0E22: 38 FE    ADD   SP,0xFE
    0E24: 62 D0 00 MOV   REG[0xD0],0x0
    0E27: 51 7C    MOV   A,[__r1]
    0E29: 53 7D    MOV   [__r0],A
    0E2B: 52 61    MOV   A,[X+97]
    0E2D: 53 7A    MOV   [__r3],A
    0E2F: 55 7B 00 MOV   [__r2],0x0
    0E32: 06 7A 7E ADD   [__r3],0x7E
    0E35: 0E 7B 00 ADC   [__r2],0x0
    0E38: 51 7B    MOV   A,[__r2]
    0E3A: 60 D5    MOV   REG[0xD5],A
    0E3C: 51 7D    MOV   A,[__r0]
    0E3E: 3F 7A    MVI   [__r3],A
(0127) 			j++;
    0E40: 77 61    INC   [X+97]
(0128) 			i = 0;
    0E42: 56 62 00 MOV   [X+98],0x0
(0129) 			continue;
    0E45: 80 1E    JMP   0x0E64
(0130) 		}
(0131) 		buff[i] = d;
    0E47: 62 D0 00 MOV   REG[0xD0],0x0
    0E4A: 55 7D 07 MOV   [__r0],0x7
    0E4D: 5A 7C    MOV   [__r1],X
    0E4F: 06 7C 63 ADD   [__r1],0x63
    0E52: 52 62    MOV   A,[X+98]
    0E54: 02 7C    ADD   A,[__r1]
    0E56: 53 7C    MOV   [__r1],A
    0E58: 50 00    MOV   A,0x0
    0E5A: 0A 7D    ADC   A,[__r0]
    0E5C: 60 D5    MOV   REG[0xD5],A
    0E5E: 52 60    MOV   A,[X+96]
    0E60: 3F 7C    MVI   [__r1],A
(0132) 		i++;
    0E62: 77 62    INC   [X+98]
(0133) 	}
    0E64: 77 00    INC   [X+0]
    0E66: 3D 00 5F CMP   [X+0],0x5F
    0E69: CF 61    JC    0x0DCB
(0134) 	send_buff[0] = 'p';
    0E6B: 56 01 70 MOV   [X+1],0x70
(0135) 	send_buff[1] = ' ';
    0E6E: 56 02 20 MOV   [X+2],0x20
(0136) 	for(c = 2, j = 0; c < RX_SIZE; c++, j++){
    0E71: 56 00 02 MOV   [X+0],0x2
    0E74: 56 61 00 MOV   [X+97],0x0
    0E77: 80 7F    JMP   0x0EF7
(0137) 		itoa(send_buff + c,(int)(data[j]), 10);
    0E79: 50 00    MOV   A,0x0
    0E7B: 08       PUSH  A
    0E7C: 50 0A    MOV   A,0xA
    0E7E: 08       PUSH  A
    0E7F: 62 D0 00 MOV   REG[0xD0],0x0
    0E82: 52 61    MOV   A,[X+97]
    0E84: 53 7C    MOV   [__r1],A
    0E86: 55 7D 00 MOV   [__r0],0x0
    0E89: 06 7C 7E ADD   [__r1],0x7E
    0E8C: 0E 7D 00 ADC   [__r0],0x0
    0E8F: 51 7D    MOV   A,[__r0]
    0E91: 60 D4    MOV   REG[0xD4],A
    0E93: 3E 7C    MVI   A,[__r1]
    0E95: 53 7C    MOV   [__r1],A
    0E97: 50 00    MOV   A,0x0
    0E99: 08       PUSH  A
    0E9A: 51 7C    MOV   A,[__r1]
    0E9C: 08       PUSH  A
    0E9D: 55 7D 07 MOV   [__r0],0x7
    0EA0: 5A 7C    MOV   [__r1],X
    0EA2: 06 7C 01 ADD   [__r1],0x1
    0EA5: 52 00    MOV   A,[X+0]
    0EA7: 02 7C    ADD   A,[__r1]
    0EA9: 53 7C    MOV   [__r1],A
    0EAB: 50 00    MOV   A,0x0
    0EAD: 0A 7D    ADC   A,[__r0]
    0EAF: 08       PUSH  A
    0EB0: 51 7C    MOV   A,[__r1]
    0EB2: 08       PUSH  A
    0EB3: 7C 1A 7F LCALL _itoa
    0EB6: 38 FA    ADD   SP,0xFA
(0138) 		if ((ARGLEN - 1) <= j) break;
    0EB8: 3D 61 05 CMP   [X+97],0x5
    0EBB: C0 05    JC    0x0EC1
    0EBD: 80 3E    JMP   0x0EFC
(0139) 		while (send_buff[c] != '\0') c++;
    0EBF: 77 00    INC   [X+0]
    0EC1: 62 D0 00 MOV   REG[0xD0],0x0
    0EC4: 55 7D 07 MOV   [__r0],0x7
    0EC7: 5A 7C    MOV   [__r1],X
    0EC9: 06 7C 01 ADD   [__r1],0x1
    0ECC: 52 00    MOV   A,[X+0]
    0ECE: 02 7C    ADD   A,[__r1]
    0ED0: 53 7C    MOV   [__r1],A
    0ED2: 50 00    MOV   A,0x0
    0ED4: 0A 7D    ADC   A,[__r0]
    0ED6: 60 D4    MOV   REG[0xD4],A
    0ED8: 3E 7C    MVI   A,[__r1]
    0EDA: 39 00    CMP   A,0x0
    0EDC: BF E2    JNZ   0x0EBF
(0140) 		send_buff[c] = ' ';
    0EDE: 5A 7C    MOV   [__r1],X
    0EE0: 06 7C 01 ADD   [__r1],0x1
    0EE3: 52 00    MOV   A,[X+0]
    0EE5: 02 7C    ADD   A,[__r1]
    0EE7: 53 7C    MOV   [__r1],A
    0EE9: 50 00    MOV   A,0x0
    0EEB: 0A 7D    ADC   A,[__r0]
    0EED: 60 D5    MOV   REG[0xD5],A
    0EEF: 50 20    MOV   A,0x20
    0EF1: 3F 7C    MVI   [__r1],A
(0141) 	}
    0EF3: 77 00    INC   [X+0]
    0EF5: 77 61    INC   [X+97]
    0EF7: 3D 00 5F CMP   [X+0],0x5F
    0EFA: CF 7E    JC    0x0E79
(0142) 	for(c = 0; c < RX_SIZE; c++){
    0EFC: 56 00 00 MOV   [X+0],0x0
    0EFF: 80 3B    JMP   0x0F3B
(0143) 		d = *(send_buff + c);
    0F01: 62 D0 00 MOV   REG[0xD0],0x0
    0F04: 55 7D 07 MOV   [__r0],0x7
    0F07: 5A 7C    MOV   [__r1],X
    0F09: 06 7C 01 ADD   [__r1],0x1
    0F0C: 52 00    MOV   A,[X+0]
    0F0E: 02 7C    ADD   A,[__r1]
    0F10: 53 7C    MOV   [__r1],A
    0F12: 50 00    MOV   A,0x0
    0F14: 0A 7D    ADC   A,[__r0]
    0F16: 60 D4    MOV   REG[0xD4],A
    0F18: 3E 7C    MVI   A,[__r1]
    0F1A: 54 60    MOV   [X+96],A
(0144) 		if ( d == '\0' ) break;
    0F1C: 3D 60 00 CMP   [X+96],0x0
    0F1F: B0 03    JNZ   0x0F23
    0F21: 80 1E    JMP   0x0F40
(0145) 		UART_1_SendData( d );
    0F23: 10       PUSH  X
    0F24: 52 60    MOV   A,[X+96]
    0F26: 7C 08 6F LCALL _UART_1_SendData
    0F29: 20       POP   X
(0146) 		WAIT_FOR_SEND_1();
    0F2A: 10       PUSH  X
    0F2B: 7C 08 72 LCALL _bUART_1_ReadTxStatus|_UART_1_bReadTxStatus|UART_1_bReadTxStatus
    0F2E: 20       POP   X
    0F2F: 62 D0 00 MOV   REG[0xD0],0x0
    0F32: 53 7D    MOV   [__r0],A
    0F34: 47 7D 10 TST   [__r0],0x10
    0F37: AF F2    JZ    0x0F2A
(0147) 	}
    0F39: 77 00    INC   [X+0]
    0F3B: 3D 00 5F CMP   [X+0],0x5F
    0F3E: CF C2    JC    0x0F01
(0148) 	UART_1_PutCRLF();
    0F40: 10       PUSH  X
    0F41: 7C 09 88 LCALL _UART_1_PutCRLF
(0149) 	UART_1_CmdReset();
    0F44: 7C 09 91 LCALL _UART_1_CmdReset
    0F47: 20       POP   X
    0F48: 38 97    ADD   SP,0x97
    0F4A: 20       POP   X
    0F4B: 7F       RET   
(0150) }
(0151) 
(0152) void command_v(void)
(0153) {
_command_v:
  buff_top             --> X+196
  j                    --> X+195
  buff                 --> X+100
  recvd                --> X+98
  send_buff            --> X+3
  i                    --> X+2
  c                    --> X+1
  d                    --> X+0
    0F4C: 10       PUSH  X
    0F4D: 4F       MOV   X,SP
    0F4E: 38 C6    ADD   SP,0xC6
(0154) 	char *recvd;
(0155) 	char buff[RX_SIZE];
(0156) 	char send_buff[RX_SIZE];
(0157) 	char * buff_top = &(buff[0]);
    0F50: 62 D0 00 MOV   REG[0xD0],0x0
    0F53: 5A 7C    MOV   [__r1],X
    0F55: 06 7C 64 ADD   [__r1],0x64
    0F58: 51 7C    MOV   A,[__r1]
    0F5A: 54 C5    MOV   [X-59],A
    0F5C: 56 C4 07 MOV   [X-60],0x7
(0158) 	unsigned char c, i, j;
(0159) 	char d;
(0160) 
(0161) 	recvd = UART_1_szGetRestOfParams();
    0F5F: 10       PUSH  X
    0F60: 7C 0A 1E LCALL _UART_1_szGetRestOfParams
    0F63: 62 D0 00 MOV   REG[0xD0],0x0
    0F66: 53 7D    MOV   [__r0],A
    0F68: 5A 7C    MOV   [__r1],X
    0F6A: 20       POP   X
    0F6B: 51 7C    MOV   A,[__r1]
    0F6D: 54 63    MOV   [X+99],A
    0F6F: 51 7D    MOV   A,[__r0]
    0F71: 54 62    MOV   [X+98],A
(0162) 	for ( c = 0, i = 0; c < RX_SIZE; c++ ) {
    0F73: 56 01 00 MOV   [X+1],0x0
    0F76: 56 02 00 MOV   [X+2],0x0
    0F79: 80 66    JMP   0x0FE0
(0163) 		d = *(recvd + c);
    0F7B: 62 D0 00 MOV   REG[0xD0],0x0
    0F7E: 52 01    MOV   A,[X+1]
    0F80: 53 7C    MOV   [__r1],A
    0F82: 55 7D 00 MOV   [__r0],0x0
    0F85: 52 63    MOV   A,[X+99]
    0F87: 04 7C    ADD   [__r1],A
    0F89: 52 62    MOV   A,[X+98]
    0F8B: 0C 7D    ADC   [__r0],A
    0F8D: 51 7D    MOV   A,[__r0]
    0F8F: 60 D4    MOV   REG[0xD4],A
    0F91: 3E 7C    MVI   A,[__r1]
    0F93: 54 00    MOV   [X+0],A
(0164) 		if (d == '\r' || d == '\n' || d == '\0') {
    0F95: 3D 00 0D CMP   [X+0],0xD
    0F98: A0 0B    JZ    0x0FA4
    0F9A: 3D 00 0A CMP   [X+0],0xA
    0F9D: A0 06    JZ    0x0FA4
    0F9F: 3D 00 00 CMP   [X+0],0x0
    0FA2: B0 1E    JNZ   0x0FC1
(0165) 			buff[i] = '\r';
    0FA4: 62 D0 00 MOV   REG[0xD0],0x0
    0FA7: 55 7D 07 MOV   [__r0],0x7
    0FAA: 5A 7C    MOV   [__r1],X
    0FAC: 06 7C 64 ADD   [__r1],0x64
    0FAF: 52 02    MOV   A,[X+2]
    0FB1: 02 7C    ADD   A,[__r1]
    0FB3: 53 7C    MOV   [__r1],A
    0FB5: 50 00    MOV   A,0x0
    0FB7: 0A 7D    ADC   A,[__r0]
    0FB9: 60 D5    MOV   REG[0xD5],A
    0FBB: 50 0D    MOV   A,0xD
    0FBD: 3F 7C    MVI   [__r1],A
(0166) 			break;
    0FBF: 80 25    JMP   0x0FE5
(0167) 		}
(0168) 		buff[i] = d;
    0FC1: 62 D0 00 MOV   REG[0xD0],0x0
    0FC4: 55 7D 07 MOV   [__r0],0x7
    0FC7: 5A 7C    MOV   [__r1],X
    0FC9: 06 7C 64 ADD   [__r1],0x64
    0FCC: 52 02    MOV   A,[X+2]
    0FCE: 02 7C    ADD   A,[__r1]
    0FD0: 53 7C    MOV   [__r1],A
    0FD2: 50 00    MOV   A,0x0
    0FD4: 0A 7D    ADC   A,[__r0]
    0FD6: 60 D5    MOV   REG[0xD5],A
    0FD8: 52 00    MOV   A,[X+0]
    0FDA: 3F 7C    MVI   [__r1],A
(0169) 		i++;
    0FDC: 77 02    INC   [X+2]
(0170) 	}
    0FDE: 77 01    INC   [X+1]
    0FE0: 3D 01 5F CMP   [X+1],0x5F
    0FE3: CF 97    JC    0x0F7B
(0171) 	buff[i] = '\r';
    0FE5: 62 D0 00 MOV   REG[0xD0],0x0
    0FE8: 55 7D 07 MOV   [__r0],0x7
    0FEB: 5A 7C    MOV   [__r1],X
    0FED: 06 7C 64 ADD   [__r1],0x64
    0FF0: 52 02    MOV   A,[X+2]
    0FF2: 02 7C    ADD   A,[__r1]
    0FF4: 53 7C    MOV   [__r1],A
    0FF6: 50 00    MOV   A,0x0
    0FF8: 0A 7D    ADC   A,[__r0]
    0FFA: 60 D5    MOV   REG[0xD5],A
    0FFC: 50 0D    MOV   A,0xD
    0FFE: 3F 7C    MVI   [__r1],A
(0172) 	send_buff[0] = 'p';
    1000: 56 03 70 MOV   [X+3],0x70
(0173) 	send_buff[1] = ' ';
    1003: 56 04 20 MOV   [X+4],0x20
(0174) 	for(c = 2, j = 0; c < RX_SIZE; c++, j++){
    1006: 56 01 02 MOV   [X+1],0x2
    1009: 56 C3 00 MOV   [X-61],0x0
    100C: 80 54    JMP   0x1061
(0175) 		send_buff[c] = buff[j];
    100E: 62 D0 00 MOV   REG[0xD0],0x0
    1011: 55 7D 07 MOV   [__r0],0x7
    1014: 5A 7C    MOV   [__r1],X
    1016: 06 7C 64 ADD   [__r1],0x64
    1019: 52 C3    MOV   A,[X-61]
    101B: 02 7C    ADD   A,[__r1]
    101D: 53 7C    MOV   [__r1],A
    101F: 50 00    MOV   A,0x0
    1021: 0A 7D    ADC   A,[__r0]
    1023: 60 D4    MOV   REG[0xD4],A
    1025: 3E 7C    MVI   A,[__r1]
    1027: 53 7D    MOV   [__r0],A
    1029: 55 7B 07 MOV   [__r2],0x7
    102C: 5A 7A    MOV   [__r3],X
    102E: 06 7A 03 ADD   [__r3],0x3
    1031: 52 01    MOV   A,[X+1]
    1033: 02 7A    ADD   A,[__r3]
    1035: 53 7A    MOV   [__r3],A
    1037: 50 00    MOV   A,0x0
    1039: 0A 7B    ADC   A,[__r2]
    103B: 60 D5    MOV   REG[0xD5],A
    103D: 51 7D    MOV   A,[__r0]
    103F: 3F 7A    MVI   [__r3],A
(0176) 		if (send_buff[c] == '\r') break;
    1041: 55 7D 07 MOV   [__r0],0x7
    1044: 5A 7C    MOV   [__r1],X
    1046: 06 7C 03 ADD   [__r1],0x3
    1049: 52 01    MOV   A,[X+1]
    104B: 02 7C    ADD   A,[__r1]
    104D: 53 7C    MOV   [__r1],A
    104F: 50 00    MOV   A,0x0
    1051: 0A 7D    ADC   A,[__r0]
    1053: 60 D4    MOV   REG[0xD4],A
    1055: 3E 7C    MVI   A,[__r1]
    1057: 39 0D    CMP   A,0xD
    1059: B0 03    JNZ   0x105D
    105B: 80 0A    JMP   0x1066
(0177) 	}
    105D: 77 01    INC   [X+1]
    105F: 77 C3    INC   [X-61]
    1061: 3D 01 5F CMP   [X+1],0x5F
    1064: CF A9    JC    0x100E
(0178) 	send_buff[c] = '\0';
    1066: 62 D0 00 MOV   REG[0xD0],0x0
    1069: 55 7D 07 MOV   [__r0],0x7
    106C: 5A 7C    MOV   [__r1],X
    106E: 06 7C 03 ADD   [__r1],0x3
    1071: 52 01    MOV   A,[X+1]
    1073: 02 7C    ADD   A,[__r1]
    1075: 53 7C    MOV   [__r1],A
    1077: 50 00    MOV   A,0x0
    1079: 0A 7D    ADC   A,[__r0]
    107B: 60 D5    MOV   REG[0xD5],A
    107D: 50 00    MOV   A,0x0
    107F: 3F 7C    MVI   [__r1],A
(0179) 	for(c = 0; c < RX_SIZE; c++){
    1081: 56 01 00 MOV   [X+1],0x0
    1084: 80 3B    JMP   0x10C0
(0180) 		d = *(send_buff + c);
    1086: 62 D0 00 MOV   REG[0xD0],0x0
    1089: 55 7D 07 MOV   [__r0],0x7
    108C: 5A 7C    MOV   [__r1],X
    108E: 06 7C 03 ADD   [__r1],0x3
    1091: 52 01    MOV   A,[X+1]
    1093: 02 7C    ADD   A,[__r1]
    1095: 53 7C    MOV   [__r1],A
    1097: 50 00    MOV   A,0x0
    1099: 0A 7D    ADC   A,[__r0]
    109B: 60 D4    MOV   REG[0xD4],A
    109D: 3E 7C    MVI   A,[__r1]
    109F: 54 00    MOV   [X+0],A
(0181) 		if ( d == '\0' ) break;
    10A1: 3D 00 00 CMP   [X+0],0x0
    10A4: B0 03    JNZ   0x10A8
    10A6: 80 1E    JMP   0x10C5
(0182) 		UART_1_SendData( d );
    10A8: 10       PUSH  X
    10A9: 52 00    MOV   A,[X+0]
    10AB: 7C 08 6F LCALL _UART_1_SendData
    10AE: 20       POP   X
(0183) 		WAIT_FOR_SEND_1();
    10AF: 10       PUSH  X
    10B0: 7C 08 72 LCALL _bUART_1_ReadTxStatus|_UART_1_bReadTxStatus|UART_1_bReadTxStatus
    10B3: 20       POP   X
    10B4: 62 D0 00 MOV   REG[0xD0],0x0
    10B7: 53 7D    MOV   [__r0],A
    10B9: 47 7D 10 TST   [__r0],0x10
    10BC: AF F2    JZ    0x10AF
(0184) 	}
    10BE: 77 01    INC   [X+1]
    10C0: 3D 01 5F CMP   [X+1],0x5F
    10C3: CF C2    JC    0x1086
(0185) 	UART_1_PutCRLF();
    10C5: 10       PUSH  X
    10C6: 7C 09 88 LCALL _UART_1_PutCRLF
(0186) 	UART_1_CmdReset();
    10C9: 7C 09 91 LCALL _UART_1_CmdReset
    10CC: 20       POP   X
(0187) 	
(0188) 	for(i=0; i < j; i++){
    10CD: 56 02 00 MOV   [X+2],0x0
    10D0: 80 30    JMP   0x1101
(0189) 		UART_2_SendData( *(buff + i) );
    10D2: 62 D0 00 MOV   REG[0xD0],0x0
    10D5: 55 7D 07 MOV   [__r0],0x7
    10D8: 5A 7C    MOV   [__r1],X
    10DA: 06 7C 64 ADD   [__r1],0x64
    10DD: 52 02    MOV   A,[X+2]
    10DF: 02 7C    ADD   A,[__r1]
    10E1: 53 7C    MOV   [__r1],A
    10E3: 50 00    MOV   A,0x0
    10E5: 0A 7D    ADC   A,[__r0]
    10E7: 60 D4    MOV   REG[0xD4],A
    10E9: 3E 7C    MVI   A,[__r1]
    10EB: 10       PUSH  X
    10EC: 7C 06 10 LCALL _UART_2_SendData
    10EF: 20       POP   X
(0190) 		WAIT_FOR_SEND_2();
    10F0: 10       PUSH  X
    10F1: 7C 06 13 LCALL _bUART_2_ReadTxStatus|UART_2_bReadTxStatus|bUART_2_ReadTxStatus|_UART_2_bReadTxStatus
    10F4: 20       POP   X
    10F5: 62 D0 00 MOV   REG[0xD0],0x0
    10F8: 53 7D    MOV   [__r0],A
    10FA: 47 7D 10 TST   [__r0],0x10
    10FD: AF F2    JZ    0x10F0
(0191) 	}
    10FF: 77 02    INC   [X+2]
    1101: 52 02    MOV   A,[X+2]
    1103: 3B C3    CMP   A,[X-61]
    1105: CF CC    JC    0x10D2
    1107: 81 15    JMP   0x121D
(0192) 	
(0193) 	while (1) {
(0194) 		UART_2_CPutString("\r");
    1109: 10       PUSH  X
    110A: 50 01    MOV   A,0x1
    110C: 08       PUSH  A
    110D: 50 DA    MOV   A,0xDA
    110F: 5C       MOV   X,A
    1110: 18       POP   A
    1111: 7C 07 17 LCALL _UART_2_CPutString
    1114: 20       POP   X
(0195) 		WAIT_FOR_SEND_2();
    1115: 10       PUSH  X
    1116: 7C 06 13 LCALL _bUART_2_ReadTxStatus|UART_2_bReadTxStatus|bUART_2_ReadTxStatus|_UART_2_bReadTxStatus
    1119: 20       POP   X
    111A: 62 D0 00 MOV   REG[0xD0],0x0
    111D: 53 7D    MOV   [__r0],A
    111F: 47 7D 10 TST   [__r0],0x10
    1122: AF F2    JZ    0x1115
(0196) 		for(i = 0; i < 200; i++) {
    1124: 56 02 00 MOV   [X+2],0x0
    1127: 80 F0    JMP   0x1218
(0197) 			Delay50uTimes(100); // delay 5ms
    1129: 10       PUSH  X
    112A: 50 64    MOV   A,0x64
    112C: 7C 0B AA LCALL _Delay50uTimes
(0198) 			if (UART_2_bCmdCheck()){
    112F: 7C 07 48 LCALL _UART_2_bCmdCheck
    1132: 20       POP   X
    1133: 62 D0 00 MOV   REG[0xD0],0x0
    1136: 39 00    CMP   A,0x0
    1138: A0 DD    JZ    0x1216
(0199) 				recvd = UART_2_szGetParam();
    113A: 10       PUSH  X
    113B: 7C 07 61 LCALL _UART_2_szGetParam
    113E: 62 D0 00 MOV   REG[0xD0],0x0
    1141: 53 7D    MOV   [__r0],A
    1143: 5A 7C    MOV   [__r1],X
    1145: 20       POP   X
    1146: 51 7C    MOV   A,[__r1]
    1148: 54 63    MOV   [X+99],A
    114A: 51 7D    MOV   A,[__r0]
    114C: 54 62    MOV   [X+98],A
(0200) 				for ( c = 0, i = 0; c < RX_SIZE; c++ ) {
    114E: 56 01 00 MOV   [X+1],0x0
    1151: 56 02 00 MOV   [X+2],0x0
    1154: 80 6B    JMP   0x11C0
(0201) 					d = *(recvd + c);
    1156: 62 D0 00 MOV   REG[0xD0],0x0
    1159: 52 01    MOV   A,[X+1]
    115B: 53 7C    MOV   [__r1],A
    115D: 55 7D 00 MOV   [__r0],0x0
    1160: 52 63    MOV   A,[X+99]
    1162: 04 7C    ADD   [__r1],A
    1164: 52 62    MOV   A,[X+98]
    1166: 0C 7D    ADC   [__r0],A
    1168: 51 7D    MOV   A,[__r0]
    116A: 60 D4    MOV   REG[0xD4],A
    116C: 3E 7C    MVI   A,[__r1]
    116E: 54 00    MOV   [X+0],A
(0202) 					if (d == ' ' || d == '\r' || d == '\n' || d == '\0') {
    1170: 3D 00 20 CMP   [X+0],0x20
    1173: A0 10    JZ    0x1184
    1175: 3D 00 0D CMP   [X+0],0xD
    1178: A0 0B    JZ    0x1184
    117A: 3D 00 0A CMP   [X+0],0xA
    117D: A0 06    JZ    0x1184
    117F: 3D 00 00 CMP   [X+0],0x0
    1182: B0 1E    JNZ   0x11A1
(0203) 						send_buff[i] = '\0';
    1184: 62 D0 00 MOV   REG[0xD0],0x0
    1187: 55 7D 07 MOV   [__r0],0x7
    118A: 5A 7C    MOV   [__r1],X
    118C: 06 7C 03 ADD   [__r1],0x3
    118F: 52 02    MOV   A,[X+2]
    1191: 02 7C    ADD   A,[__r1]
    1193: 53 7C    MOV   [__r1],A
    1195: 50 00    MOV   A,0x0
    1197: 0A 7D    ADC   A,[__r0]
    1199: 60 D5    MOV   REG[0xD5],A
    119B: 50 00    MOV   A,0x0
    119D: 3F 7C    MVI   [__r1],A
(0204) 						break;
    119F: 80 25    JMP   0x11C5
(0205) 					}
(0206) 					send_buff[i] = d;
    11A1: 62 D0 00 MOV   REG[0xD0],0x0
    11A4: 55 7D 07 MOV   [__r0],0x7
    11A7: 5A 7C    MOV   [__r1],X
    11A9: 06 7C 03 ADD   [__r1],0x3
    11AC: 52 02    MOV   A,[X+2]
    11AE: 02 7C    ADD   A,[__r1]
    11B0: 53 7C    MOV   [__r1],A
    11B2: 50 00    MOV   A,0x0
    11B4: 0A 7D    ADC   A,[__r0]
    11B6: 60 D5    MOV   REG[0xD5],A
    11B8: 52 00    MOV   A,[X+0]
    11BA: 3F 7C    MVI   [__r1],A
(0207) 					i++;
    11BC: 77 02    INC   [X+2]
(0208) 				}
    11BE: 77 01    INC   [X+1]
    11C0: 3D 01 5F CMP   [X+1],0x5F
    11C3: CF 92    JC    0x1156
(0209) 				
(0210) 				for(c = 0; c < RX_SIZE; c++){
    11C5: 56 01 00 MOV   [X+1],0x0
    11C8: 80 3B    JMP   0x1204
(0211) 					d = *(send_buff + c);
    11CA: 62 D0 00 MOV   REG[0xD0],0x0
    11CD: 55 7D 07 MOV   [__r0],0x7
    11D0: 5A 7C    MOV   [__r1],X
    11D2: 06 7C 03 ADD   [__r1],0x3
    11D5: 52 01    MOV   A,[X+1]
    11D7: 02 7C    ADD   A,[__r1]
    11D9: 53 7C    MOV   [__r1],A
    11DB: 50 00    MOV   A,0x0
    11DD: 0A 7D    ADC   A,[__r0]
    11DF: 60 D4    MOV   REG[0xD4],A
    11E1: 3E 7C    MVI   A,[__r1]
    11E3: 54 00    MOV   [X+0],A
(0212) 					if ( d == '\0' ) break;
    11E5: 3D 00 00 CMP   [X+0],0x0
    11E8: B0 03    JNZ   0x11EC
    11EA: 80 1E    JMP   0x1209
(0213) 					UART_1_SendData( d );
    11EC: 10       PUSH  X
    11ED: 52 00    MOV   A,[X+0]
    11EF: 7C 08 6F LCALL _UART_1_SendData
    11F2: 20       POP   X
(0214) 					WAIT_FOR_SEND_1();
    11F3: 10       PUSH  X
    11F4: 7C 08 72 LCALL _bUART_1_ReadTxStatus|_UART_1_bReadTxStatus|UART_1_bReadTxStatus
    11F7: 20       POP   X
    11F8: 62 D0 00 MOV   REG[0xD0],0x0
    11FB: 53 7D    MOV   [__r0],A
    11FD: 47 7D 10 TST   [__r0],0x10
    1200: AF F2    JZ    0x11F3
(0215) 				}
    1202: 77 01    INC   [X+1]
    1204: 3D 01 5F CMP   [X+1],0x5F
    1207: CF C2    JC    0x11CA
(0216) 				UART_1_PutCRLF();
    1209: 10       PUSH  X
    120A: 7C 09 88 LCALL _UART_1_PutCRLF
(0217) 				UART_1_CmdReset();
    120D: 7C 09 91 LCALL _UART_1_CmdReset
(0218) 
(0219) 				UART_2_CmdReset();
    1210: 7C 07 32 LCALL _UART_2_CmdReset
    1213: 20       POP   X
(0220) 				return;
    1214: 80 0A    JMP   0x121F
(0221) 			}
(0222) 		}
    1216: 77 02    INC   [X+2]
    1218: 3D 02 C8 CMP   [X+2],0xC8
    121B: CF 0D    JC    0x1129
(0223) 	}
    121D: 8E EB    JMP   0x1109
    121F: 38 3A    ADD   SP,0x3A
    1221: 20       POP   X
    1222: 7F       RET   
(0224) }
(0225) 
(0226) void recv(void)
(0227) {
_recv:
  recvd                --> X+0
    1223: 10       PUSH  X
    1224: 4F       MOV   X,SP
    1225: 38 04    ADD   SP,0x4
(0228) 	char *recvd;
(0229) 	if (UART_1_bCmdCheck()){
    1227: 10       PUSH  X
    1228: 7C 09 A7 LCALL _UART_1_bCmdCheck
    122B: 20       POP   X
    122C: 62 D0 00 MOV   REG[0xD0],0x0
    122F: 39 00    CMP   A,0x0
    1231: A0 45    JZ    0x1277
(0230) 		recvd = UART_1_szGetParam();
    1233: 10       PUSH  X
    1234: 7C 09 C0 LCALL _UART_1_szGetParam
    1237: 62 D0 00 MOV   REG[0xD0],0x0
    123A: 53 7D    MOV   [__r0],A
    123C: 5A 7C    MOV   [__r1],X
    123E: 20       POP   X
    123F: 51 7C    MOV   A,[__r1]
    1241: 54 01    MOV   [X+1],A
    1243: 51 7D    MOV   A,[__r0]
    1245: 54 00    MOV   [X+0],A
(0231) 		switch (*(recvd)) {
    1247: 52 01    MOV   A,[X+1]
    1249: 53 7C    MOV   [__r1],A
    124B: 52 00    MOV   A,[X+0]
    124D: 60 D4    MOV   REG[0xD4],A
    124F: 3E 7C    MVI   A,[__r1]
    1251: 54 03    MOV   [X+3],A
    1253: 56 02 00 MOV   [X+2],0x0
    1256: 3D 02 00 CMP   [X+2],0x0
    1259: B0 06    JNZ   0x1260
    125B: 3D 03 76 CMP   [X+3],0x76
    125E: A0 11    JZ    0x1270
    1260: 3D 02 00 CMP   [X+2],0x0
    1263: B0 06    JNZ   0x126A
    1265: 3D 03 77 CMP   [X+3],0x77
    1268: A0 03    JZ    0x126C
    126A: 80 07    JMP   0x1272
(0232) 			case 'w':
(0233) 				command_w();
    126C: 9B 3A    CALL  _command_w
(0234) 				break;
    126E: 80 03    JMP   0x1272
(0235) 			case 'v':
(0236) 				command_v();
    1270: 9C DA    CALL  _command_v
(0237) 				break;
(0238) 		}
(0239) 		UART_1_CmdReset();
    1272: 10       PUSH  X
    1273: 7C 09 91 LCALL _UART_1_CmdReset
    1276: 20       POP   X
(0240)     }
    1277: 38 FC    ADD   SP,0xFC
    1279: 20       POP   X
    127A: 7F       RET   
(0241) }
(0242) int get_servo_val(unsigned char x, unsigned char center_offset, unsigned char width_extender)
(0243) {
_get_servo_val:
  ratio                --> X+6
  max                  --> X+2
  center_offset_real   --> X+1
  width_extender_real  --> X+0
  width_extender       --> X-6
  center_offset        --> X-5
  x                    --> X-4
    127B: 10       PUSH  X
    127C: 4F       MOV   X,SP
    127D: 38 0A    ADD   SP,0xA
(0244) 	unsigned char center_offset_real = 2 * center_offset;
    127F: 52 FB    MOV   A,[X-5]
    1281: 62 D0 00 MOV   REG[0xD0],0x0
    1284: 53 7D    MOV   [__r0],A
    1286: 65 7D    ASL   [__r0]
    1288: 51 7D    MOV   A,[__r0]
    128A: 54 01    MOV   [X+1],A
(0245) 	unsigned char width_extender_real = 2 * width_extender;
    128C: 52 FA    MOV   A,[X-6]
    128E: 53 7D    MOV   [__r0],A
    1290: 65 7D    ASL   [__r0]
    1292: 51 7D    MOV   A,[__r0]
    1294: 54 00    MOV   [X+0],A
(0246) 	float max = 255.0;
    1296: 56 02 43 MOV   [X+2],0x43
    1299: 56 03 7F MOV   [X+3],0x7F
    129C: 56 04 00 MOV   [X+4],0x0
    129F: 56 05 00 MOV   [X+5],0x0
(0247) 	float ratio = x / max;
    12A2: 52 FC    MOV   A,[X-4]
    12A4: 53 7A    MOV   [__r3],A
    12A6: 55 7B 00 MOV   [__r2],0x0
    12A9: 47 7B 80 TST   [__r2],0x80
    12AC: A0 09    JZ    0x12B6
    12AE: 55 7C FF MOV   [__r1],0xFF
    12B1: 55 7D FF MOV   [__r0],0xFF
    12B4: 80 0A    JMP   0x12BF
    12B6: 62 D0 00 MOV   REG[0xD0],0x0
    12B9: 55 7C 00 MOV   [__r1],0x0
    12BC: 55 7D 00 MOV   [__r0],0x0
    12BF: 62 D0 00 MOV   REG[0xD0],0x0
    12C2: 51 7D    MOV   A,[__r0]
    12C4: 08       PUSH  A
    12C5: 51 7C    MOV   A,[__r1]
    12C7: 08       PUSH  A
    12C8: 51 7B    MOV   A,[__r2]
    12CA: 08       PUSH  A
    12CB: 51 7A    MOV   A,[__r3]
    12CD: 08       PUSH  A
    12CE: 7C 18 D3 LCALL 0x18D3
    12D1: 18       POP   A
    12D2: 53 7A    MOV   [__r3],A
    12D4: 18       POP   A
    12D5: 53 7B    MOV   [__r2],A
    12D7: 18       POP   A
    12D8: 53 7C    MOV   [__r1],A
    12DA: 18       POP   A
    12DB: 53 7D    MOV   [__r0],A
    12DD: 52 02    MOV   A,[X+2]
    12DF: 08       PUSH  A
    12E0: 52 03    MOV   A,[X+3]
    12E2: 08       PUSH  A
    12E3: 52 04    MOV   A,[X+4]
    12E5: 08       PUSH  A
    12E6: 52 05    MOV   A,[X+5]
    12E8: 08       PUSH  A
    12E9: 51 7D    MOV   A,[__r0]
    12EB: 08       PUSH  A
    12EC: 51 7C    MOV   A,[__r1]
    12EE: 08       PUSH  A
    12EF: 51 7B    MOV   A,[__r2]
    12F1: 08       PUSH  A
    12F2: 51 7A    MOV   A,[__r3]
    12F4: 08       PUSH  A
    12F5: 7C 16 58 LCALL 0x1658
    12F8: 18       POP   A
    12F9: 54 09    MOV   [X+9],A
    12FB: 18       POP   A
    12FC: 54 08    MOV   [X+8],A
    12FE: 18       POP   A
    12FF: 54 07    MOV   [X+7],A
    1301: 18       POP   A
    1302: 54 06    MOV   [X+6],A
    1304: 38 FC    ADD   SP,0xFC
(0248) 	return (2000 - width_extender_real) + (int)((2000 + (width_extender_real * 2)) * ratio) + center_offset_real;
    1306: 52 00    MOV   A,[X+0]
    1308: 53 7C    MOV   [__r1],A
    130A: 55 7D 00 MOV   [__r0],0x0
    130D: 50 D0    MOV   A,0xD0
    130F: 12 7C    SUB   A,[__r1]
    1311: 53 7C    MOV   [__r1],A
    1313: 50 07    MOV   A,0x7
    1315: 1A 7D    SBB   A,[__r0]
    1317: 53 7D    MOV   [__r0],A
    1319: 52 00    MOV   A,[X+0]
    131B: 53 7A    MOV   [__r3],A
    131D: 55 7B 00 MOV   [__r2],0x0
    1320: 65 7A    ASL   [__r3]
    1322: 6B 7B    RLC   [__r2]
    1324: 06 7A D0 ADD   [__r3],0xD0
    1327: 0E 7B 07 ADC   [__r2],0x7
    132A: 51 7A    MOV   A,[__r3]
    132C: 53 76    MOV   [__r7],A
    132E: 51 7B    MOV   A,[__r2]
    1330: 53 77    MOV   [__r6],A
    1332: 47 77 80 TST   [__r6],0x80
    1335: A0 09    JZ    0x133F
    1337: 55 78 FF MOV   [__r5],0xFF
    133A: 55 79 FF MOV   [__r4],0xFF
    133D: 80 0A    JMP   0x1348
    133F: 62 D0 00 MOV   REG[0xD0],0x0
    1342: 55 78 00 MOV   [__r5],0x0
    1345: 55 79 00 MOV   [__r4],0x0
    1348: 62 D0 00 MOV   REG[0xD0],0x0
    134B: 51 79    MOV   A,[__r4]
    134D: 08       PUSH  A
    134E: 51 78    MOV   A,[__r5]
    1350: 08       PUSH  A
    1351: 51 77    MOV   A,[__r6]
    1353: 08       PUSH  A
    1354: 51 76    MOV   A,[__r7]
    1356: 08       PUSH  A
    1357: 7C 18 D3 LCALL 0x18D3
    135A: 18       POP   A
    135B: 53 76    MOV   [__r7],A
    135D: 18       POP   A
    135E: 53 77    MOV   [__r6],A
    1360: 18       POP   A
    1361: 53 78    MOV   [__r5],A
    1363: 18       POP   A
    1364: 53 79    MOV   [__r4],A
    1366: 52 06    MOV   A,[X+6]
    1368: 08       PUSH  A
    1369: 52 07    MOV   A,[X+7]
    136B: 08       PUSH  A
    136C: 52 08    MOV   A,[X+8]
    136E: 08       PUSH  A
    136F: 52 09    MOV   A,[X+9]
    1371: 08       PUSH  A
    1372: 51 79    MOV   A,[__r4]
    1374: 08       PUSH  A
    1375: 51 78    MOV   A,[__r5]
    1377: 08       PUSH  A
    1378: 51 77    MOV   A,[__r6]
    137A: 08       PUSH  A
    137B: 51 76    MOV   A,[__r7]
    137D: 08       PUSH  A
    137E: 7C 17 3B LCALL 0x173B
    1381: 18       POP   A
    1382: 53 76    MOV   [__r7],A
    1384: 18       POP   A
    1385: 53 77    MOV   [__r6],A
    1387: 18       POP   A
    1388: 53 78    MOV   [__r5],A
    138A: 18       POP   A
    138B: 38 FC    ADD   SP,0xFC
    138D: 08       PUSH  A
    138E: 51 78    MOV   A,[__r5]
    1390: 08       PUSH  A
    1391: 51 77    MOV   A,[__r6]
    1393: 08       PUSH  A
    1394: 51 76    MOV   A,[__r7]
    1396: 08       PUSH  A
    1397: 7C 15 47 LCALL 0x1547
    139A: 18       POP   A
    139B: 53 7A    MOV   [__r3],A
    139D: 18       POP   A
    139E: 53 7B    MOV   [__r2],A
    13A0: 38 FE    ADD   SP,0xFE
    13A2: 51 7A    MOV   A,[__r3]
    13A4: 04 7C    ADD   [__r1],A
    13A6: 51 7B    MOV   A,[__r2]
    13A8: 0C 7D    ADC   [__r0],A
    13AA: 52 01    MOV   A,[X+1]
    13AC: 04 7C    ADD   [__r1],A
    13AE: 0E 7D 00 ADC   [__r0],0x0
    13B1: 38 F6    ADD   SP,0xF6
    13B3: 20       POP   X
    13B4: 7F       RET   
(0249) }
(0250) 
(0251) void apply_car_accel(unsigned char ac)
(0252) {
_apply_car_accel:
  ac                   --> X-4
    13B5: 10       PUSH  X
    13B6: 4F       MOV   X,SP
(0253) 	PWM16_1_WritePulseWidth(get_servo_val(ac, 20, 50));
    13B7: 50 32    MOV   A,0x32
    13B9: 08       PUSH  A
    13BA: 50 14    MOV   A,0x14
    13BC: 08       PUSH  A
    13BD: 52 FC    MOV   A,[X-4]
    13BF: 08       PUSH  A
    13C0: 9E B9    CALL  _get_servo_val
    13C2: 38 FD    ADD   SP,0xFD
    13C4: 10       PUSH  X
    13C5: 62 D0 00 MOV   REG[0xD0],0x0
    13C8: 51 7D    MOV   A,[__r0]
    13CA: 08       PUSH  A
    13CB: 51 7C    MOV   A,[__r1]
    13CD: 20       POP   X
    13CE: 7C 0B 57 LCALL _PWM16_1_WritePulseWidth
    13D1: 20       POP   X
    13D2: 20       POP   X
    13D3: 7F       RET   
(0254) }
(0255) 
(0256) void apply_car_direction(unsigned char dir)
(0257) {
_apply_car_direction:
  dir                  --> X-4
    13D4: 10       PUSH  X
    13D5: 4F       MOV   X,SP
(0258) 	PWM16_2_WritePulseWidth(get_servo_val(dir, 20 + 86, 50));
    13D6: 50 32    MOV   A,0x32
    13D8: 08       PUSH  A
    13D9: 50 6A    MOV   A,0x6A
    13DB: 08       PUSH  A
    13DC: 52 FC    MOV   A,[X-4]
    13DE: 08       PUSH  A
    13DF: 9E 9A    CALL  _get_servo_val
    13E1: 38 FD    ADD   SP,0xFD
    13E3: 10       PUSH  X
    13E4: 62 D0 00 MOV   REG[0xD0],0x0
    13E7: 51 7D    MOV   A,[__r0]
    13E9: 08       PUSH  A
    13EA: 51 7C    MOV   A,[__r1]
    13EC: 20       POP   X
    13ED: 7C 0A FA LCALL _PWM16_2_WritePulseWidth
    13F0: 20       POP   X
    13F1: 20       POP   X
    13F2: 7F       RET   
(0259) }
(0260) 
(0261) void apply_cam_pan_h(unsigned char pan)
(0262) {
_apply_cam_pan_h:
  pan                  --> X-4
    13F3: 10       PUSH  X
    13F4: 4F       MOV   X,SP
(0263) 	PWM16_3_WritePulseWidth(get_servo_val(pan, 0, 0));
    13F5: 50 00    MOV   A,0x0
    13F7: 08       PUSH  A
    13F8: 08       PUSH  A
    13F9: 52 FC    MOV   A,[X-4]
    13FB: 08       PUSH  A
    13FC: 9E 7D    CALL  _get_servo_val
    13FE: 38 FD    ADD   SP,0xFD
    1400: 10       PUSH  X
    1401: 62 D0 00 MOV   REG[0xD0],0x0
    1404: 51 7D    MOV   A,[__r0]
    1406: 08       PUSH  A
    1407: 51 7C    MOV   A,[__r1]
    1409: 20       POP   X
    140A: 7C 0A 9D LCALL _PWM16_3_WritePulseWidth
    140D: 20       POP   X
    140E: 20       POP   X
    140F: 7F       RET   
(0264) }
(0265) 
(0266) void apply_cam_pan_v(unsigned char pan)
(0267) {
_apply_cam_pan_v:
  pan                  --> X-4
    1410: 10       PUSH  X
    1411: 4F       MOV   X,SP
(0268) 	PWM16_4_WritePulseWidth(get_servo_val(pan, 0, 0));
    1412: 50 00    MOV   A,0x0
    1414: 08       PUSH  A
    1415: 08       PUSH  A
    1416: 52 FC    MOV   A,[X-4]
    1418: 08       PUSH  A
    1419: 9E 60    CALL  _get_servo_val
    141B: 38 FD    ADD   SP,0xFD
    141D: 10       PUSH  X
    141E: 62 D0 00 MOV   REG[0xD0],0x0
    1421: 51 7D    MOV   A,[__r0]
    1423: 08       PUSH  A
    1424: 51 7C    MOV   A,[__r1]
    1426: 20       POP   X
    1427: 7C 0A 40 LCALL _PWM16_4_WritePulseWidth
    142A: 20       POP   X
    142B: 20       POP   X
    142C: 7F       RET   
(0269) }
(0270) 
(0271) 
(0272) void apply_battsw(unsigned char batt0, unsigned char batt1)
(0273) {
_apply_battsw:
  batt1                --> X-5
  batt0                --> X-4
    142D: 10       PUSH  X
    142E: 4F       MOV   X,SP
(0274) 	if (batt0 == 0) OFF(0, BATTSW0); // off
    142F: 3D FC 00 CMP   [X-4],0x0
    1432: B0 06    JNZ   0x1439
    1434: 41 00 BF AND   REG[0x0],0xBF
    1437: 80 04    JMP   0x143C
(0275) 	else            ON(0, BATTSW0);  // on
    1439: 43 00 40 OR    REG[0x0],0x40
(0276) 	if (batt1 == 0) OFF(0, BATTSW1); // off
    143C: 3D FB 00 CMP   [X-5],0x0
    143F: B0 06    JNZ   0x1446
    1441: 41 00 EF AND   REG[0x0],0xEF
    1444: 80 04    JMP   0x1449
(0277) 	else            ON(0, BATTSW1);  // on
    1446: 43 00 10 OR    REG[0x0],0x10
    1449: 20       POP   X
    144A: 7F       RET   
(0278) }
(0279) 
(0280) void latch(void)
(0281) {
(0282) 	OFF(0, LATCH);
_latch:
    144B: 41 00 FB AND   REG[0x0],0xFB
(0283) 	ON(0, LATCH);
    144E: 43 00 04 OR    REG[0x0],0x4
    1451: 7F       RET   
(0284) }
(0285) 
(0286) void shift1(void)
(0287) {
(0288) 	OFF(0, SCK);
_shift1:
    1452: 41 00 FE AND   REG[0x0],0xFE
(0289) 	ON(0, SCK);
    1455: 43 00 01 OR    REG[0x0],0x1
    1458: 7F       RET   
(0290) }
(0291) 
(0292) void read1(void)
(0293) {
(0294) 	if (PRT2DR & DATA) {
_read1:
    1459: 5D 08    MOV   A,REG[0x8]
    145B: 62 D0 00 MOV   REG[0xD0],0x0
    145E: 53 7D    MOV   [__r0],A
    1460: 47 7D 40 TST   [__r0],0x40
    1463: A0 16    JZ    0x147A
(0295) 		serial_print("1", 1, 0);
    1465: 50 00    MOV   A,0x0
    1467: 08       PUSH  A
    1468: 08       PUSH  A
    1469: 08       PUSH  A
    146A: 50 01    MOV   A,0x1
    146C: 08       PUSH  A
    146D: 50 01    MOV   A,0x1
    146F: 08       PUSH  A
    1470: 50 D8    MOV   A,0xD8
    1472: 08       PUSH  A
    1473: 7C 0C 67 LCALL _serial_print
    1476: 38 FA    ADD   SP,0xFA
(0296) 	} else {
    1478: 80 14    JMP   0x148D
(0297) 		serial_print("0", 1, 0);
    147A: 50 00    MOV   A,0x0
    147C: 08       PUSH  A
    147D: 08       PUSH  A
    147E: 08       PUSH  A
    147F: 50 01    MOV   A,0x1
    1481: 08       PUSH  A
    1482: 50 01    MOV   A,0x1
    1484: 08       PUSH  A
    1485: 50 D6    MOV   A,0xD6
    1487: 08       PUSH  A
    1488: 7C 0C 67 LCALL _serial_print
    148B: 38 FA    ADD   SP,0xFA
(0298) 	}
    148D: 7F       RET   
(0299) }
(0300) 
(0301) void send_batt_status(void)
(0302) {
_send_batt_status:
  i                    --> X+0
    148E: 10       PUSH  X
    148F: 4F       MOV   X,SP
    1490: 38 01    ADD   SP,0x1
(0303) 	unsigned char i = 0;
    1492: 56 00 00 MOV   [X+0],0x0
(0304) 	serial_print("b ", 2, 0);
    1495: 50 00    MOV   A,0x0
    1497: 08       PUSH  A
    1498: 08       PUSH  A
    1499: 08       PUSH  A
    149A: 50 02    MOV   A,0x2
    149C: 08       PUSH  A
    149D: 50 01    MOV   A,0x1
    149F: 08       PUSH  A
    14A0: 50 D3    MOV   A,0xD3
    14A2: 08       PUSH  A
    14A3: 7C 0C 67 LCALL _serial_print
    14A6: 38 FA    ADD   SP,0xFA
(0305) 	latch();
    14A8: 9F A1    CALL  _latch
(0306) 	for ( i = 0; i < 8; i++) {
    14AA: 56 00 00 MOV   [X+0],0x0
    14AD: 80 07    JMP   0x14B5
(0307) 		read1();
    14AF: 9F A8    CALL  _read1
(0308) 		shift1();
    14B1: 9F 9F    CALL  _shift1
(0309) 	}
    14B3: 77 00    INC   [X+0]
    14B5: 3D 00 08 CMP   [X+0],0x8
    14B8: CF F6    JC    0x14AF
(0310) 	serial_print("", 0, 1);
    14BA: 50 00    MOV   A,0x0
    14BC: 08       PUSH  A
    14BD: 50 01    MOV   A,0x1
    14BF: 08       PUSH  A
    14C0: 50 00    MOV   A,0x0
    14C2: 08       PUSH  A
    14C3: 08       PUSH  A
    14C4: 50 01    MOV   A,0x1
    14C6: 08       PUSH  A
    14C7: 50 D2    MOV   A,0xD2
    14C9: 08       PUSH  A
    14CA: 7C 0C 67 LCALL _serial_print
    14CD: 38 FA    ADD   SP,0xFA
    14CF: 38 FF    ADD   SP,0xFF
    14D1: 20       POP   X
    14D2: 7F       RET   
(0311) }
(0312) 
(0313) void main(void)
(0314) {
_main:
  i                    --> X+0
    14D3: 10       PUSH  X
    14D4: 4F       MOV   X,SP
    14D5: 38 02    ADD   SP,0x2
(0315) 	unsigned int i = 0;
    14D7: 56 01 00 MOV   [X+1],0x0
    14DA: 56 00 00 MOV   [X+0],0x0
(0316) 	init();			//IO Initialize
    14DD: 7C 0C 17 LCALL _init
(0317) 	send_test();	//send test
    14E0: 98 2C    CALL  _send_test
    14E2: 80 52    JMP   0x1535
(0318) 	while (1) {
(0319) 		if (i == 300) { i = 0; send_batt_status(); }
    14E4: 3D 00 01 CMP   [X+0],0x1
    14E7: B0 0E    JNZ   0x14F6
    14E9: 3D 01 2C CMP   [X+1],0x2C
    14EC: B0 09    JNZ   0x14F6
    14EE: 56 01 00 MOV   [X+1],0x0
    14F1: 56 00 00 MOV   [X+0],0x0
    14F4: 9F 98    CALL  _send_batt_status
(0320) 		recv();
    14F6: 9D 2B    CALL  _recv
(0321) 		apply_car_accel(data[0]);
    14F8: 62 D0 00 MOV   REG[0xD0],0x0
    14FB: 51 7E    MOV   A,[data]
    14FD: 08       PUSH  A
    14FE: 9E B5    CALL  _apply_car_accel
    1500: 38 FF    ADD   SP,0xFF
(0322) 		apply_car_direction(data[1]);
    1502: 62 D0 00 MOV   REG[0xD0],0x0
    1505: 51 7F    MOV   A,[data+1]
    1507: 08       PUSH  A
    1508: 9E CA    CALL  _apply_car_direction
(0323) 		apply_cam_pan_h(data[2]);
    150A: 62 D0 00 MOV   REG[0xD0],0x0
    150D: 51 80    MOV   A,[data+2]
    150F: 08       PUSH  A
    1510: 9E E1    CALL  _apply_cam_pan_h
    1512: 38 FE    ADD   SP,0xFE
(0324) 		apply_cam_pan_v(data[3]);
    1514: 62 D0 00 MOV   REG[0xD0],0x0
    1517: 51 81    MOV   A,[data+3]
    1519: 08       PUSH  A
    151A: 9E F4    CALL  _apply_cam_pan_v
(0325) 		apply_battsw(data[4], data[5]);
    151C: 62 D0 00 MOV   REG[0xD0],0x0
    151F: 51 83    MOV   A,[data+5]
    1521: 08       PUSH  A
    1522: 51 82    MOV   A,[data+4]
    1524: 08       PUSH  A
    1525: 9F 06    CALL  _apply_battsw
    1527: 38 FD    ADD   SP,0xFD
(0326) 
(0327) 		Delay50uTimes(20); // delay 1ms
    1529: 10       PUSH  X
    152A: 50 14    MOV   A,0x14
    152C: 7C 0B AA LCALL _Delay50uTimes
    152F: 20       POP   X
(0328) 		i++;
    1530: 77 01    INC   [X+1]
    1532: 0F 00 00 ADC   [X+0],0x0
(0329) 	}
    1535: 8F AE    JMP   0x14E4
(0330) }
    1537: 38 FE    ADD   SP,0xFE
    1539: 20       POP   X
    153A: 8F FF    JMP   0x153A
_atoi:
    193E: 10       PUSH  X
    193F: 4F       MOV   X,SP
    1940: 38 04    ADD   SP,0x4
    1942: 80 06    JMP   0x1949
    1944: 77 FC    INC   [X-4]
    1946: 0F FB 00 ADC   [X-5],0x0
    1949: 62 D0 00 MOV   REG[0xD0],0x0
    194C: 52 FC    MOV   A,[X-4]
    194E: 53 7C    MOV   [__r1],A
    1950: 52 FB    MOV   A,[X-5]
    1952: 60 D4    MOV   REG[0xD4],A
    1954: 3E 7C    MVI   A,[__r1]
    1956: 53 7C    MOV   [__r1],A
    1958: 50 00    MOV   A,0x0
    195A: 08       PUSH  A
    195B: 51 7C    MOV   A,[__r1]
    195D: 08       PUSH  A
    195E: 7C 1C 79 LCALL _isspace
    1961: 38 FE    ADD   SP,0xFE
    1963: 62 D0 00 MOV   REG[0xD0],0x0
    1966: 3C 7D 00 CMP   [__r0],0x0
    1969: BF DA    JNZ   0x1944
    196B: 3C 7C 00 CMP   [__r1],0x0
    196E: BF D5    JNZ   0x1944
    1970: 56 03 00 MOV   [X+3],0x0
    1973: 56 02 00 MOV   [X+2],0x0
    1976: 62 D0 00 MOV   REG[0xD0],0x0
    1979: 52 FC    MOV   A,[X-4]
    197B: 53 7C    MOV   [__r1],A
    197D: 52 FB    MOV   A,[X-5]
    197F: 60 D4    MOV   REG[0xD4],A
    1981: 3E 7C    MVI   A,[__r1]
    1983: 39 2D    CMP   A,0x2D
    1985: B0 0E    JNZ   0x1994
    1987: 56 03 01 MOV   [X+3],0x1
    198A: 56 02 00 MOV   [X+2],0x0
    198D: 77 FC    INC   [X-4]
    198F: 0F FB 00 ADC   [X-5],0x0
    1992: 80 17    JMP   0x19AA
    1994: 62 D0 00 MOV   REG[0xD0],0x0
    1997: 52 FC    MOV   A,[X-4]
    1999: 53 7C    MOV   [__r1],A
    199B: 52 FB    MOV   A,[X-5]
    199D: 60 D4    MOV   REG[0xD4],A
    199F: 3E 7C    MVI   A,[__r1]
    19A1: 39 2B    CMP   A,0x2B
    19A3: B0 06    JNZ   0x19AA
    19A5: 77 FC    INC   [X-4]
    19A7: 0F FB 00 ADC   [X-5],0x0
    19AA: 56 01 00 MOV   [X+1],0x0
    19AD: 56 00 00 MOV   [X+0],0x0
    19B0: 80 7B    JMP   0x1A2C
    19B2: 62 D0 00 MOV   REG[0xD0],0x0
    19B5: 52 FC    MOV   A,[X-4]
    19B7: 53 7C    MOV   [__r1],A
    19B9: 52 FB    MOV   A,[X-5]
    19BB: 53 7D    MOV   [__r0],A
    19BD: 51 7C    MOV   A,[__r1]
    19BF: 01 01    ADD   A,0x1
    19C1: 54 FC    MOV   [X-4],A
    19C3: 51 7D    MOV   A,[__r0]
    19C5: 09 00    ADC   A,0x0
    19C7: 54 FB    MOV   [X-5],A
    19C9: 52 01    MOV   A,[X+1]
    19CB: 53 7A    MOV   [__r3],A
    19CD: 52 00    MOV   A,[X+0]
    19CF: 53 7B    MOV   [__r2],A
    19D1: 55 78 0A MOV   [__r5],0xA
    19D4: 55 79 00 MOV   [__r4],0x0
    19D7: 55 75 00 MOV   [__rX],0x0
    19DA: 55 74 00 MOV   [__rY],0x0
    19DD: 3C 79 00 CMP   [__r4],0x0
    19E0: B0 06    JNZ   0x19E7
    19E2: 3C 78 00 CMP   [__r5],0x0
    19E5: A0 1A    JZ    0x1A00
    19E7: 70 FB    AND   F,0xFB
    19E9: 6E 79    RRC   [__r4]
    19EB: 6E 78    RRC   [__r5]
    19ED: D0 0C    JNC   0x19FA
    19EF: 62 D0 00 MOV   REG[0xD0],0x0
    19F2: 51 7A    MOV   A,[__r3]
    19F4: 04 75    ADD   [__rX],A
    19F6: 51 7B    MOV   A,[__r2]
    19F8: 0C 74    ADC   [__rY],A
    19FA: 65 7A    ASL   [__r3]
    19FC: 6B 7B    RLC   [__r2]
    19FE: 8F DE    JMP   0x19DD
    1A00: 5F 7A 75 MOV   [__r3],[__rX]
    1A03: 5F 7B 74 MOV   [__r2],[__rY]
    1A06: 62 D0 00 MOV   REG[0xD0],0x0
    1A09: 51 7D    MOV   A,[__r0]
    1A0B: 60 D4    MOV   REG[0xD4],A
    1A0D: 3E 7C    MVI   A,[__r1]
    1A0F: 53 7C    MOV   [__r1],A
    1A11: 55 7D 00 MOV   [__r0],0x0
    1A14: 51 7A    MOV   A,[__r3]
    1A16: 02 7C    ADD   A,[__r1]
    1A18: 53 7C    MOV   [__r1],A
    1A1A: 51 7B    MOV   A,[__r2]
    1A1C: 0A 7D    ADC   A,[__r0]
    1A1E: 53 7D    MOV   [__r0],A
    1A20: 51 7C    MOV   A,[__r1]
    1A22: 11 30    SUB   A,0x30
    1A24: 54 01    MOV   [X+1],A
    1A26: 51 7D    MOV   A,[__r0]
    1A28: 19 00    SBB   A,0x0
    1A2A: 54 00    MOV   [X+0],A
    1A2C: 62 D0 00 MOV   REG[0xD0],0x0
    1A2F: 52 FC    MOV   A,[X-4]
    1A31: 53 7C    MOV   [__r1],A
    1A33: 52 FB    MOV   A,[X-5]
    1A35: 60 D4    MOV   REG[0xD4],A
    1A37: 3E 7C    MVI   A,[__r1]
    1A39: 53 7C    MOV   [__r1],A
    1A3B: 50 00    MOV   A,0x0
    1A3D: 08       PUSH  A
    1A3E: 51 7C    MOV   A,[__r1]
    1A40: 08       PUSH  A
    1A41: 7C 1C 58 LCALL _isdigit
    1A44: 38 FE    ADD   SP,0xFE
    1A46: 62 D0 00 MOV   REG[0xD0],0x0
    1A49: 3C 7D 00 CMP   [__r0],0x0
    1A4C: BF 65    JNZ   0x19B2
    1A4E: 3C 7C 00 CMP   [__r1],0x0
    1A51: BF 60    JNZ   0x19B2
    1A53: 3D 02 00 CMP   [X+2],0x0
    1A56: B0 06    JNZ   0x1A5D
    1A58: 3D 03 00 CMP   [X+3],0x0
    1A5B: A0 14    JZ    0x1A70
    1A5D: 62 D0 00 MOV   REG[0xD0],0x0
    1A60: 52 01    MOV   A,[X+1]
    1A62: 73       CPL   A
    1A63: 11 FF    SUB   A,0xFF
    1A65: 53 7C    MOV   [__r1],A
    1A67: 52 00    MOV   A,[X+0]
    1A69: 73       CPL   A
    1A6A: 19 FF    SBB   A,0xFF
    1A6C: 53 7D    MOV   [__r0],A
    1A6E: 80 0C    JMP   0x1A7B
    1A70: 62 D0 00 MOV   REG[0xD0],0x0
    1A73: 52 01    MOV   A,[X+1]
    1A75: 53 7C    MOV   [__r1],A
    1A77: 52 00    MOV   A,[X+0]
    1A79: 53 7D    MOV   [__r0],A
    1A7B: 38 FC    ADD   SP,0xFC
    1A7D: 20       POP   X
    1A7E: 7F       RET   
_itoa:
    1A7F: 10       PUSH  X
    1A80: 4F       MOV   X,SP
    1A81: 38 09    ADD   SP,0x9
    1A83: 52 FA    MOV   A,[X-6]
    1A85: 54 03    MOV   [X+3],A
    1A87: 52 F9    MOV   A,[X-7]
    1A89: 54 02    MOV   [X+2],A
    1A8B: 3D F9 00 CMP   [X-7],0x0
    1A8E: B0 2F    JNZ   0x1ABE
    1A90: 3D FA 00 CMP   [X-6],0x0
    1A93: B0 2A    JNZ   0x1ABE
    1A95: 62 D0 00 MOV   REG[0xD0],0x0
    1A98: 52 FC    MOV   A,[X-4]
    1A9A: 53 7C    MOV   [__r1],A
    1A9C: 52 FB    MOV   A,[X-5]
    1A9E: 60 D5    MOV   REG[0xD5],A
    1AA0: 50 30    MOV   A,0x30
    1AA2: 3F 7C    MVI   [__r1],A
    1AA4: 52 FC    MOV   A,[X-4]
    1AA6: 01 01    ADD   A,0x1
    1AA8: 53 7C    MOV   [__r1],A
    1AAA: 52 FB    MOV   A,[X-5]
    1AAC: 09 00    ADC   A,0x0
    1AAE: 60 D5    MOV   REG[0xD5],A
    1AB0: 50 00    MOV   A,0x0
    1AB2: 3F 7C    MVI   [__r1],A
    1AB4: 52 FC    MOV   A,[X-4]
    1AB6: 53 7C    MOV   [__r1],A
    1AB8: 52 FB    MOV   A,[X-5]
    1ABA: 53 7D    MOV   [__r0],A
    1ABC: 81 97    JMP   0x1C54
    1ABE: 52 FA    MOV   A,[X-6]
    1AC0: 11 00    SUB   A,0x0
    1AC2: 52 F9    MOV   A,[X-7]
    1AC4: 31 80    XOR   A,0x80
    1AC6: 19 80    SBB   A,0x80
    1AC8: D0 29    JNC   0x1AF2
    1ACA: 3D F7 00 CMP   [X-9],0x0
    1ACD: B0 24    JNZ   0x1AF2
    1ACF: 3D F8 0A CMP   [X-8],0xA
    1AD2: B0 1F    JNZ   0x1AF2
    1AD4: 56 06 01 MOV   [X+6],0x1
    1AD7: 62 D0 00 MOV   REG[0xD0],0x0
    1ADA: 52 03    MOV   A,[X+3]
    1ADC: 73       CPL   A
    1ADD: 53 7C    MOV   [__r1],A
    1ADF: 52 02    MOV   A,[X+2]
    1AE1: 73       CPL   A
    1AE2: 53 7D    MOV   [__r0],A
    1AE4: 51 7C    MOV   A,[__r1]
    1AE6: 01 01    ADD   A,0x1
    1AE8: 54 03    MOV   [X+3],A
    1AEA: 51 7D    MOV   A,[__r0]
    1AEC: 09 00    ADC   A,0x0
    1AEE: 54 02    MOV   [X+2],A
    1AF0: 80 04    JMP   0x1AF5
    1AF2: 56 06 00 MOV   [X+6],0x0
    1AF5: 52 FC    MOV   A,[X-4]
    1AF7: 54 01    MOV   [X+1],A
    1AF9: 52 FB    MOV   A,[X-5]
    1AFB: 54 00    MOV   [X+0],A
    1AFD: 62 D0 00 MOV   REG[0xD0],0x0
    1B00: 52 F7    MOV   A,[X-9]
    1B02: 08       PUSH  A
    1B03: 52 F8    MOV   A,[X-8]
    1B05: 08       PUSH  A
    1B06: 52 02    MOV   A,[X+2]
    1B08: 08       PUSH  A
    1B09: 52 03    MOV   A,[X+3]
    1B0B: 08       PUSH  A
    1B0C: 7C 15 3C LCALL 0x153C
    1B0F: 38 FE    ADD   SP,0xFE
    1B11: 18       POP   A
    1B12: 53 7C    MOV   [__r1],A
    1B14: 18       POP   A
    1B15: 53 7D    MOV   [__r0],A
    1B17: 51 7C    MOV   A,[__r1]
    1B19: 54 08    MOV   [X+8],A
    1B1B: 51 7D    MOV   A,[__r0]
    1B1D: 54 07    MOV   [X+7],A
    1B1F: 50 09    MOV   A,0x9
    1B21: 13 08    SUB   A,[X+8]
    1B23: 52 07    MOV   A,[X+7]
    1B25: 31 80    XOR   A,0x80
    1B27: 53 75    MOV   [__rX],A
    1B29: 50 80    MOV   A,0x80
    1B2B: 1A 75    SBB   A,[__rX]
    1B2D: C0 28    JC    0x1B56
    1B2F: 62 D0 00 MOV   REG[0xD0],0x0
    1B32: 52 01    MOV   A,[X+1]
    1B34: 53 7C    MOV   [__r1],A
    1B36: 52 00    MOV   A,[X+0]
    1B38: 53 7D    MOV   [__r0],A
    1B3A: 51 7C    MOV   A,[__r1]
    1B3C: 01 01    ADD   A,0x1
    1B3E: 54 01    MOV   [X+1],A
    1B40: 51 7D    MOV   A,[__r0]
    1B42: 09 00    ADC   A,0x0
    1B44: 54 00    MOV   [X+0],A
    1B46: 52 08    MOV   A,[X+8]
    1B48: 01 30    ADD   A,0x30
    1B4A: 53 7B    MOV   [__r2],A
    1B4C: 51 7D    MOV   A,[__r0]
    1B4E: 60 D5    MOV   REG[0xD5],A
    1B50: 51 7B    MOV   A,[__r2]
    1B52: 3F 7C    MVI   [__r1],A
    1B54: 80 26    JMP   0x1B7B
    1B56: 62 D0 00 MOV   REG[0xD0],0x0
    1B59: 52 01    MOV   A,[X+1]
    1B5B: 53 7C    MOV   [__r1],A
    1B5D: 52 00    MOV   A,[X+0]
    1B5F: 53 7D    MOV   [__r0],A
    1B61: 51 7C    MOV   A,[__r1]
    1B63: 01 01    ADD   A,0x1
    1B65: 54 01    MOV   [X+1],A
    1B67: 51 7D    MOV   A,[__r0]
    1B69: 09 00    ADC   A,0x0
    1B6B: 54 00    MOV   [X+0],A
    1B6D: 52 08    MOV   A,[X+8]
    1B6F: 01 57    ADD   A,0x57
    1B71: 53 7B    MOV   [__r2],A
    1B73: 51 7D    MOV   A,[__r0]
    1B75: 60 D5    MOV   REG[0xD5],A
    1B77: 51 7B    MOV   A,[__r2]
    1B79: 3F 7C    MVI   [__r1],A
    1B7B: 52 F7    MOV   A,[X-9]
    1B7D: 08       PUSH  A
    1B7E: 52 F8    MOV   A,[X-8]
    1B80: 08       PUSH  A
    1B81: 52 02    MOV   A,[X+2]
    1B83: 08       PUSH  A
    1B84: 52 03    MOV   A,[X+3]
    1B86: 08       PUSH  A
    1B87: 62 D0 00 MOV   REG[0xD0],0x0
    1B8A: 7C 15 3C LCALL 0x153C
    1B8D: 18       POP   A
    1B8E: 54 03    MOV   [X+3],A
    1B90: 18       POP   A
    1B91: 54 02    MOV   [X+2],A
    1B93: 38 FE    ADD   SP,0xFE
    1B95: 3D 02 00 CMP   [X+2],0x0
    1B98: BF 64    JNZ   0x1AFD
    1B9A: 3D 03 00 CMP   [X+3],0x0
    1B9D: BF 5F    JNZ   0x1AFD
    1B9F: 3D 06 00 CMP   [X+6],0x0
    1BA2: A0 20    JZ    0x1BC3
    1BA4: 62 D0 00 MOV   REG[0xD0],0x0
    1BA7: 52 01    MOV   A,[X+1]
    1BA9: 53 7C    MOV   [__r1],A
    1BAB: 52 00    MOV   A,[X+0]
    1BAD: 53 7D    MOV   [__r0],A
    1BAF: 51 7C    MOV   A,[__r1]
    1BB1: 01 01    ADD   A,0x1
    1BB3: 54 01    MOV   [X+1],A
    1BB5: 51 7D    MOV   A,[__r0]
    1BB7: 09 00    ADC   A,0x0
    1BB9: 54 00    MOV   [X+0],A
    1BBB: 51 7D    MOV   A,[__r0]
    1BBD: 60 D5    MOV   REG[0xD5],A
    1BBF: 50 2D    MOV   A,0x2D
    1BC1: 3F 7C    MVI   [__r1],A
    1BC3: 62 D0 00 MOV   REG[0xD0],0x0
    1BC6: 52 01    MOV   A,[X+1]
    1BC8: 53 7C    MOV   [__r1],A
    1BCA: 52 00    MOV   A,[X+0]
    1BCC: 53 7D    MOV   [__r0],A
    1BCE: 51 7C    MOV   A,[__r1]
    1BD0: 01 FF    ADD   A,0xFF
    1BD2: 54 01    MOV   [X+1],A
    1BD4: 51 7D    MOV   A,[__r0]
    1BD6: 09 FF    ADC   A,0xFF
    1BD8: 54 00    MOV   [X+0],A
    1BDA: 51 7D    MOV   A,[__r0]
    1BDC: 60 D5    MOV   REG[0xD5],A
    1BDE: 50 00    MOV   A,0x0
    1BE0: 3F 7C    MVI   [__r1],A
    1BE2: 52 FC    MOV   A,[X-4]
    1BE4: 54 05    MOV   [X+5],A
    1BE6: 52 FB    MOV   A,[X-5]
    1BE8: 54 04    MOV   [X+4],A
    1BEA: 80 54    JMP   0x1C3F
    1BEC: 62 D0 00 MOV   REG[0xD0],0x0
    1BEF: 52 05    MOV   A,[X+5]
    1BF1: 53 7C    MOV   [__r1],A
    1BF3: 52 04    MOV   A,[X+4]
    1BF5: 60 D4    MOV   REG[0xD4],A
    1BF7: 3E 7C    MVI   A,[__r1]
    1BF9: 54 06    MOV   [X+6],A
    1BFB: 52 05    MOV   A,[X+5]
    1BFD: 53 7C    MOV   [__r1],A
    1BFF: 52 04    MOV   A,[X+4]
    1C01: 53 7D    MOV   [__r0],A
    1C03: 51 7C    MOV   A,[__r1]
    1C05: 01 01    ADD   A,0x1
    1C07: 54 05    MOV   [X+5],A
    1C09: 51 7D    MOV   A,[__r0]
    1C0B: 09 00    ADC   A,0x0
    1C0D: 54 04    MOV   [X+4],A
    1C0F: 52 01    MOV   A,[X+1]
    1C11: 53 7A    MOV   [__r3],A
    1C13: 52 00    MOV   A,[X+0]
    1C15: 60 D4    MOV   REG[0xD4],A
    1C17: 3E 7A    MVI   A,[__r3]
    1C19: 53 7B    MOV   [__r2],A
    1C1B: 51 7D    MOV   A,[__r0]
    1C1D: 60 D5    MOV   REG[0xD5],A
    1C1F: 51 7B    MOV   A,[__r2]
    1C21: 3F 7C    MVI   [__r1],A
    1C23: 52 01    MOV   A,[X+1]
    1C25: 53 7C    MOV   [__r1],A
    1C27: 52 00    MOV   A,[X+0]
    1C29: 53 7D    MOV   [__r0],A
    1C2B: 51 7C    MOV   A,[__r1]
    1C2D: 01 FF    ADD   A,0xFF
    1C2F: 54 01    MOV   [X+1],A
    1C31: 51 7D    MOV   A,[__r0]
    1C33: 09 FF    ADC   A,0xFF
    1C35: 54 00    MOV   [X+0],A
    1C37: 51 7D    MOV   A,[__r0]
    1C39: 60 D5    MOV   REG[0xD5],A
    1C3B: 52 06    MOV   A,[X+6]
    1C3D: 3F 7C    MVI   [__r1],A
    1C3F: 52 05    MOV   A,[X+5]
    1C41: 13 01    SUB   A,[X+1]
    1C43: 52 04    MOV   A,[X+4]
    1C45: 1B 00    SBB   A,[X+0]
    1C47: CF A4    JC    0x1BEC
    1C49: 62 D0 00 MOV   REG[0xD0],0x0
    1C4C: 52 FC    MOV   A,[X-4]
    1C4E: 53 7C    MOV   [__r1],A
    1C50: 52 FB    MOV   A,[X-5]
    1C52: 53 7D    MOV   [__r0],A
    1C54: 38 F7    ADD   SP,0xF7
    1C56: 20       POP   X
    1C57: 7F       RET   
_isdigit:
    1C58: 10       PUSH  X
    1C59: 4F       MOV   X,SP
    1C5A: 62 D0 00 MOV   REG[0xD0],0x0
    1C5D: 52 FC    MOV   A,[X-4]
    1C5F: 01 02    ADD   A,0x2
    1C61: 53 7C    MOV   [__r1],A
    1C63: 52 FB    MOV   A,[X-5]
    1C65: 09 03    ADC   A,0x3
    1C67: 10       PUSH  X
    1C68: 58 7C    MOV   X,[__r1]
    1C6A: 28       ROMX  
    1C6B: 20       POP   X
    1C6C: 53 7C    MOV   [__r1],A
    1C6E: 55 7D 00 MOV   [__r0],0x0
    1C71: 26 7C 04 AND   [__r1],0x4
    1C74: 26 7D 00 AND   [__r0],0x0
    1C77: 20       POP   X
    1C78: 7F       RET   
_isspace:
    1C79: 10       PUSH  X
    1C7A: 4F       MOV   X,SP
    1C7B: 62 D0 00 MOV   REG[0xD0],0x0
    1C7E: 52 FC    MOV   A,[X-4]
    1C80: 01 02    ADD   A,0x2
    1C82: 53 7C    MOV   [__r1],A
    1C84: 52 FB    MOV   A,[X-5]
    1C86: 09 03    ADC   A,0x3
    1C88: 10       PUSH  X
    1C89: 58 7C    MOV   X,[__r1]
    1C8B: 28       ROMX  
    1C8C: 20       POP   X
    1C8D: 53 7C    MOV   [__r1],A
    1C8F: 55 7D 00 MOV   [__r0],0x0
    1C92: 26 7C 10 AND   [__r1],0x10
    1C95: 26 7D 00 AND   [__r0],0x0
    1C98: 20       POP   X
    1C99: 7F       RET   
