//*****************************************************************************
//*****************************************************************************
//  FILENAME: DAC8_2.h
//   Version: 2.2, Updated on 2013/5/19 at 10:43:4
//  Generated by PSoC Designer 5.4.2946
//
//  DESCRIPTION:  DAC8 User Module C language interface file.
//-----------------------------------------------------------------------------
//      Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
//*****************************************************************************
//*****************************************************************************
#ifndef DAC8_2_INCLUDE
#define DAC8_2_INCLUDE

#include <m8c.h>

//-------------------------------------------------
// Defines for DAC8_2 API's.
//-------------------------------------------------
// Power Setting Defines
#define DAC8_2_OFF                 0
#define DAC8_2_LOWPOWER            1
#define DAC8_2_MEDPOWER            2
#define DAC8_2_HIGHPOWER           3
#define DAC8_2_FULLPOWER           3

// Define constants for declaring function prototypes based on DataFormat parameter
#define DAC8_2_OffsetBinary            0x04
#define DAC8_2_TwosComplement          0x02
#define DAC8_2_SignAndMagnitude        0x01
#define DAC8_2_RawRegister             0x00
#define DAC8_2_DATAFORMAT          0x7
#define DAC8_2_OFFSETBINARY        DAC8_2_DATAFORMAT & DAC8_2_OffsetBinary
#define DAC8_2_TWOSCOMPLEMENT      DAC8_2_DATAFORMAT & DAC8_2_TwosComplement
#define DAC8_2_SIGNANDMAGNITUDE    DAC8_2_DATAFORMAT & DAC8_2_SignAndMagnitude

// Declare function fastcall16 pragmas
#pragma fastcall16 DAC8_2_Start
#pragma fastcall16 DAC8_2_SetPower
#pragma fastcall16 DAC8_2_Stop

//-------------------------------------------------
// Prototypes of the DAC8_2 API.
//-------------------------------------------------
extern void  DAC8_2_Start(BYTE bPowerSetting);
extern void  DAC8_2_SetPower(BYTE bPowerSetting);
extern void  DAC8_2_Stop(void);

// Declare overloaded functions based on DataForamt parameter selected
#if DAC8_2_OFFSETBINARY
   #pragma fastcall16 DAC8_2_WriteBlind
   #pragma fastcall16 DAC8_2_WriteStall
   extern void  DAC8_2_WriteBlind(BYTE bOutputValue);
   extern void  DAC8_2_WriteStall(BYTE bOutputValue);
#else
   #if DAC8_2_TWOSCOMPLEMENT
      #pragma fastcall16 DAC8_2_WriteBlind
      #pragma fastcall16 DAC8_2_WriteStall
      extern void  DAC8_2_WriteBlind(CHAR cOutputValue);
      extern void  DAC8_2_WriteStall(CHAR cOutputValue);
   #else    //DAC8_2_SIGNANDMAGNITUDE
      #pragma fastcall16 DAC8_2_WriteBlind2B
      #pragma fastcall16 DAC8_2_WriteStall2B
      extern void  DAC8_2_WriteBlind2B(BYTE bLSB, BYTE bMSB);
      extern void  DAC8_2_WriteStall2B(BYTE bLSB, BYTE bMSB);
   #endif
#endif

//-------------------------------------------------
// Hardware Register Definitions
//-------------------------------------------------

#pragma ioport  DAC8_2_LSB_CR0: 0x090                      // LSB Analog control register 0
BYTE            DAC8_2_LSB_CR0;
#pragma ioport  DAC8_2_LSB_CR1: 0x091                      // LSB Analog control register 1
BYTE            DAC8_2_LSB_CR1;
#pragma ioport  DAC8_2_LSB_CR2: 0x092                      // LSB Analog control register 2
BYTE            DAC8_2_LSB_CR2;
#pragma ioport  DAC8_2_LSB_CR3: 0x093                      // LSB Analog control register 3
BYTE            DAC8_2_LSB_CR3;

#pragma ioport  DAC8_2_MSB_CR0: 0x094                      // MSB Analog control register 0
BYTE            DAC8_2_MSB_CR0;
#pragma ioport  DAC8_2_MSB_CR1: 0x095                      // MSB Analog control register 1
BYTE            DAC8_2_MSB_CR1;
#pragma ioport  DAC8_2_MSB_CR2: 0x096                      // MSB Analog control register 2
BYTE            DAC8_2_MSB_CR2;
#pragma ioport  DAC8_2_MSB_CR3: 0x097                      // MSB Analog control register 3
BYTE            DAC8_2_MSB_CR3;

#endif
// end of file DAC8_2.h
